<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>华三AC+AP部署无线基本配置</title>
    <link href="/2024/12/31/%E5%8D%8E%E4%B8%89AC-AP%E9%83%A8%E7%BD%B2%E6%97%A0%E7%BA%BF%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/12/31/%E5%8D%8E%E4%B8%89AC-AP%E9%83%A8%E7%BD%B2%E6%97%A0%E7%BA%BF%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="华三AC-AP部署无线基本配置"><a href="#华三AC-AP部署无线基本配置" class="headerlink" title="华三AC+AP部署无线基本配置"></a>华三AC+AP部署无线基本配置</h1><h2 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h2><p>完成网络的规划和配置，PC和无线终端设备能ping通，各交换机和路由能ping通。</p><h2 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h2><ol><li>掌握交换机VLAN配置</li><li>掌握AC配置</li><li>掌握AP配置</li><li>掌握路由配置</li><li>掌握链路聚合</li><li>掌握LoopBack配置</li></ol><h2 id="实训拓扑"><a href="#实训拓扑" class="headerlink" title="实训拓扑"></a>实训拓扑</h2><p>本任务的实训拓扑图如图1所示。</p><p>本任务具体要求如下：</p><p>1、按图示连接好网络设备，AP可以只用一个</p><p>2、IP网段地址用自己的学号后两位以及后面的网段（本人学号后两位为47）</p><p>3、管理IP都用loopback地址</p><p>4、完成网络的规划和配置，PC和无线终端设备能ping通</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="1．按图连接设备"><a href="#1．按图连接设备" class="headerlink" title="1．按图连接设备"></a><strong>1．按图连接设备</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202412310857733.png"></p><h3 id="2．规划交换机、路由器、PC、AC的IP地址，见表如下。"><a href="#2．规划交换机、路由器、PC、AC的IP地址，见表如下。" class="headerlink" title="2．规划交换机、路由器、PC、AC的IP地址，见表如下。"></a>2．规划交换机、路由器、PC、AC的IP地址，见表如下。</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202412310857205.png"></p><h3 id="3-配置AC机"><a href="#3-配置AC机" class="headerlink" title="3.  配置AC机"></a>3.  配置AC机</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设备管理VLAN 9、AP管理VLAN 8、终端接入VLAN 7，并添加描述</span><br>[AC]vlan 7<br>[AC-vlan7]description ap-yonghu<br>[AC-vlan7]vlan 8<br>[AC-vlan8]description ac-ap<br>[AC-vlan8]vlan 9<br>[AC-vlan9]description ac-sw-ap<br>[AC-vlan9]qu<br>[AC]interface vlan 9<br>[AC-Vlan-interface9]ip address 192.168.9.1 24<br>[AC-Vlan-interface9]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置交换机的接口为trunk口允许VLAN通行</span><br>[AC]interface g1/0/0<br>[AC-GigabitEthernet1/0/0]port link-type trunk<br>[AC-GigabitEthernet1/0/0]port trunk permit vlan all<br>[AC-GigabitEthernet1/0/0]quit<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置AP管理同网段IP地址</span><br>[AC]interface vlan 8<br>[AC-Vlan-interface8]ip address 192.168.8.253 24<br>[AC-Vlan-interface8]qu<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置路由 将路由指向核心交换机</span><br>[AC]ip route-static 0.0.0.0 0.0.0.0 192.168.9.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启自动AP功能</span><br>[AC]wlan auto-ap enable<br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启自动AP自动固化功能</span><br>[AC]wlan auto-persistent enable<br>[AC]display wlan ap all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动AP固化,不固化无法修改ap名称。</span><br>[AC]wlan auto-ap persistent all<br><span class="hljs-meta prompt_">#</span><span class="language-bash">对AP进行重命名</span><br>[AC]wlan rename-ap accf-653e-0700 ap1<br>[AC]display wlan ap all<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建无线服务模板</span><br>[AC]wlan service-template wuxian<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在无线服务模板视图下配置SSID,即无线网络名称（WiFi名称）</span><br>[AC-wlan-st-wuxian]ssid 业务<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启无线服务模板</span><br>[AC-wlan-st-wuxian]service-template enable<br>[AC-wlan-st-wuxian]quit<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建Wlan组</span><br>[AC]wlan ap-group group1<br>[AC-wlan-ap-group-group1]ap ap1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建并进入AP组下的AP型号视图</span><br>[AC-wlan-ap-group-group1]ap-model WA6320-HCL<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入Radio视图</span><br>[AC-wlan-ap-group-group1-ap-model-WA6320-HCL]radio 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">无线服务模板绑定Radio时绑定的VLAN ID，此处VLAN就是用户dhcp获取的网关vlan <span class="hljs-built_in">id</span></span><br>[AC-wlan-ap-group-group1-ap-model-WA6320-HCL-radio-1]service-template wuxian vlan 7<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启射频功能,即WiFi可被搜索</span><br>[AC-wlan-ap-group-group1-ap-model-WA6320-HCL-radio-1]radio enable<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置LoopBack地址</span><br>[AC]int LoopBack 1<br>[AC-LoopBack1]ip address 192.168.56.14 24<br>[AC-LoopBack1]qu<br></code></pre></td></tr></table></figure><h4 id="4-配置汇聚交换机"><a href="#4-配置汇聚交换机" class="headerlink" title="4.  配置汇聚交换机"></a>4.  配置汇聚交换机</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设备管理VLAN 9、AP管理VLAN 8、终端接入VLAN 7</span><br>[huiju]vlan 7<br>[huiju-vlan7]vlan 8<br>[huiju-vlan8]vlan 9<br>[huiju-vlan9]qu<br>[huiju]interface vlan 9<br>[huiju-Vlan-interface9]ip address 192.168.9.2 24<br>[huiju-Vlan-interface9]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置AC和接入的对接端口</span><br>[huiju]interface g1/0/2<br>[huiju-GigabitEthernet1/0/2]port link-type trunk<br>[huiju-GigabitEthernet1/0/2]port trunk permit vlan all<br>[huiju-GigabitEthernet1/0/2]qu<br>[huiju]interface g1/0/1<br>[huiju-GigabitEthernet1/0/1]port link-type trunk<br>[huiju-GigabitEthernet1/0/1]port trunk permit vlan all<br>[huiju-GigabitEthernet1/0/1]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">汇聚交换机上配置终端接入VLAN网关和AP管理VLAN网关</span><br>[huiju]interface vlan 7<br>[huiju-Vlan-interface7]ip address 192.168.7.254 24<br>[huiju-Vlan-interface7]qu<br>[huiju]interface vlan 8<br>[huiju-Vlan-interface8]ip address 192.168.8.254 24<br>[huiju-Vlan-interface8]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置dhcp，终端接入获取的上网IP</span><br>[huiju]dhcp enable<br>[huiju]dhcp server forbidden-ip 192.168.7.254<br>[huiju]dhcp server ip-pool ap-yonghu<br>[huiju-dhcp-pool-ap-yonghu]network 192.168.7.0 24<br>[huiju-dhcp-pool-ap-yonghu]gateway-list 192.168.7.254<br>[huiju-dhcp-pool-ap-yonghu]dns-list 202.102.224.68<br>[huiju-dhcp-pool-ap-yonghu]qu<br>[huiju]dhcp server forbidden-ip  192.168.8.254<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">AP获取的管理IP</span><br>[huiju]dhcp server ip-pool ac-ap<br>[huiju-dhcp-pool-ac-ap]network 192.168.8.0 24<br>[huiju-dhcp-pool-ac-ap]gateway-list 192.168.8.254<br>[huiju-dhcp-pool-ac-ap]dns-list 202.102.224.68<br>[huiju-dhcp-pool-ac-ap]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置交换机链路聚合</span><br>[huiju]interface Bridge-Aggregation 1<br>[huiju-Bridge-Aggregation1]qu<br>[huiju]interface g1/0/9<br>[huiju-GigabitEthernet1/0/9]port link-aggregation group 1<br>[huiju-GigabitEthernet1/0/9]interface g1/0/10<br>[huiju-GigabitEthernet1/0/10]port link-aggregation group 1<br>[huiju-GigabitEthernet1/0/10]qu<br>[huiju]interface vlan 1<br>[huiju-Vlan-interface1]ip address 192.168.1.2 24<br>[huiju-Vlan-interface1]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置下一跳地址</span><br>[huiju]ip route-static 192.168.48.0 24 192.168.1.1<br>[huiju]ip route-static 192.168.47.0 24 192.168.1.1<br>[huiju]ip route-static 192.168.7.0 24 192.168.9.3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置LoopBack地址</span><br>[huiju]int LoopBack 1<br>[huiju-LoopBack1]ip address 192.168.56.13 24<br>[huiju-LoopBack1]qu<br></code></pre></td></tr></table></figure><h3 id="5-配置接入交换机"><a href="#5-配置接入交换机" class="headerlink" title="5.  配置接入交换机"></a>5.  配置接入交换机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设备管理VLAN 9、AP管理VLAN 8、终端接入VLAN 7</span><br>[jieru]vlan 7<br>[jieru-vlan7]vlan 8<br>[jieru-vlan8]vlan 9<br>[jieru-vlan9]qu<br>[jieru]interface vlan 9<br>[jieru-Vlan-interface9]ip address 192.168.9.1 24<br>[jieru-Vlan-interface9]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置上联端口、将AP加入到AP管理VLAN</span><br>[jieru]interface g1/0/1<br>[jieru-GigabitEthernet1/0/1]port link-type trunk<br>[jieru-GigabitEthernet1/0/1]port trunk permit vlan all<br>[jieru-GigabitEthernet1/0/1]<br>[jieru-GigabitEthernet1/0/1]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">接入台式机测试用</span><br>[jieru]interface g1/0/3<br>[jieru-GigabitEthernet1/0/3]port access vlan 8<br>[jieru-GigabitEthernet1/0/3]qu<br>[jieru]interface g1/0/4<br>[jieru-GigabitEthernet1/0/4]port access vlan 8<br>[jieru-GigabitEthernet1/0/4]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置路由 将路由指向核心交换机</span><br>[jieru]ip route-static 0.0.0.0 0.0.0.0 192.168.9.2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置下一跳地址</span><br>[jieru]ip route-static 192.168.1.0 24 192.168.9.2<br>[jieru]ip route-static 192.168.48.0 24 192.168.9.2<br>[jieru]ip route-static 192.168.47.0 24 192.168.9.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置LoopBack地址</span><br>[jieru]int LoopBack 1<br>[jieru-LoopBack1]ip address 192.168.56.15 24<br>[jieru-LoopBack1]qu<br></code></pre></td></tr></table></figure><h3 id="6-配置SXX汇聚交换机"><a href="#6-配置SXX汇聚交换机" class="headerlink" title="6.  配置SXX汇聚交换机"></a>6.  配置SXX汇聚交换机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置VLAN3</span><br>[sxx]vlan 3<br>[sxx-vlan3]port g1/0/2<br>[sxx-vlan3]qu<br>[sxx]interface vlan 3<br>[sxx-Vlan-interface3]ip address 192.168.28.1 24<br>[sxx]vlan 4<br>[sxx-vlan4]port g1/0/1<br>[sxx-vlan4]qu<br>[sxx]interface vlan 4<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置下一跳地址</span><br>[sxx-Vlan-interface4]ip address 192.168.29.2 24<br>[sxx]ip route-static 192.168.1.0 24 192.168.48.1<br>[sxx]ip route-static 192.168.9.0 24 192.168.48.1<br>[sxx]ip route-static 192.168.7.0 24 192.168.48.1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置LoopBack地址</span><br>[sxx]int LoopBack 1<br>[sxx-LoopBack1]ip address 192.168.56.11 24<br>[sxx-LoopBack1]qu<br></code></pre></td></tr></table></figure><h3 id="7-配置核心路由器"><a href="#7-配置核心路由器" class="headerlink" title="7.  配置核心路由器"></a>7.  配置核心路由器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[hexin]interface g0/0/0<br>[hexin-GigabitEthernet0/0/0]ip address 192.168.29.1 24<br>[hexin-GigabitEthernet0/0/0]qu<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置路由器链路聚合</span><br>[hexin]interface Route-Aggregation 1<br>[hexin-Route-Aggregation1]qu<br>[hexin]interface g0/0/9<br>[hexin-GigabitEthernet0/0/9]port link-aggregation group 1<br>[hexin-GigabitEthernet0/0/9]interface g0/0/10<br>[hexin-GigabitEthernet0/0/10]port link-aggregation group 1<br>[hexin-GigabitEthernet0/0/10]qu<br>[hexin]interface Route-Aggregation 1<br>[hexin-Route-Aggregation1]ip address 192.168.1.1 24<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置下一跳地址</span><br>[hexin]ip route-static 192.168.47.0 24 192.168.48.2<br>[hexin]ip route-static 192.168.9.0 24 192.168.1.2<br>[hexin]ip route-static 192.168.7.0 24 192.168.1.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置LoopBack地址</span><br>[hexin]int LoopBack 1<br>[hexin-LoopBack1]ip address 192.168.56.12 24<br>[hexin-LoopBack1]qu<br></code></pre></td></tr></table></figure><h3 id="8-配置PC"><a href="#8-配置PC" class="headerlink" title="8. 配置PC"></a>8. 配置PC</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202412310857105.png"></p><h3 id="9-实验结果"><a href="#9-实验结果" class="headerlink" title="9.  实验结果"></a>9.  实验结果</h3><p>各交换机和路由器之间可以相互ping通，不一一展示，以下只展示PC3和Phone_6之间的相互ping命令结果。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202412310857844.png"> </p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202412310857106.png"></p><span id="more"></span>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件工程概论</title>
    <link href="/2024/03/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A6%82%E8%AE%BA/"/>
    <url>/2024/03/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A6%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-软件工程概述"><a href="#1-软件工程概述" class="headerlink" title="1 软件工程概述"></a>1 软件工程概述</h1><p>软件 = 程序 + 数据 + 文档</p><p>软件工程三要素：方法、工具、过程</p><p>软件生命周期一般分为：问题定义、可行性研究、需求分析、设计(总体/详细)、编码、测试、运行与维护阶段。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202403241940550.png"></p><ol><li><strong>瀑布模型</strong></li></ol><p>瀑布模型将软件生命周期的各项活动自上而下如瀑布流水依次连接，<strong>逐层反馈</strong>，<strong>不能跨级反馈</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202403241950758.png"></p><p>优点：</p><ul><li>有良好的需求确认入口，为后续的开发奠定良好的基础。</li><li>强调设计过程。软件是“创造”出来的，不是“制造”出来的，所以设计显得格外重要。</li><li>每一阶段结束后要进行复审，允许获取方/用户的参与，有效的控制了系统的质量问题。</li><li>当前一阶段完成时，只需要关注后续阶段即可。（已经确保了前一阶段的有效性）</li></ul><p>缺点：</p><p>在瀑布模型结束之前都不能演示系统的功能，增加了项目的风险。</p><ol start="2"><li><strong>增量模型</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202403241952665.png"></p><p>优点：</p><ul><li><p>增量模型作为瀑布模型的变体，<strong>具有瀑布模型的所有优点</strong></p></li><li><p>第一个可交付版本所需成本和时间相比于瀑布模型来说是很少的，比如说第一个增量只有软件的核心功能。<br>  能很快的看到一些成果，增加开发人员的信心。</p></li><li><p><strong>开发风险相对较小</strong>。（大事化小，小事化了，分而治之）</p></li></ul><p>缺点：</p><ul><li>对初始增量的需求进行修改，可能会影响后续的增量。</li><li>增量模型要求必须有<strong>一部分的需求</strong>是可以<strong>确定</strong>的</li><li>增量过多会造成管理成本超支，影响进度。</li></ul><ol start="3"><li><strong>演化模型</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202403242001991.png"></p><p>注：不能弱化需求分析阶段的工作！</p><p>优点：</p><ul><li><p>在<strong>需求不明确</strong>的情况下，可以使用该模型。</p></li><li><p>用户可以通过运行系统来对需求进行改进。</p></li><li><p>需要更多用户/获取方的参与，增加了对软件质量的控制。</p></li></ul><p>缺点：</p><ul><li><p>较多的迭代使得管理成本较大</p></li><li><p>容易让开发团队有不进行需求分析的借口。</p></li><li><p>用户不易理解该模型不断迭代演化的特点，因此当某次迭代后的反馈不理想时，用户容易产生抱怨情绪。（实际上，这一缺点也是帮助了开发团队能从用户那儿获取到更明确的需求，因为用户抱怨，不满意，所以会提出改进意见，使得需求更加明确，促进了下一次的迭代）</p></li></ul><ol start="4"><li><strong>喷泉模型</strong></li></ol><p>喷泉模型主要用于描述<strong>面向对象</strong>的软件的开发过程，该模型自下而上，各阶段<strong>无缝连接</strong>，可<strong>多次迭代</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202403242003485.png"></p><p>优点：</p><ul><li>各阶段无缝连接，可以同步开发，提高开发效率。</li></ul><p>缺点：</p><ul><li>由于多次迭代，会产生大量的文档，会导致文档管理困难。</li></ul><ol start="5"><li><strong>螺旋模型</strong></li></ol><p>瀑布模型 + 演化模型 + <strong>风险分析</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202403242007638.png"></p><p>优点：</p><ul><li>对大型的项目有较好的风险控制能力。</li></ul><p>缺点：</p><ul><li><p>需要分析人员有风险分析的经验，分析失误会造成很大的损失。</p></li><li><p>螺旋模型周期相对较长，不适用于大部分软件开发项目。</p></li></ul><ol start="6"><li><strong>快速原型模型</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202403242007659.png"></p><p>优点：</p><ul><li><p>主要针对于小型的、快捷的，并且需求不明确的项目.</p></li><li><p>有的软件原型可以作为最终产品的一部分。</p></li></ul><p>缺点：</p><ul><li>快速建立的系统结构加上连续修改可能导致产品质量低下，原型系统的内部结构可能不好。</li></ul><ol start="7"><li><strong>统一过程模型</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202403242011494.png"></p><ol start="8"><li><strong>敏捷开发模型</strong></li></ol><p>开发流程中三大角色：产品负责人、流程管理员、开发团队</p><p>开发原则：快速迭代、充分讨论、编写可测试的需求文档、多交流减少文档、做好产品原型、尽早测试</p><p>以人为本、自主管理、自我组织、多功能型</p><h1 id="2-结构化分析"><a href="#2-结构化分析" class="headerlink" title="2 结构化分析"></a>2 结构化分析</h1><h2 id="2-1-问题定义"><a href="#2-1-问题定义" class="headerlink" title="2.1 问题定义"></a>2.1 问题定义</h2><p>项目名称、问题、项目目标、项目规模、初步设想、可行性研究、项目背景、安全可靠性 ……</p><h2 id="2-2-可靠性分析"><a href="#2-2-可靠性分析" class="headerlink" title="2.2 可靠性分析"></a>2.2 可靠性分析</h2><p>技术可行性、经济可行性、（操作可行性）、社会(法律)可行性</p><h2 id="2-3-需求分析"><a href="#2-3-需求分析" class="headerlink" title="2.3 需求分析"></a>2.3 需求分析</h2><p>获取需求 —— 分析需求 —— 定义需求 —— 验证需求</p><p>结构化需求分析是一种面向<strong>数据流</strong>进行的需求分析方法。四个核心功能如下：</p><h3 id="2-3-1-功能建模-数据流图）"><a href="#2-3-1-功能建模-数据流图）" class="headerlink" title="2.3.1 功能建模(数据流图）"></a>2.3.1 功能建模(数据流图）</h3><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-PostgreSQL1</title>
    <link href="/2024/02/16/Linux-PostgreSQL1/"/>
    <url>/2024/02/16/Linux-PostgreSQL1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-PostgreSQL安装"><a href="#1-PostgreSQL安装" class="headerlink" title="1 PostgreSQL安装"></a>1 PostgreSQL安装</h1><h2 id="1-1-二进制安装包安装"><a href="#1-1-二进制安装包安装" class="headerlink" title="1.1 二进制安装包安装"></a>1.1 二进制安装包安装</h2><p><a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/</a><br>        <a href="https://www.postgresql.org/download/linux/ubuntu/">https://www.postgresql.org/download/linux/ubuntu/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">[root@Rocky8 ~]# yum info postgresql<br>root@ubuntu2004:~# apt list postgresql<br></code></pre></td></tr></table></figure><p><strong>以Rocky8为例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装指定版本 postgresql-15</span><br>[root@Rocky8 ~]# vim install_postgresql_15.sh<br>sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm<br>sudo dnf -qy module disable postgresql<br>sudo dnf install -y postgresql15-server<br>sudo /usr/pgsql-15/bin/postgresql-15-setup initdb<br>sudo systemctl enable postgresql-15<br>sudo systemctl start postgresql-15<br>[root@Rocky8 ~]# bash install_postgresql_15.sh<br>[root@Rocky8 ~]# vim -y install postgresql<br><br>[root@ubuntu2004 ~]# pg_createcluster 12 main --start<br><br>[root@Rocky8 ~]# systemctl enable --now postgresql-15<br>[root@rocky8 ~]# sudo -u postgres psql -c &quot;SELECT version();&quot;<br></code></pre></td></tr></table></figure><h2 id="1-2-源码编译安装"><a href="#1-2-源码编译安装" class="headerlink" title="1.2 源码编译安装"></a>1.2 源码编译安装</h2><p><a href="https://www.postgresql.org/docs/current/install-procedure.html">https://www.postgresql.org/docs/current/install-procedure.html</a></p><p><a href="https://www.postgresql.org/docs/current/installation.html">https://www.postgresql.org/docs/current/installation.html</a> </p><p><a href="http://www.postgres.cn/v2/download">http://www.postgres.cn/v2/download</a></p><p><strong>安装依赖包</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#Ubuntu</span><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># apt update</span><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># apt install -y  gcc make libreadline-dev zlib1g-dev</span><br><br><span class="hljs-comment">#RHEL系统</span><br>yum install-y gcc make readline-devel zlib-dev<br></code></pre></td></tr></table></figure><p><strong>源码编译安装</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># tar xf postgresql-14.2.tar.gz</span><br><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># ./configure --prefix=/apps/pgsql</span><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># make -j 2 world</span><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># make install-world</span><br></code></pre></td></tr></table></figure><p><strong>初始化</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs ruby">root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># useradd -s /bin/bash -m -d /home/postgres postgres</span><br><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># echo -e &#x27;123456\n123456&#x27; | passwd postgres</span><br>New <span class="hljs-symbol">password:</span> Retype new <span class="hljs-symbol">password:</span> <span class="hljs-symbol">passwd:</span> password updated successfully<br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># echo postgres:123456|chpasswd</span><br><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># mkdir -pv /pgsql/data/</span><br><span class="hljs-symbol">mkdir:</span> created directory <span class="hljs-string">&#x27;/pgsql&#x27;</span><br><span class="hljs-symbol">mkdir:</span> created directory <span class="hljs-string">&#x27;/pgsql/data/&#x27;</span><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># chown postgres.postgres /pgsql/data/</span><br><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># vim /etc/profile.d/pgsql.sh</span><br>export <span class="hljs-variable constant_">PGHOME</span>=<span class="hljs-regexp">/apps/pgsql</span> <br>export <span class="hljs-variable constant_">PATH</span>=<span class="hljs-variable">$PGHOME</span>/bin/<span class="hljs-symbol">:</span><span class="hljs-variable">$PATH</span> <br>export <span class="hljs-variable constant_">PGDATA</span>=<span class="hljs-regexp">/pgsql/data</span> <br>export <span class="hljs-variable constant_">PGUSER</span>=postgres <br>export <span class="hljs-variable constant_">MANPATH</span>=<span class="hljs-regexp">/apps/pgsql</span><span class="hljs-regexp">/share/man</span><span class="hljs-symbol">:</span><span class="hljs-variable">$MANPATH</span><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># . /etc/profile.d/pgsql.sh </span><br><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># su - postgres</span><br><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~/postgresql-</span><span class="hljs-number">14.2</span><span class="hljs-comment"># su - postgres</span><br>postgres<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>initdb<br>postgres<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>pg_ctl -l logfile start<br>waiting <span class="hljs-keyword">for</span> server to start.... done<br>server started<br><br><span class="hljs-comment"># 开机启动</span><br><br><span class="hljs-comment">#第一种方法</span><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># cat /etc/rc.local </span><br><span class="hljs-comment">#!/bin/bash</span><br>su - postgres -c<span class="hljs-string">&quot;/apps/pgsql/bin/pg_ctl -l logfile start&quot;</span><br>root<span class="hljs-variable">@ubuntu2004</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># chmod +x /etc/rc.local </span><br><br><span class="hljs-comment">#第二种方法 建议service设置开机启动</span><br>[root<span class="hljs-variable">@ubuntu2004</span> ~]<span class="hljs-comment">#cat&gt; /lib/systemd/system/postgresql.service &lt;&lt;EOF </span><br>[Unit] <br>Description=PostgreSQL database server <br>After=network.target <br><br>[Service] <br>User=postgres <br>Group=postgres <br><br>ExecStart=<span class="hljs-regexp">/apps/pgsql</span><span class="hljs-regexp">/bin/postmaster</span> -D /pgsql/data <br>ExecReload=<span class="hljs-regexp">/bin/kill</span> -<span class="hljs-variable constant_">HUP</span> <br><br>[Install] <br>WantedBy=multi-user.target <br><span class="hljs-variable constant_">EOF</span> <br><br>[root<span class="hljs-variable">@ubuntu2004</span> ~] <span class="hljs-comment"># systemctl daemon-reload </span><br>[root<span class="hljs-variable">@ubuntu2004</span> ~] <span class="hljs-comment"># systemctl enable --now postgresql.service</span><br></code></pre></td></tr></table></figure><p><strong>查看编译和相关信息</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[postgres@postgresql ~]$ pg_config<br></code></pre></td></tr></table></figure><h2 id="1-3-pg-ctl-命令管理PostgreSQL"><a href="#1-3-pg-ctl-命令管理PostgreSQL" class="headerlink" title="1.3 pg_ctl 命令管理PostgreSQL"></a>1.3 pg_ctl 命令管理PostgreSQL</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">root@ubuntu2004:~# pg_ctl <span class="hljs-comment">--help</span><br><br><br></code></pre></td></tr></table></figure><p> <strong>Mysql 一个主进程开多个线程   Postgresql 一个主进程里有多个子线程</strong></p><h1 id="2-PostgreSQL-管理"><a href="#2-PostgreSQL-管理" class="headerlink" title="2 PostgreSQL 管理"></a>2 PostgreSQL 管理</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-OpenVPN</title>
    <link href="/2024/02/15/Linux-OpenVPN/"/>
    <url>/2024/02/15/Linux-OpenVPN/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-MySQL-集群与压力测试</title>
    <link href="/2024/02/08/Linux-MySQL-%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/02/08/Linux-MySQL-%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MySQL-集群-Cluster"><a href="#1-MySQL-集群-Cluster" class="headerlink" title="1 MySQL 集群 Cluster"></a>1 MySQL 集群 Cluster</h1><h2 id="1-1-MySQL主从复制"><a href="#1-1-MySQL主从复制" class="headerlink" title="1.1 MySQL主从复制"></a>1.1 MySQL主从复制</h2><ul><li>读写分离</li><li>复制：每个节点都有相同的数据集，向外扩展，基于<strong>二进制日志</strong>的单向复制<ul><li>负载均衡读操作</li><li>备份</li><li>高可用和故障切换</li><li>数据分布</li><li>MySQL升级</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202402081653567.png"></p><figure class="highlight mathematica"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs mathematica">相关线程：<span class="hljs-variable">dump</span> <span class="hljs-built_in">Thread</span>      <span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span> <span class="hljs-built_in">Thread</span>     <span class="hljs-variable">SQL</span> <span class="hljs-built_in">Thread</span><br>相关二进制文件：二进制日志（<span class="hljs-variable">Bin</span> <span class="hljs-built_in">Log</span>）   中继日志（<span class="hljs-variable">Relay</span> <span class="hljs-built_in">Log</span>）   区分：<span class="hljs-variable">select</span> <span class="hljs-operator">@@</span><span class="hljs-type">server_id</span><br></code></pre></td></tr></table></figure><p><strong>以MySQL8.0为例，新建主从复制</strong></p><p><strong>主节点配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Rocky8 ~]# yum -y install mysql-server<br>[root@Rocky8 ~]# vim /etc/my.cnf<br>[mysqld]<br>server-id=8<br>log-bin=/data/mysql/logbin/mysql-bin<br>[root@Rocky8 ~]# mkdir -p /data/mysql/logbin/<br>[root@Rocky8 ~]# chown -R mysql.mysql /data/mysql/logbin/<br>[root@Rocky8 ~]# systemctl enable --now mysqld<br>[root@Rocky8 ~]# ll /data/mysql/logbin/<br>total 12<br>-rw-r----- 1 mysql mysql 179 Feb  8 17:18 mysql-bin.000001<br>-rw-r----- 1 mysql mysql 156 Feb  8 17:18 mysql-bin.000002<br>-rw-r----- 1 mysql mysql  72 Feb  8 17:18 mysql-bin.index<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">create user repluser@<span class="hljs-string">&#x27;10.1.16.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.1.16.%&#x27;</span>;</span><br></code></pre></td></tr></table></figure><p><strong>从节点配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Rocky8 ~]# yum -y install mysql-server<br>[root@Rocky8 ~]# vim /etc/my.cnf<br>[mysqld]<br>server-id=9<br>read-only<br>log-bin=/data/mysql/logbin/mysql-bin<br>[root@Rocky8 ~]# mkdir -p /data/mysql/logbin/<br>[root@Rocky8 ~]# chown -R mysql.mysql /data/mysql/<br>[root@Rocky8 ~]# systemctl enable --now mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用有复制权限的用户账号连接至主服务器，并启动复制线程</span><br>CHANGE MASTER TO<br>    MASTER_HOST=&#x27;10.1.16.128&#x27;,<br>    MASTER_USER=&#x27;repluser&#x27;,<br>    MASTER_PASSWORD=&#x27;123456&#x27;,<br>    MASTER_PORT=3306,<br>    MASTER_LOG_FILE=&#x27;mysql-bin.000002&#x27;,<br>    MASTER_LOG_POS=156,<br>    MASTER_CONNECT_RETRY=10;<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">start slave;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show slave status\G</span><br>Master_Host: 10.1.16.128<br>                  Master_User: repluser<br>                  Master_Port: 3306<br>                Connect_Retry: 10<br>              Master_Log_File: mysql-bin.000002<br>          Read_Master_Log_Pos: 683<br>               Relay_Log_File: Rocky8-relay-bin.000002<br>                Relay_Log_Pos: 851<br>        Relay_Master_Log_File: mysql-bin.000002<br>          Slave_IO_Running: Yes<br>       Slave_SQL_Running: Yes<br>       Seconds_Behind_Master: 0<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show processlist;</span><br></code></pre></td></tr></table></figure><p><strong>主服务器非新建时，主服务器运行一段时间后，新增从节点服务器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">主节点</span><br>[root@Rocky8 ~]# vim /etc/my.cnf<br>[mysqld]<br>server-id=8<br>log-bin=/mysql/logbin/mysql-bin<br>[root@Rocky8 ~]# mkdir -p /mysql/logbin/<br>[root@Rocky8 ~]# chown -R mysql.mysql /mysql/logbin/<br>[root@Rocky8 ~]#  systemctl enable --now mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">完全备份已有数据</span><br>[root@Rocky8 ~]# mysqldump -uroot -A -F --single-transaction --source-data=1 &gt; /data/full_bak.sql<br>[root@Rocky8 ~]# scp /data/full_bak.sql 10.1.16.129:<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">从节点</span><br>[root@Rocky8 ~]# vim /etc/my.cnf<br>[mysqld]<br>server-id=9<br>read-only<br>[root@Rocky8 ~]# systemctl enable --now mysqld<br><br>[root@Rocky8 ~]# vim full_bak.sql <br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加一下内容</span><br>CHANGE MASTER TO<br>    MASTER_HOST=&#x27;10.1.16.128&#x27;,<br>    MASTER_USER=&#x27;repluser&#x27;,<br>    MASTER_PASSWORD=&#x27;123456&#x27;,<br>    MASTER_PORT=3306;<br>CHANGE MASTER TO MASTER_LOG_FILE=&#x27;mysql-bin.000003&#x27;, MASTER_LOG_POS=156;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> sql_log_bin = 0;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">source</span> full_bak.sql;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show slave status\G</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">start slave;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show slave status\G</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show processlist;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> sql_log_bin=1;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-实现级联复制"><a href="#1-2-实现级联复制" class="headerlink" title="1.2 实现级联复制"></a>1.2 实现级联复制</h2><p><strong>中间节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>server-id=18<br>log_bin<br>log_slave_updates    #级联复制中间节点的必选项,MySQL8.0此为默认值,可以不要人为添加,其它版本默认不开启<br>read-only<br></code></pre></td></tr></table></figure><h2 id="1-3-实现主主复制"><a href="#1-3-实现主主复制" class="headerlink" title="1.3 实现主主复制"></a>1.3 实现主主复制</h2><p><strong>keepalived</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 冲突解决方案<br><span class="hljs-operator">&gt;</span> stop slave;<br><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> globle sql_slave_skip_counter<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">start</span> slave;<br></code></pre></td></tr></table></figure><h2 id="1-4-实现半同步复制"><a href="#1-4-实现半同步复制" class="headerlink" title="1.4 实现半同步复制"></a>1.4 实现半同步复制</h2><p>同步复制：数据丢失风险较大</p><p>全同步复制：效率低</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># MySQL8<span class="hljs-number">.0</span>的默认值<br>rpl_semi_rsync_master_wait_point<span class="hljs-operator">=</span>after_sync<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查看插件文件<br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# rpm <span class="hljs-operator">-</span>ql mysql<span class="hljs-operator">-</span>server <span class="hljs-operator">|</span>grep semisync<br><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>lib64<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>plugin<span class="hljs-operator">/</span>semisync_master.so<br><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>lib64<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>plugin<span class="hljs-operator">/</span>semisync_slave.so<br><br># 主节点<br>mysql<span class="hljs-operator">&gt;</span> INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>; #永久安装插件<br><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf.d<span class="hljs-operator">/</span>mysql<span class="hljs-operator">-</span>server.cnf<br>[mysqld]<br>server<span class="hljs-operator">-</span>id<span class="hljs-operator">=</span><span class="hljs-number">8</span><br>rpl_semi_sync_master_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>     #修改此行,需要先安装semisync_master.so插件后,再重启,否则无法启动<br>rpl_semi_sync_master_timeout<span class="hljs-operator">=</span><span class="hljs-number">3000</span>   #设置<span class="hljs-number">3</span>s内无法同步，也将返回成功信息给客户端<br><br># 从节点<br>mysql<span class="hljs-operator">&gt;</span> INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>;<br><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf.d<span class="hljs-operator">/</span>mysql<span class="hljs-operator">-</span>server.cnf<br>[mysqld]<br>server<span class="hljs-operator">-</span>id<span class="hljs-operator">=</span><span class="hljs-number">18</span><br>rpl_semi_sync_slave_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span> #修改此行,需要先安装semisync_slave.so插件后,再重启,否则无法启动<br><br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> PLUGINS; #查看插件<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br><br></code></pre></td></tr></table></figure><h2 id="1-5-复制过滤器"><a href="#1-5-复制过滤器" class="headerlink" title="1.5 复制过滤器"></a>1.5 复制过滤器</h2><p>第一种：更改主服务器配置</p><p>会禁用二进制，不建议使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">binlog<span class="hljs-operator">-</span>do<span class="hljs-operator">-</span>db<span class="hljs-operator">=</span>db1 #数据库白名单列表，不支持同时指定多个值，如果想实现多个数据库需多行实现<br>binlog<span class="hljs-operator">-</span>ignore<span class="hljs-operator">-</span>db<span class="hljs-operator">=</span> #数据库黑名单列表<br></code></pre></td></tr></table></figure><p>第二种：更改从节点配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">replicate_ignore_db<span class="hljs-operator">=</span> #指定复制库黑名单<br>replicate_do_table<span class="hljs-operator">=</span> #指定复制表的白名单<br>replicate_ignore_table<span class="hljs-operator">=</span> #指定复制表的黑名单<br>replicate_wild_do_table<span class="hljs-operator">=</span> foo<span class="hljs-operator">%</span>.bar<span class="hljs-operator">%</span>  #支持通配符<br></code></pre></td></tr></table></figure><h2 id="1-6-GTID复制"><a href="#1-6-GTID复制" class="headerlink" title="1.6 GTID复制"></a>1.6 GTID复制</h2><p>默认mysql主从复制-复制线程不支持并发</p><p>开启GTID功能可以支持多DUMP线程的并发复制</p><p>5.7以后：</p><p>GTID = server_uuid:transaction_id，在一组复制中，全局唯一</p><p>server_uuid 来源于 /var/lib/mysql/auto.cnf </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">stop slave;<br>reset slave;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 主节点和从节点<br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>gtid_mode<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span><br>enforce_gtid_consistency<br><br># 从节点<br>CHANGE MASTER <span class="hljs-keyword">TO</span> MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.100&#x27;</span>,<br> MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;repluser&#x27;</span>,<br> MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;magedu&#x27;</span>,<br> MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br> MASTER_AUTO_POSITION<span class="hljs-operator">=</span><span class="hljs-number">1</span>;  #使用GTID<br></code></pre></td></tr></table></figure><h2 id="1-7-复制的监控和维护"><a href="#1-7-复制的监控和维护" class="headerlink" title="1.7 复制的监控和维护"></a>1.7 复制的监控和维护</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="1-8-MySQL中间代理服务器"><a href="#1-8-MySQL中间代理服务器" class="headerlink" title="1.8 MySQL中间代理服务器"></a>1.8 MySQL中间代理服务器</h2><p>数据库切分方式：垂直切分、水平切分</p><p><strong>Mycat</strong> 可以看做是抽象的数据库。</p><ul><li>Keepalived+Mycat+Mysql</li><li>Keepalived+LVS+Mycat+Mysql</li><li>Keepalived+Haproxy+Mycat+Mysq</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Rocky8 ~]# yum -y install java<br><span class="hljs-meta prompt_">#</span><span class="language-bash">确认安装成功</span><br>[root@Rocky8 ~]# java -version<br>openjdk version &quot;1.8.0_201&quot;<br>OpenJDK Runtime Environment (build 1.8.0_201-b09)<br>OpenJDK 64-Bit Server VM (build 25.201-b09, mixed mode)<br><br>[root@Rocky8 ~]# wget http://dl.mycat.org.cn/1.6.7.4/Mycat-server-1.6.7.4-release/Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz<br>[root@Rocky8 ~]# mkdir /apps<br>[root@Rocky8 ~]# tar xvf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz  -C /apps<br>[root@Rocky8 ~]# ls /apps/mycat/<br>bin catlet conf lib logs version.txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置环境变量</span><br>[root@Rocky8 ~]# vim /etc/profile.d/mycat.sh<br>PATH=/apps/mycat/bin:$PATH<br>[root@Rocky8 ~]# source /etc/profile.d/mycat.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动</span><br>[root@Rocky8 ~]# mycat start<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看日志，确定成功</span><br>[root@Rocky8 ~]# cat /app/mycat/logs/wrapper.log <br>...省略...<br>INFO   | jvm 1   | 2019/11/01 21:41:02 | MyCAT Server startup successfully. see <br>logs in logs/mycat.log<br><span class="hljs-meta prompt_">#</span><span class="language-bash">连接mycat：</span><br>[root@Rocky8 ~]# mysql -uroot -p123456 -h 127.0.0.1 -P8066<br></code></pre></td></tr></table></figure><h2 id="1-6-MySQL高可用"><a href="#1-6-MySQL高可用" class="headerlink" title="1.6 MySQL高可用"></a>1.6 MySQL高可用</h2><p><strong>MHA</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><strong>Galera Cluster</strong></p><p>多主特性</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><strong>TiDB</strong></p><p>分布式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="2-压力测试"><a href="#2-压力测试" class="headerlink" title="2 压力测试"></a>2 压力测试</h1><h2 id="2-1-mysqlslap"><a href="#2-1-mysqlslap" class="headerlink" title="2.1 mysqlslap"></a>2.1 <strong>mysqlslap</strong></h2><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-MySQL-进阶</title>
    <link href="/2024/02/04/Linux-MySQL-%E8%BF%9B%E9%98%B6/"/>
    <url>/2024/02/04/Linux-MySQL-%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MySQL-架构和性能优化"><a href="#1-MySQL-架构和性能优化" class="headerlink" title="1 MySQL 架构和性能优化"></a>1 MySQL 架构和性能优化</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202402040936270.png"></p><p>MySQL是C/S 架构的，connectors是连接器；可供Native C API、JDBC、ODBC、NET、PHP、Perl、Python、Ruby、Cobol等连接mysql。</p><p><a href="https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/storage-engines.html">https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/storage-engines.html</a></p><p><a href="https://docs.oracle.com/cd/E17952_01/mysql-5.7-en/storage-engines.html">https://docs.oracle.com/cd/E17952_01/mysql-5.7-en/storage-engines.html</a></p><h2 id="1-1-存储引擎"><a href="#1-1-存储引擎" class="headerlink" title="1.1 存储引擎"></a>1.1 存储引擎</h2><p><strong>InnoDB</strong>   <strong>MyISAM</strong>  Memorry  Archive  NDB ……</p><h3 id="1-1-1-InnoDB与MyISAM的区别"><a href="#1-1-1-InnoDB与MyISAM的区别" class="headerlink" title="1.1.1 InnoDB与MyISAM的区别"></a>1.1.1 InnoDB<strong>与</strong>MyISAM的区别</h3><table><thead><tr><th align="center"><strong>引擎</strong></th><th align="center">MyISAM</th><th align="center">InnoDB</th></tr></thead><tbody><tr><td align="center"><strong>特点</strong></td><td align="center">不支持事务</td><td align="center">支持事务，适合处理大量短期事务</td></tr><tr><td align="center"></td><td align="center">表级锁定</td><td align="center">行级锁</td></tr><tr><td align="center"></td><td align="center">读写相互阻塞，写入不能读，读时不能写</td><td align="center">读写阻塞与事务隔离级别相关</td></tr><tr><td align="center"></td><td align="center">只缓存索引</td><td align="center">可缓存数据和索引</td></tr><tr><td align="center"></td><td align="center">不支持外键约束</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">不支持聚簇索引</td><td align="center">支持聚簇索引</td></tr><tr><td align="center"></td><td align="center">读取数据较快，占用资源较少</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">不支持MVCC（多版本并发控制机制）高并发</td><td align="center">支持MVCC高并发</td></tr><tr><td align="center"></td><td align="center">崩溃恢复性较差</td><td align="center">崩溃恢复性更好</td></tr><tr><td align="center"></td><td align="center">MySQL5.5.5 前默认的数据库引擎</td><td align="center">从MySQL5.5.5开始为默认的数据库引擎</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">从MySQL5.5后支持全文索引</td></tr></tbody></table><p>MyISAM 存储引擎适合用于<strong>只读（或者写较少）、表较小（可以接受长时间进行修复操作）</strong>的场景。</p><p>MyISAM引擎文件：tbl_name.frm 表格式定义、tbl_name.MYD 数据文件、tbl_name.MYI 索引文件。</p><p><strong>InnoDB</strong>数据库文件：</p><ul><li>所有InnoDB表的数据和索引放置于同一个表空间中</li><li>每个表单独使用一个表空间存储表的数据和索引</li><li>启用：innodb_file_per_table=ON (MariaDB 5.5以后版是默认值)</li></ul><h2 id="1-1-2-基本管理"><a href="#1-1-2-基本管理" class="headerlink" title="1.1.2 基本管理"></a>1.1.2 基本管理</h2><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> engines;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%storage_engine%&#x27;</span>;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status <span class="hljs-keyword">from</span> db_name;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status <span class="hljs-keyword">like</span>  <span class="hljs-string">&#x27;tb_name&#x27;</span>;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_name;<br><br>#设置默认的存储引擎<br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysql]<br>default_storage_engine<span class="hljs-operator">=</span>InnoDB<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_name engine<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_name engine<span class="hljs-operator">=</span>InnoDB;<br></code></pre></td></tr></table></figure><h2 id="1-2-系统数据库"><a href="#1-2-系统数据库" class="headerlink" title="1.2 系统数据库"></a>1.2 系统数据库</h2><ul><li><strong>mysql</strong></li></ul><p>存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。</p><ul><li><strong>information_schema</strong> <strong>数据库</strong></li></ul><p>MySQL 5.0之后产生的，一个虚拟数据库。提供访问数据库元数据的方式，即数据的数据。比如数据库名或表名，列类型，访问权限（更加细化的访问方式）。</p><ul><li><strong>performance_schema</strong> <strong>数据库</strong></li></ul><p>MySQL 5.5开始新增的数据库，主要用于收集数据库服务器性能参数,库里表的存储引擎均为performance_schema，用户不能创建存储引擎为performance_schema的表</p><ul><li><strong>sys</strong> <strong>数据库</strong></li></ul><p>MySQL5.7之后新增加的数据库，performance_schema库的简化版。</p><h2 id="1-3-服务器配置和状态"><a href="#1-3-服务器配置和状态" class="headerlink" title="1.3 服务器配置和状态"></a>1.3 服务器配置和状态</h2><p>可以通过mysqld选项，服务器系统变量和服务器状态变量进行MySQL的配置和查看状态。</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/server-option-variable-reference.html">https://dev.mysql.com/doc/refman/8.0/en/server-option-variable-reference.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-option-variable-reference.html">https://dev.mysql.com/doc/refman/5.7/en/server-option-variable-reference.html</a></p><p><a href="https://mariadb.com/kb/en/library/full-list-of-mariadb-options-system-and-status-variables/">https://mariadb.com/kb/en/library/full-list-of-mariadb-options-system-and-status-variables/</a></p><h3 id="1-3-1-服务器选项"><a href="#1-3-1-服务器选项" class="headerlink" title="1.3.1 服务器选项"></a>1.3.1 服务器选项</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# ps aux<br>mysql   <span class="hljs-number">1089</span>  <span class="hljs-number">0.2</span> <span class="hljs-number">23.6</span> <span class="hljs-number">1788232</span> <span class="hljs-number">433280</span> ?  Ssl  <span class="hljs-number">14</span>:<span class="hljs-number">17</span>   <span class="hljs-number">0</span>:<span class="hljs-number">09</span> <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>libexec<span class="hljs-operator">/</span>mysqld <span class="hljs-comment">--basedir=/usr</span><br><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>libexec<span class="hljs-operator">/</span>mysqld <span class="hljs-operator">-</span>verbose <span class="hljs-comment">--help</span><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# mysqld <span class="hljs-comment">--verbose --help</span><br><br>#获取mysqld当前启动选项<br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# mysqld <span class="hljs-comment">--print-defaults</span><br></code></pre></td></tr></table></figure><p>设置服务器选项方法：</p><ul><li>在命令行中设置</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>libexec<span class="hljs-operator">/</span>mysqld <span class="hljs-comment">--basedir=/usr</span><br></code></pre></td></tr></table></figure><ul><li>在配置文件my.cnf中设置</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>skip_name_resolve<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">skip</span><span class="hljs-operator">-</span><span class="hljs-keyword">grant</span><span class="hljs-operator">-</span>tables<br></code></pre></td></tr></table></figure><h3 id="1-3-2-服务器系统变量"><a href="#1-3-2-服务器系统变量" class="headerlink" title="1.3.2 服务器系统变量"></a>1.3.2 服务器系统变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;version_compile_machine&#x27;</span>;<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>_compile_machine;<br><br>#查看选项和部分变量<br>[root<span class="hljs-variable">@centos8</span> <span class="hljs-operator">~</span>]#mysqladmin variables<br><br>#修改全局变量<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> system_var_name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>;<br>#修改会话变量<br><span class="hljs-keyword">set</span> system_var_name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>;<br></code></pre></td></tr></table></figure><h3 id="1-3-3-服务器状态变量"><a href="#1-3-3-服务器状态变量" class="headerlink" title="1.3.3 服务器状态变量"></a>1.3.3 服务器状态变量</h3><p>状态变量（只读）：用于保存mysqld运行中的统计数据的变量，不可更改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> status;<br><span class="hljs-keyword">show</span> status;<br><br><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> &quot;innodb_page_size&quot;;<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@innodb</span>_page_size;<br></code></pre></td></tr></table></figure><h3 id="1-3-4-服务器变量SQL-MODE"><a href="#1-3-4-服务器变量SQL-MODE" class="headerlink" title="1.3.4 服务器变量SQL_MODE"></a>1.3.4 服务器变量SQL_MODE</h3><p><a href="https://mariadb.com/kb/en/library/sql-mode/">https://mariadb.com/kb/en/library/sql-mode/</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_sql-mode">https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_sql-mode</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@sql</span>_mode;<br></code></pre></td></tr></table></figure><ul><li>NO_AUTO_CREATE_USER： 禁止GRANT创建密码为空的用户</li><li>NO_ZERO_DATE：在严格模式，不允许使用’0000-00-00’的时</li><li>ONLY_FULL_GROUP_BY： 对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么将认为这个SQL是不合法的</li><li>NO_BACKSLASH_ESCAPES： 反斜杠”&quot;作为普通字符而非转义字符</li><li>PIPES_AS_CONCAT： 将”||”视为连接操作符而非”或”运算符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># CentOS8<br><span class="hljs-keyword">set</span> sql_mode<span class="hljs-operator">=</span>&quot;only_full_group_by&quot;;<br># CentOS7<br><span class="hljs-keyword">set</span> sql_mode<span class="hljs-operator">=</span>traditional<br></code></pre></td></tr></table></figure><h2 id="1-4-INDEX-索引"><a href="#1-4-INDEX-索引" class="headerlink" title="1.4 INDEX 索引"></a>1.4 INDEX 索引</h2><p><strong>优点：</strong></p><ul><li>索引可以降低服务需要扫描的数据量，减少了IO次数</li><li>索引可以帮助服务器避免排序和使用临时表</li><li>索引可以帮助将随机I/O转为顺序 I/O</li></ul><p><strong>缺点：</strong></p><ul><li>占用额外空间，影响插入速度</li></ul><h3 id="1-4-1-索引结构"><a href="#1-4-1-索引结构" class="headerlink" title="1.4.1 索引结构"></a>1.4.1 索引结构</h3><p> <a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p><ul><li><strong>二叉树</strong>   <a href="https://www.cs.usfca.edu/~galles/visualization/BST.html">https://www.cs.usfca.edu/~galles/visualization/BST.html</a></li><li>**红黑树 **  <a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</a></li><li><strong>B树</strong>        <a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></li><li><strong>B+树</strong>      <a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></li></ul><p><strong>面试题: InnoDB中一颗的B+树可以存放多少行数据？</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http">假设定义一颗B+树高度为2，即一个根节点和若干叶子节点。<br>那么这棵B+树的存放总行记录数=根节点指针数*单个叶子记录的行数。<br>这里先计算叶子节点，B+树中的单个叶子节点的大小为16K，假设每一条目为1K，那么记录数即为16(16k/1K=16)。<br>然后计算非叶子节点能够存放多少个指针，假设主键ID为bigint类型，那么长度为8字节，而指针大小在InnoDB中是设置为6个字节，这样加起来一共是14个字节。<br>那么通过页大小/(主键ID大小+指针大小），即16384/14=1170个指针，所以一颗高度为2的B+树能存放16*1170=18720条这样的记录。<br>根据这个原理就可以算出一颗高度为3的B+树可以存放16*1170*1170=21902400条记录。<br>所以在InnoDB中B+树高度一般为2-3层，它就能满足千万级的数据存储<br></code></pre></td></tr></table></figure><ul><li><strong>Hash</strong>     </li><li><strong>地理空间数据索引</strong>R-Tree（Geospatial indexing）</li><li><strong>全文索引</strong>(FULLTEXT)</li><li><strong>聚簇(innodb)和非聚簇(MyISAM)索引，主键和二级索引</strong></li></ul><h3 id="1-4-2-索引优化"><a href="#1-4-2-索引优化" class="headerlink" title="1.4.2 索引优化"></a>1.4.2 索引优化</h3><p><a href="https://developer.aliyun.com/topic/java2020">https://developer.aliyun.com/topic/java2020</a></p><h3 id="1-4-3-索引管理"><a href="#1-4-3-索引管理" class="headerlink" title="1.4.3 索引管理"></a>1.4.3 索引管理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"># index 具有左前缀特性<br><span class="hljs-keyword">desc</span> students;<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> students\G<br><br><span class="hljs-keyword">create</span> index index_name <span class="hljs-keyword">on</span> students(name);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> students(name) <span class="hljs-keyword">add</span> index index_name;<br><br><span class="hljs-keyword">drop</span> index index_name <span class="hljs-keyword">on</span> students(name);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> students(name) <span class="hljs-keyword">drop</span> index_name;<br></code></pre></td></tr></table></figure><h3 id="1-4-4-EXPLAIN-工具"><a href="#1-4-4-EXPLAIN-工具" class="headerlink" title="1.4.4  EXPLAIN 工具"></a>1.4.4  <strong>EXPLAIN</strong> <strong>工具</strong></h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Jin&#x27;</span>;<br><br>type: 关联类型或访问类型，即MySQL决定的如何去查询表中的行的方式<br>possible_keys: 查询可能会用到的索引<br>key: 显示mysql决定采用哪个索引来优化查询<br></code></pre></td></tr></table></figure><h3 id="1-4-5-profile工具"><a href="#1-4-5-profile工具" class="headerlink" title="1.4.5 profile工具"></a>1.4.5 profile工具</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@profiling</span>;<br><span class="hljs-keyword">set</span> profiling<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">show</span> profiles;<br>#显示语句的详细执行步骤和时长<br><span class="hljs-keyword">Show</span> profile <span class="hljs-keyword">for</span> query # <br>#显示cpu使用情况<br><span class="hljs-keyword">Show</span> profile cpu <span class="hljs-keyword">for</span> query #<br></code></pre></td></tr></table></figure><h2 id="1-5-并发控制"><a href="#1-5-并发控制" class="headerlink" title="1.5 并发控制"></a>1.5 并发控制</h2><h3 id="1-5-1-锁机制"><a href="#1-5-1-锁机制" class="headerlink" title="1.5.1 锁机制"></a>1.5.1 锁机制</h3><ul><li><p>```http<br>  读锁：共享锁、S锁，多个读互不阻塞<br>  写锁：排它锁、X锁，会阻塞其它事</p>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```http<br>表级锁：MyISAM<br>行级锁：InnoDB<br></code></pre></td></tr></table></figure></li><li><p>```http<br>  存储引擎：自行实现其锁策略和锁粒度<br>  服务器级：实现了锁，表级锁，用户可显式请求</p>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```http<br>隐式锁：由存储引擎自动施加锁<br>显式锁：用户手动请求<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-5-2-显示使用锁"><a href="#1-5-2-显示使用锁" class="headerlink" title="1.5.2 显示使用锁"></a>1.5.2 显示使用锁</h3><p><a href="https://mariadb.com/kb/en/lock-tables/">https://mariadb.com/kb/en/lock-tables/</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">lock tables students read;<br>lock tables teachers write;<br>#通常在备份前加全局读锁<br>flush <span class="hljs-keyword">table</span> <span class="hljs-keyword">with</span> read lock;<br><br>unlock tables;<br></code></pre></td></tr></table></figure><h3 id="1-5-3-事务"><a href="#1-5-3-事务" class="headerlink" title="1.5.3 事务"></a>1.5.3 事务</h3><p><strong>ACID特性：</strong></p><ul><li>A：atomicity 原子性：整个事务中的所有操作要么<strong>全部成功执行</strong>，要么<strong>全部失败后回滚</strong>。</li><li>C：consistency一致性：数据库总是从一个一致性状态转换为另一个一致性状态,类似于能量守恒定律。</li><li>I：Isolation隔离性：一个事务所做出的操作在提交之前，是不能为其它事务所见；隔离有多种隔离级别，实现并发。</li><li>D：durability持久性：一旦事务提交，其所做的修改会永久保存于数据库中。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 显式启动事务<br><span class="hljs-keyword">begin</span>;<br><span class="hljs-keyword">begin</span> work;<br><span class="hljs-keyword">start</span> transaction;<br># 结束事务<br><span class="hljs-keyword">commit</span>;<br><span class="hljs-keyword">rollback</span>;     <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 只有事务型存储引擎中的DML语句方能支持此类操作<br><br># 自动提交<br><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span>&#123;<span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">0</span>&#125;;<br><br># 支持保存点<br><span class="hljs-keyword">savepoint</span> A;<br><span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> A;<br><span class="hljs-keyword">release</span> <span class="hljs-keyword">savepoint</span> A;<br><br>#查看当前事务<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.innodb_trx\G<br><span class="hljs-keyword">show</span> processlist;<br>kill 进程编号；<br></code></pre></td></tr></table></figure><p><strong>死锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.innodb_trx\G<br><span class="hljs-keyword">show</span> processlist;<br>kill 进程编号；<br><br>#查看事务锁的超时时长<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_lock_wait_timeout&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>事务的隔离级别</strong></p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复度</th><th>幻读</th><th>加锁读</th></tr></thead><tbody><tr><td>读未提交</td><td>可以出现</td><td>可以出现</td><td>可以出现</td><td>否</td></tr><tr><td>读提交</td><td>不允许出现</td><td>可以出现</td><td>可以出现</td><td>否</td></tr><tr><td>可重复读</td><td>不允许出现</td><td>不允许出现</td><td>可以出现</td><td>否</td></tr><tr><td>串行化</td><td>不允许出现</td><td>不允许出现</td><td>不允许出现</td><td>是</td></tr></tbody></table><p>MySQL默认使用“可重复读”的事务隔离级别。串行化的隔离级别<strong>并发性差</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">#MySQL8<span class="hljs-number">.0</span>之前版本<br><span class="hljs-keyword">set</span> tx_isolation<span class="hljs-operator">=</span><span class="hljs-string">&#x27;read-uncommitted|read-committed|repeatable-read|serialzable&#x27;</span><br>#MySQL8<span class="hljs-number">.0</span><br><span class="hljs-keyword">set</span> transaction_isolation<span class="hljs-operator">=</span><span class="hljs-string">&#x27;read-uncommitted|read-committed|repeatable-read|serialzable&#x27;</span><br><br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>transaction<span class="hljs-operator">-</span>isolation<span class="hljs-operator">=</span>serialzable<br><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@transaction</span>_isolation<br></code></pre></td></tr></table></figure><h2 id="1-6-日志管理"><a href="#1-6-日志管理" class="headerlink" title="1.6 日志管理"></a>1.6 日志管理</h2><ul><li>事务日志：transaction log</li></ul><p>​    事务日志的写入类型为”追加”，因此其操作为”顺序IO”；通常也被称为：预写式日志 write ahead logging</p><p>​    事务日志文件： ib_logfile0， ib_logfile1</p><ul><li><p>错误日志error log</p></li><li><p>通用日志general log</p></li><li><p>慢查询日志 slow query log</p></li><li><p>二进制日志 binary log</p></li><li><p>中继日志reley log，在主从复制架构中，从服务器用于保存从主服务器的二进制日志中读取的事件</p></li></ul><h3 id="1-6-1-事务日志"><a href="#1-6-1-事务日志" class="headerlink" title="1.6.1 事务日志"></a>1.6.1 事务日志</h3><ul><li><p>redo log：记录某数据块被修改后的值，数据更新前先记录redo log( WALWrite Ahead Log ),可以</p><p>  用来恢复未写入data file的已成功事务更新的数据</p></li><li><p>undo log：保存与执行的操作相反的操作,即记录某数据被修改前的值，可以用来在事务失败时进</p><p>  行rollback</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%innodb_log%&#x27;</span>;<br><br># 事务日志性能优化<br>innodb_flush_log_at_trx_commit<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-operator">|</span><span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">2</span><br><span class="hljs-number">1</span> 此为默认值，日志缓冲区将写入日志文件，并在每次事务后执行刷新到磁盘。 这是完全遵守ACID特性<br><br><span class="hljs-number">0</span> 提交时没有写磁盘的操作; 而是每秒执行一次将日志缓冲区的提交的事务写入刷新到磁盘。 这样可提供更<br>好的性能，但服务器崩溃可能丢失最后一秒的事务<br><span class="hljs-number">2</span> 每次提交后都会写入OS的缓冲区，但每秒才会进行一次刷新到磁盘文件中。 性能比<span class="hljs-number">0</span>略差一些，但操作系<br>统或停电可能导致最后一秒的交易丢失<br><br># 高并发业务行业最佳实践，是使用第三种折衷配置（<span class="hljs-operator">=</span><span class="hljs-number">2</span>）：<br><span class="hljs-number">1.</span>配置为<span class="hljs-number">2</span>和配置为<span class="hljs-number">0</span>，性能差异并不大，因为将数据从Log Buffer拷贝到OS cache，虽然跨越用户态与内<br>核态，但毕竟只是内存的数据拷贝，速度很快<br><span class="hljs-number">2.</span>配置为<span class="hljs-number">2</span>和配置为<span class="hljs-number">0</span>，安全性差异巨大，操作系统崩溃的概率相比MySQL应用程序崩溃的概率，小很多，设置<br>为<span class="hljs-number">2</span>，只要操作系统不奔溃，也绝对不会丢数据<br></code></pre></td></tr></table></figure><h3 id="1-6-2-错误日志"><a href="#1-6-2-错误日志" class="headerlink" title="1.6.2 错误日志"></a>1.6.2 错误日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@log</span>_error;<br><br># 记录哪些警告信息至错误日志文件<br>#CentOS7 mariadb <span class="hljs-number">5.5</span> 默认值为<span class="hljs-number">1</span><br>#CentOS8 mariadb <span class="hljs-number">10.3</span> 默认值为<span class="hljs-number">2</span><br>log_warnings<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-operator">|</span><span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">2</span><span class="hljs-operator">|</span><span class="hljs-number">3.</span>..         #MySQL5<span class="hljs-number">.7</span>之前<br>log_error_verbosity<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-operator">|</span><span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">2</span><span class="hljs-operator">|</span><span class="hljs-number">3.</span>..   #MySQL8<span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><h3 id="1-6-3-通用日志"><a href="#1-6-3-通用日志" class="headerlink" title="1.6.3 通用日志"></a>1.6.3 通用日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 通用日志服务<br>general_log<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span><span class="hljs-operator">|</span>OFF<br># 通用日志存放的文件路径<br>general_log_file<span class="hljs-operator">=</span>HOSTNAME.log<br># 默认通用日志存放在哪里<br>log_output<span class="hljs-operator">=</span><span class="hljs-keyword">TABLE</span><span class="hljs-operator">|</span>FILE<span class="hljs-operator">|</span><span class="hljs-keyword">NONE</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@general</span>_log;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;log_output&#x27;</span>;<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@general</span>_log_file;<br><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# ll <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql <span class="hljs-operator">-</span>t<br><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# tail <span class="hljs-operator">-</span>f <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>[].log<br></code></pre></td></tr></table></figure><h3 id="1-6-4-慢查询日志"><a href="#1-6-4-慢查询日志" class="headerlink" title="1.6.4 慢查询日志"></a>1.6.4 慢查询日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">slow_query_log<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span><span class="hljs-operator">|</span>OFF   #开启或关闭慢查询，支持全局和会话，只有全局设置才会生成慢查询文件<br>long_query_time<span class="hljs-operator">=</span>N #慢查询的阀值，单位秒,默认为<span class="hljs-number">10</span>s<br>slow_query_log_file<span class="hljs-operator">=</span>HOSTNAME<span class="hljs-operator">-</span>slow.log  #慢查询日志文件<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">log_queries_not_using_indexes<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>  #不使用索引或使用全索引扫描，不论是否达到慢查询阀值的语句是否记录日志，默认OFF，即不记录<br>log_slow_rate_limit <span class="hljs-operator">=</span> <span class="hljs-number">1</span> #多少次查询才记录，mariadb特有<br>log_slow_verbosity<span class="hljs-operator">=</span> Query_plan,explain #记录内容<br>log_slow_queries <span class="hljs-operator">=</span> OFF    #同slow_query_log，MariaDB <span class="hljs-number">10.0</span><span class="hljs-operator">/</span>MySQL <span class="hljs-number">5.6</span><span class="hljs-number">.1</span> 版后已删除<br></code></pre></td></tr></table></figure><p> 慢查询分析工具mysqldumpslow</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@centos8</span> <span class="hljs-operator">~</span>]#mysqldumpslow <span class="hljs-operator">-</span>s c <span class="hljs-operator">-</span>t <span class="hljs-number">2</span> <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>centos8<span class="hljs-operator">-</span>slow.log<br>Reading mysql slow query log <span class="hljs-keyword">from</span> <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>centos8<span class="hljs-operator">-</span>slow.log<br>Count: <span class="hljs-number">1</span>  <span class="hljs-type">Time</span><span class="hljs-operator">=</span><span class="hljs-number">0.00</span>s (<span class="hljs-number">0</span>s)  Lock<span class="hljs-operator">=</span><span class="hljs-number">0.00</span>s (<span class="hljs-number">0</span>s)  Rows_sent<span class="hljs-operator">=</span><span class="hljs-number">2.0</span> (<span class="hljs-number">2</span>), <br>Rows_examined<span class="hljs-operator">=</span><span class="hljs-number">25.0</span> (<span class="hljs-number">25</span>), Rows_affected<span class="hljs-operator">=</span><span class="hljs-number">0.0</span> (<span class="hljs-number">0</span>), root[root]<span class="hljs-variable">@localhost</span><br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span>N<br>Count: <span class="hljs-number">1</span>  <span class="hljs-type">Time</span><span class="hljs-operator">=</span><span class="hljs-number">4.00</span>s (<span class="hljs-number">4</span>s)  Lock<span class="hljs-operator">=</span><span class="hljs-number">0.00</span>s (<span class="hljs-number">0</span>s)  Rows_sent<span class="hljs-operator">=</span><span class="hljs-number">4.0</span> (<span class="hljs-number">4</span>), Rows_examined<span class="hljs-operator">=</span><span class="hljs-number">4.0</span> <br>(<span class="hljs-number">4</span>), Rows_affected<span class="hljs-operator">=</span><span class="hljs-number">0.0</span> (<span class="hljs-number">0</span>), root[root]<span class="hljs-variable">@localhost</span><br> <span class="hljs-keyword">select</span> sleep(N) <span class="hljs-keyword">from</span> teachers<br></code></pre></td></tr></table></figure><h3 id="1-6-5-二进制日志（备份）"><a href="#1-6-5-二进制日志（备份）" class="headerlink" title="1.6.5 二进制日志（备份）"></a>1.6.5 二进制日志（备份）</h3><ul><li>基于”语句”记录：statement，记录语句，默认模式（ MariaDB 10.2.3 版本以下 ），日志量较少</li><li>基于”行”记录：row，记录数据，日志量较大，更加安全，建议使用的格式,MySQL8.0默认格式</li><li>混合模式：mixed, 让系统自行判定该基于哪种方式进行，默认模式（ MariaDB 10.2.4及版本以上）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;binlog_format&#x27;</span>;<br><span class="hljs-keyword">show</span> master logs;<br><span class="hljs-keyword">show</span> master status;<br></code></pre></td></tr></table></figure><p><strong>二进制日志文件构成</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">1.日志文件：mysql|mariadb-bin.文件名后缀，二进制格式,如： on.000001,mariadb-bin.000002<br>2.索引文件：mysql|mariadb-bin.index，文本格式,记录当前已有的二进制日志文件列表<br></code></pre></td></tr></table></figure><p><strong>服务器变量</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 是否记录二进制日志，默认<span class="hljs-keyword">ON</span>，支持动态修改，系统变量，而非服务器选项<br>sql_log_bin<span class="hljs-operator">=</span><span class="hljs-keyword">on</span><span class="hljs-operator">|</span>off <br><br># 指定文件位置；默认OFF，表示不启用二进制日志功能，上述两项都开启才可以<br>log_bin<span class="hljs-operator">=</span><span class="hljs-operator">/</span>PATH<span class="hljs-operator">/</span>BIN_LOG_FILE<br><br>max_binlog_size<span class="hljs-operator">=</span><span class="hljs-number">1073741824</span>：# 单个二进制日志文件的最大体积，到达最大值会自动滚动，默认为<span class="hljs-number">1</span>G<br>#说明：文件达到上限时的大小未必为指定的精确值<br><br>binlog_format<span class="hljs-operator">=</span>statement<span class="hljs-operator">|</span><span class="hljs-type">row</span><span class="hljs-operator">|</span>mixed：# 二进制日志记录的格式，mariadb5<span class="hljs-number">.5</span>默认statement<br><br>binlog_cache_size<span class="hljs-operator">=</span><span class="hljs-number">4</span>m # 此变量确定在每次事务中保存二进制日志更改记录的缓存的大小（每次连接）<br><br>max_binlog_cache_size<span class="hljs-operator">=</span><span class="hljs-number">512</span>m # 限制用于缓存多事务查询的字节大小。<br><br>sync_binlog<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">0</span>：# 设定是否启动二进制日志即时同步磁盘功能，默认<span class="hljs-number">0</span>，由操作系统负责同步日志到磁盘<br><br>expire_logs_days<span class="hljs-operator">=</span>N：# 二进制日志可以自动删除的天数。 默认为<span class="hljs-number">0</span>，即不自动删除<br></code></pre></td></tr></table></figure><p><strong>mysqlbinlog</strong>：二进制日志的客户端命令工具，支持离线查看二进制日志</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysqlbinlog <span class="hljs-comment">--start-position=678 --stop-position=752 /var/lib/mysql/mariadb-bin.000003 -v</span><br>mysqlbinlog  <span class="hljs-comment">--start-datetime=&quot;2018-01-30 20:30:10&quot;   --stop-datetime=&quot;2018-01-30 20:35:22&quot; mariadb-bin.000003 -vvv</span><br></code></pre></td></tr></table></figure><p><strong>切换二进制日志文件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@centos8</span> <span class="hljs-operator">~</span>]# mysqladmin   flush<span class="hljs-operator">-</span><span class="hljs-type">binary</span><span class="hljs-operator">-</span>log<br>[root<span class="hljs-variable">@centos8</span> <span class="hljs-operator">~</span>]# mysqladmin   flush<span class="hljs-operator">-</span>logs<br>[root<span class="hljs-variable">@centos8</span> <span class="hljs-operator">~</span>]# mysql<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> flush logs;<br></code></pre></td></tr></table></figure><p><strong>删除二进制</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">purge <span class="hljs-type">binary</span> logs <span class="hljs-keyword">To</span> <span class="hljs-string">&#x27;mariadb-bin.000003&#x27;</span>;<br>purge <span class="hljs-type">binary</span> logs before <span class="hljs-string">&#x27;2017-03-22 [09:25:30]&#x27;</span>; <br># 重置<br>reset master [<span class="hljs-keyword">To</span> #]<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">从10.0.0.8远程主机实时同步从指定的二进制日志binlog.000002开始向后进行同步到当前目录</span><br>create user test@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;;<br>grant replication slave on *.* to test@&#x27;10.0.0.%&#x27;;<br><br>[root@centos8 data]# yum -y install mysql;<br>[root@centos8 data]# mysqlbinlog -R --host=10.0.0.8 --user=test --password=123456 --raw --stop-never binlog.000002<br></code></pre></td></tr></table></figure><p><strong>事务日志和二进制区别</strong></p><ul><li>事务日志在线,二进制离线</li><li>事务日志记录事务执行的过程,包括提交和未提交,二进制日志记录只记提交的过程</li><li>事务日志只支持innodb,二进制都支持MyiSAM和innoDB</li></ul><p>功能：通过”重放”日志文件中的事件来生成数据副本</p><p>注意：建议二进制日志和数据文件分开存放</p><h1 id="2-MySQL备份和恢复"><a href="#2-MySQL备份和恢复" class="headerlink" title="2 MySQL备份和恢复"></a>2 MySQL备份和恢复</h1><ul><li><p>完全备份、部分备份</p></li><li><p>完全备份、增量备份（相对于前一次备份）、差异备份（相对于完全备份）</p></li><li><p>冷备份、温备份、热备份（MyISAM不支持）</p></li><li><p>物理备份、逻辑备份</p></li></ul><p><strong>备份内容</strong></p><ul><li>数据</li><li>二进制日志、InnoDB事务日志</li><li>服务器配置文件</li><li>用户账号，权限设置、程序代码</li></ul><h2 id="2-1-数据库冷备份和还原"><a href="#2-1-数据库冷备份和还原" class="headerlink" title="2.1 数据库冷备份和还原"></a>2.1 数据库冷备份和还原</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Rocky8 ~]# systemctl stop mysqld<br><br>// 第一种<br>[root@Rocky8 ~]# cp -a /var/lib/mysql /data/<br>[root@Rocky8 ~]# ll /data/<br>total 4<br>drwxr-xr-x 8 mysql mysql 4096 Feb  7 16:10 mysql<br>[root@Rocky8 ~]# scp -r /data 10.1.16.129:/data/<br>root@10.1.16.129&#x27;s password: <br><br>[root@Rocky8 ~]# ls /data<br>mysql<br>[root@Rocky8 ~]# cp -a /data/mysql/* /var/lib/mysql/<br>[root@Rocky8 ~]# chown -R mysql.mysql /var/lib/mysql/<br><br>// 第二种<br>[root@centos8 ~]# rsync -a /var/lib/mysql 10.1.16.129:/data/<br>[root@Rocky8 ~]# cp -a /data/mysql/* /var/lib/mysql/<br><br>[root@Rocky8 ~]# systemctl enable --now  mysqld<br></code></pre></td></tr></table></figure><h2 id="2-2-mysqldump-备份工具"><a href="#2-2-mysqldump-备份工具" class="headerlink" title="2.2 mysqldump 备份工具"></a>2.2 mysqldump 备份工具</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">A</span> -D<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-MySQL-基础</title>
    <link href="/2024/01/26/Linux-MySQL-%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/01/26/Linux-MySQL-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数据库原理"><a href="#1-数据库原理" class="headerlink" title="1 数据库原理"></a>1 数据库原理</h1><p><strong>数据分类</strong></p><ul><li>结构化数据：固定格式、有限长度 —- Excel</li><li>非结构化数据：不定长、无固定格式 —- 网页、图片文件</li><li>半结构化数据：— HTML</li></ul><h2 id="1-1-数据库概述"><a href="#1-1-数据库概述" class="headerlink" title="1.1 数据库概述"></a>1.1 数据库概述</h2><p>IT行业核心技术：<strong>数据库</strong>、<strong>芯片</strong>、<strong>操作系统</strong></p><p><strong>文件系统</strong>(磁盘文件)  》 <strong>第一代数据库</strong>(网状/层次)  》<strong>第二代数据库</strong>(关系/结构化查询语言)  》<strong>新一代数据库</strong>(关系-对象)</p><p><strong>Database</strong>数据库     <strong>DBMS</strong>数据库管理软件   <strong>DBA</strong>数据库管理员   <strong>Applicatio</strong>应用程序</p><p>数据库排名：<a href="https://db-engines.com/en/ranking">https://db-engines.com/en/ranking</a></p><h2 id="1-2-关系型数据库-RDBMS"><a href="#1-2-关系型数据库-RDBMS" class="headerlink" title="1.2 关系型数据库 RDBMS"></a><strong>1.2 关系型数据库 RDBMS</strong></h2><ul><li><p>关系Relational — 二维表</p></li><li><p>行row — 一行又称一条记录record</p></li><li><p>列column — 一列又称属性，字段，域field</p></li><li><p>主键Primary key — PK  唯一、确定、不能为NULL</p></li><li><p>唯一键Unique key — 可以为NULL</p></li><li><p>域domain — 属性的取值范围</p></li></ul><p>SQL<strong>结构化查询语言</strong></p><h3 id="1-2-1-实体-关系模型E-R"><a href="#1-2-1-实体-关系模型E-R" class="headerlink" title="1.2.1 实体-关系模型E-R"></a><strong>1.2.1 实体-关系模型E-R</strong></h3><ul><li><p>实体Entity — <strong>矩形</strong></p></li><li><p>属性Attribute — <strong>椭圆形</strong></p></li><li><p>关系Relationship — <strong>菱形</strong></p><ul><li>一对一 (1:1)</li><li>一对多 (1:n)</li><li>多对多 (m:n)</li></ul></li></ul><h3 id="1-2-2-规范"><a href="#1-2-2-规范" class="headerlink" title="1.2.2 规范"></a>1.2.2 规范</h3><p>目前关系数据库有六种范式：第一范式(<strong>1NF</strong>)、第二范式(<strong>2NF</strong>)、第三范式(<strong>3NF</strong>)、巴德斯科范式 (BCNF)、第四范式(4NF)和第五范式(5NF，又称完美范式).</p><p><strong>第一范式</strong>   <strong>1NF</strong></p><p>无重复的列，每一列都是不可分割的基本数据项，同一列中不能有多个值。</p><p><strong>第二范式</strong>   <strong>2NF</strong></p><ul><li><p>满足第一范式</p></li><li><p>属性完全依赖于主键</p></li><li><p>非PK的字段不能依赖于部分主键（与复合主键对比）</p></li></ul><p><strong>第三范式</strong>   <strong>3NF</strong></p><ul><li>满足第二范式</li><li>非主键属性不依赖于其它非主键属性</li><li>非PK的字段间不能有从属关系</li></ul><h1 id="2-MySQL安装和基本使用"><a href="#2-MySQL安装和基本使用" class="headerlink" title="2 MySQL安装和基本使用"></a>2 MySQL安装和基本使用</h1><p><strong>特性</strong></p><ul><li>开源免费</li><li>插件式</li><li>单进程，多线程</li></ul><h2 id="2-1-基本安装方式"><a href="#2-1-基本安装方式" class="headerlink" title="2.1 基本安装方式"></a>2.1 基本安装方式</h2><ul><li>程序包管理器管理的程序包</li><li>源代码编译安装</li><li>二进制格式的程序包：展开至特定路径、并经过简单配置后即可使用</li></ul><h3 id="2-1-1-RPM安装MySQL（测试环境）"><a href="#2-1-1-RPM安装MySQL（测试环境）" class="headerlink" title="2.1.1 RPM安装MySQL（测试环境）"></a>2.1.1 RPM安装MySQL（测试环境）</h3><p>Centos 6</p><ul><li>mysql-server 5.1</li><li>mysql</li></ul><p>Centos 7</p><ul><li>mariadb-server 5.5</li><li>mariadb</li></ul><p>Centos 8</p><ul><li>mysql-server 8.0</li><li>mariadb-server 10.3</li></ul><p>以<strong>Centos 7</strong>利用yum源安装MySQL5.7为例</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">[root@centos7 ~]# tee /etc/yum.repos.d/mysql.repo &lt;&lt;EOF<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">[mysql]</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">name=mysql5.7</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">baseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el7-x86_64/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-8.0-community-el7-x86_64/</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">gpgcheck=0</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">EOF</span><br><br>[root@centos7 ~]# yum -y install mysql-server<br>[root@centos7 ~]# systemctl status mysqld<br>[root@centos7 ~]# systemctl enable --now mysqld<br>[root@centos7 ~]# systemctl status mysqld<br>[root@centos7 ~]# ss -ntl<br>[root@centos7 ~]# pstree -p<br>[root@centos7 ~]# ps<br><br>[root@centos7 ~]# grep password /var/log/mysqld.log    //Centos8默认密码为’‘<br><br>[root@centos7 ~]# mysql -uroot -p&#x27;*dBwwI2lkfm(&#x27;<br><br>[root@centos7 ~]# mysqladmin -uroot -p&#x27;*dBwwI2lkfm(&#x27; password &#x27;Magedu0!&#x27;     //第一种<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">alter user root@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;Magedu0!&#x27;</span>;   //第二种</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br></code></pre></td></tr></table></figure><h3 id="2-1-2-通用二进制格式安装MySQL（生产环境）"><a href="#2-1-2-通用二进制格式安装MySQL（生产环境）" class="headerlink" title="2.1.2 通用二进制格式安装MySQL（生产环境）"></a>2.1.2 通用二进制格式安装MySQL（生产环境）</h3><p>以MySQL 5.7和MySQL 8.0为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装相关包</span><br>[root@Rocky8 ~]# yum -y install libaio numactl-libs ncurses-compat-libs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">用户和组</span><br>[root@Rocky8 ~]# groupadd mysql<br>[root@Rocky8 ~]# useradd -r -g mysql -s /bin/false mysql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备程序文件</span><br>[root@Rocky8 ~]# wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz<br>[root@Rocky8 ~]# tar xf mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz -C /usr/local<br>[root@Rocky8 ~]# cd /usr/local/<br>[root@Rocky8 local]# ln -s mysql-5.7.29-linux-glibc2.12-x86_64/ mysql<br>[root@Rocky8 local]# chown -R root.root /usr/local/mysql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备环境变量</span><br>[root@Rocky8 local]# echo &#x27;PATH=/usr/local/mysql/bin:$PATH&#x27; &gt; /etc/profile.d/mysql.sh<br>[root@Rocky8 local]# . /etc/profile.d/mysql.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备配置文件</span><br>[root@Rocky8 local]# cp /etc/my.cnf&#123;,.bak&#125;<br>[root@Rocky8 local]# vim /etc/my.cnf<br>[mysqld]<br>datadir=/data/mysql<br>skip_name_resolve=1<br>socket=/data/mysql/mysql.sock<br>log-error=/data/mysql/mysql.log<br>pid-file=/data/mysql/mysql.pid<br>[client]<br>socket=/data/mysql/mysql.sock<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化数据库文件并提取root密码</span><br>[root@Rocky8 local]# mkdir -pv /data/mysql<br>//生成随机密码<br>[root@Rocky8 local]# mysqld --initialize --user=mysql --datadir=/data/mysql<br>//生成root空密码<br>[root@Rocky8 local]# mysqld --initialize-insecure --user=mysql --datadir=/data/mysql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备服务脚本和启动</span><br>[root@Rocky8 local]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld<br>[root@Rocky8 local]# chkconfig --add mysqld<br>[root@Rocky8 local]# service mysqld start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改命令</span><br>//修改前面生成的随机密码为指定密码<br><span class="hljs-meta prompt_">[root@Rocky8]# </span><span class="language-bash">mysqladmin -uroot -p<span class="hljs-string">&#x27;前面生成的随机密码&#x27;</span> password jinrunda</span><br>//修改前面生成的空密码为指定密码<br><span class="hljs-meta prompt_">[root@Rocky8]# </span><span class="language-bash">mysqladmin -uroot password jinrunda</span><br></code></pre></td></tr></table></figure><h3 id="2-1-3-源码编译（复杂、耗时长）"><a href="#2-1-3-源码编译（复杂、耗时长）" class="headerlink" title="2.1.3 源码编译（复杂、耗时长）"></a>2.1.3 源码编译（复杂、耗时长）</h3><h3 id="2-1-4-基于-docker-容器创建-MySQL（趋势）"><a href="#2-1-4-基于-docker-容器创建-MySQL（趋势）" class="headerlink" title="2.1.4 基于 docker 容器创建 MySQL（趋势）"></a>2.1.4 基于 docker 容器创建 MySQL（趋势）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@Rocky8]# </span><span class="language-bash">docker run --name mysql -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.26</span><br><span class="hljs-meta prompt_">[root@Rocky8]# </span><span class="language-bash">docker ps</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">[root@Rocky8]#</span><span class="language-bash">36  mysql -uroot -p123456 -h10.1.16.129</span><br></code></pre></td></tr></table></figure><h2 id="2-2-MySQL多实例"><a href="#2-2-MySQL多实例" class="headerlink" title="2.2 MySQL多实例"></a>2.2 MySQL多实例</h2><p>实战案例：<strong>CentOS 8</strong>实现<strong>mariadb</strong>的<strong>yum</strong>安装的多实例</p><ul><li>关闭防火墙、SElinux</li><li>时间同步</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装mariadb</span><br>[root@Rocky8 ~]# yum -y install mariadb-server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备三个实例目录</span><br>[root@Rocky8 ~]# mkdir -pv /mysql/&#123;3306,3307,3308&#125;/&#123;data,etc,socket,log,bin,pid&#125;<br>[root@Rocky8 ~]# chown -R mysql.mysql <br>[root@Rocky8 ~]# tree -d /mysql/<br>/mysql/<br>├── 3306<br>│   ├── bin<br>│   ├── data<br>│   ├── etc<br>│   ├── log<br>│   ├── pid<br>│   └── socket<br>├── 3307<br>│   ├── bin<br>│   ├── data<br>│   ├── etc<br>│   ├── log<br>│   ├── pid<br>│   └── socket<br>└── 3308<br>    ├── bin<br>    ├── data<br>    ├── etc<br>    ├── log<br>    ├── pid<br>    └── socket<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成数据库文件</span><br>[root@Rocky8 ~]# mysql_install_db --user=mysql --datadir=/mysql/3306/data<br>[root@Rocky8 ~]# mysql_install_db --user=mysql --datadir=/mysql/3307/data<br>[root@Rocky8 ~]# mysql_install_db --user=mysql --datadir=/mysql/3308/data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备配置文件</span><br>[root@Rocky8 ~]# vim /mysql/3306/etc/my.cnf<br>[mysqld]<br>port=3306<br>datadir=/mysql/3306/data<br>socket=/mysql/3306/socket/mysql.sock<br>log-error=/mysql/3306/log/mysql.log<br>pid-file=/mysql/3306/pid/mysql.pid<br>[root@Rocky8 ~]# sed &#x27;s/3306/3307/&#x27; /mysql/3306/etc/my.cnf &gt; /mysql/3307/etc/my.cnf <br>[root@Rocky8 ~]# sed &#x27;s/3306/3308/&#x27; /mysql/3306/etc/my.cnf &gt; /mysql/3308/etc/my.cnf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动脚本</span><br>[root@Rocky8 ~]#vim /mysql/3306/bin/mysqld<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>port=3306<br>mysql_user=&quot;root&quot;<br>mysql_pwd=&quot;123456&quot;<br>cmd_path=&quot;/usr/bin&quot;<br>mysql_basedir=&quot;/mysql&quot;<br>mysql_sock=&quot;$&#123;mysql_basedir&#125;/$&#123;port&#125;/socket/mysql.sock&quot;<br><br>function_start_mysql()<br>&#123;<br>    if [ ! -e &quot;$mysql_sock&quot; ];then<br>      printf &quot;Starting MySQL...\n&quot;<br>      $&#123;cmd_path&#125;/mysqld_safe --defaults-file=$&#123;mysql_basedir&#125;/$&#123;port&#125;/etc/my.cnf  &amp;&gt; /dev/null  &amp;<br>    else<br>      printf &quot;MySQL is running...\n&quot;<br>      exit<br>    fi<br>&#125;<br><br><br>function_stop_mysql()<br>&#123;<br>    if [ ! -e &quot;$mysql_sock&quot; ];then<br>       printf &quot;MySQL is stopped...\n&quot;<br>       exit<br>    else<br>       printf &quot;Stoping MySQL...\n&quot;<br>       $&#123;cmd_path&#125;/mysqladmin -u $&#123;mysql_user&#125; -p$&#123;mysql_pwd&#125; -S $&#123;mysql_sock&#125; shutdown<br>   fi<br>&#125;<br><br><br>function_restart_mysql()<br>&#123;<br>    printf &quot;Restarting MySQL...\n&quot;<br>    function_stop_mysql<br>    sleep 2<br>    function_start_mysql<br>&#125;<br><br>case $1 in<br>start)<br>    function_start_mysql<br>;;<br>stop)<br>    function_stop_mysql<br>;;<br>restart)<br>    function_restart_mysql<br>;;<br>*)<br>    printf &quot;Usage: $&#123;mysql_basedir&#125;/$&#123;port&#125;/bin/mysqld &#123;start|stop|restart&#125;\n&quot;<br>esac<br>[root@centos8 ~]# chmod +x /mysql/3306/bin/mysql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重复上述过程分别建立3307,3308的启动脚本</span><br>[root@Rocky8 ~]#  sed &#x27;s/3306/3307/&#x27; /mysql/3306/bin/mysqld &gt; /mysql/3307/bin/mysqld<br>[root@Rocky8 ~]# chmod +x /mysql/3307/bin/mysqld <br>[root@Rocky8 ~]# /mysql/3307/bin/mysqld start<br>[root@Rocky8 ~]#  sed &#x27;s/3306/3308/&#x27; /mysql/3306/bin/mysqld &gt; /mysql/3308/bin/mysqld<br>[root@Rocky8 ~]# chmod +x /mysql/3308/bin/mysqld <br>[root@Rocky8 ~]# /mysql/3308/bin/mysqld start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动服务</span><br>[root@Rocky8 ~]# /mysql/3306/bin/mysqld start<br>[root@Rocky8 ~]# /mysql/3307/bin/mysqld start<br>[root@Rocky8 ~]# /mysql/3308/bin/mysqld start<br>[root@Rocky8 ~]# ss -ntl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">登录实例</span><br>//两种连接方式<br>[root@Rocky8 ~]# mysql -h127.0.0.1 -P3308<br>[root@Rocky8 ~]# mysql -uroot -S /mysqldb/3306/socket/mysql.sock<br>//确认连接端口<br>MariaDB [(none)]&gt; show variables like &#x27;port&#x27;;<br><br>[root@Rocky8 ~]# /mysql/3308/bin/mysqld stop<br>[root@Rocky8 ~]# /mysql/3308/bin/mysqld start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改root密码</span><br>[root@Rocky8 ~]# mysqladmin -uroot -S /mysql/3306/socket/mysql.sock password <br>&#x27;magedu&#x27;<br>[root@Rocky8 ~]# mysqladmin -uroot -S /mysql/3307/socket/mysql.sock password <br>&#x27;magedu&#x27;<br>[root@Rocky8 ~]# mysqladmin -uroot -S /mysql/3308/socket/mysql.sock password <br>&#x27;magedu&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试连接</span><br>[root@Rocky8 ~]# mysql -uroot -p -S /mysql/3306/socket/mysql.sock<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开机启动</span><br>[root@Rocky8 ~]# vi /etc/rc.d/rc.local<br>for i in &#123;3306..3308&#125;;do /mysql/$i/bin/mysqld start;done<br>[root@Rocky8 ~]# chmod +x /etc/rc.d/rc.local<br></code></pre></td></tr></table></figure><h2 id="2-3-MySQL组成和常用工具"><a href="#2-3-MySQL组成和常用工具" class="headerlink" title="2.3 MySQL组成和常用工具"></a>2.3 MySQL组成和常用工具</h2><h3 id="2-3-1-用户名"><a href="#2-3-1-用户名" class="headerlink" title="2.3.1 用户名"></a>2.3.1 用户名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#x27;USERNAME&#x27;@&#x27;HOST&#x27;<br>wang@&#x27;10.0.0.100&#x27;<br>wang@&#x27;10.0.0.%&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">select user,host from mysql.user;</span><br></code></pre></td></tr></table></figure><ul><li>mysql 客户端命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">\h</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">help</span></span><br></code></pre></td></tr></table></figure><ul><li>服务器端命令</li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">help contents</span><br></code></pre></td></tr></table></figure><h3 id="2-3-2-mysql-客户端命令"><a href="#2-3-2-mysql-客户端命令" class="headerlink" title="2.3.2 mysql 客户端命令"></a>2.3.2 mysql 客户端命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Rocky8 ~]# mysql -V            #查看版本号<br>[root@Rocky8 ~]# mysql -u‘USERNAME’ -h&#x27;HOST&#x27; -P&#x27;PASSWORD&#x27; -p&#x27;PORT&#x27; -S&#x27;指定连接socket文件路径&#x27; -D&#x27;指定默认数据库&#x27; -e&#x27;SQL命令&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; status   \s<br>&gt; clear    \c<br>&gt; use mysql<br>&gt; source text.sql<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; select database;<br>&gt; select user();<br></code></pre></td></tr></table></figure><p><strong>修改提示符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Rocky8 ~]# vim /etc/my.cnf.d/mysql-clients.cnf<br>[mysql]<br>prompt=&quot;\\r:\\m:\\s(\\u@\\h) [\\d]&gt;\\_&quot;     #12小进制      <br>prompt=&quot;\\R:\\m:\\s(\\u@\\h) [\\d]&gt;\\_&quot;     #24小时制<br>prompt=&quot;(\\u@\\h) [\\d]&gt;\\_&quot;<br><br>[root@centos8 ~]# mysql --print-defaults -v<br></code></pre></td></tr></table></figure><p><strong>配置所有MySQL客户端的自动登录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Rocky8 ~]# vim /etc/my.cnf.d/client.cnf<br>[client]<br>user=wang<br>password=123456<br></code></pre></td></tr></table></figure><h3 id="2-3-3-mysqladmin命令"><a href="#2-3-3-mysqladmin命令" class="headerlink" title="2.3.3 mysqladmin命令"></a>2.3.3 mysqladmin命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改root密码</span><br>[root@Rocky8 ~]# mysqladmin -uroot -pcentos password &#x27;magedu&#x27;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建数据库testdb</span><br>[root@Rocky8 ~]# mysqladmin -uroot -pcentos   create testdb <br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除数据库testdb</span><br>[root@Rocky8 ~]# mysqladmin -uroot -pcentos   drop testdb<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看mysql服务是否正常，如果正常提示mysqld is alive</span><br>[root@Rocky8 ~]# mysqladmin -uroot -pcentos   ping<br></code></pre></td></tr></table></figure><h3 id="2-3-4-mycli"><a href="#2-3-4-mycli" class="headerlink" title="2.3.4 mycli"></a>2.3.4 mycli</h3><p>MyCLI 是基于Python开发的MySQL的命令行工具，具有自动完成和语法突出显示功能.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">CentOS8安装</span><br>[root@Rocky8 ~]# yum install python3-pip -y<br>[root@Rocky8 ~]# pip3 install mycli<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ubuntu安装</span><br>[root@ubuntu1804 ~]#apt -y install mycli<br>[root@ubuntu1804 ~]#mycli -u root -S /var/run/mysqld/mysqld.sock<br></code></pre></td></tr></table></figure><h1 id="3-SQL语言"><a href="#3-SQL语言" class="headerlink" title="3 SQL语言"></a>3 SQL语言</h1><p>SQL ( Structured Query Language ) 结构化查询语言</p><ul><li>SQL 语句关键字不区分大小写，建议用大写</li><li>SQL语句可单行或多行书写，默认以 “ ; “ 结尾</li><li>关键词不能跨多行或简写</li></ul><p><strong>注释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 注释内容<br>/**/<br><br>在MySQL中也可以使用以下方式<br># 注释内容<br></code></pre></td></tr></table></figure><p><strong>数据库的组件</strong>(对象)：</p><p>数据库、表、索引、视图、用户、存储过程、函数、触发器、事件调度器等</p><p><strong>命名规则：</strong></p><ul><li><strong>必须以字母开头</strong>，后续可以包括字母,数字和三个特殊字符（# _ $）</li><li>不要使用MySQL的保留字</li></ul><h2 id="3-1-SQL语句"><a href="#3-1-SQL语句" class="headerlink" title="3.1 SQL语句"></a>3.1 SQL语句</h2><ul><li>DDL: Data Defination Language 数据定义语言</li></ul><p>​    CREATE，DROP，ALTER</p><ul><li>DML: Data Manipulation Language 数据操纵语言</li></ul><p>​    INSERT，DELETE，UPDATE</p><p>​    软件开发：CRUD</p><ul><li>DQL：Data Query Language 数据查询语言</li></ul><p>​    SELECT </p><ul><li>DCL：Data Control Language 数据控制语言</li></ul><p>​    GRANT，REVOKE</p><ul><li>TCL：Transaction Control Language 事务控制语言</li></ul><p>​    COMMIT，ROLLBACK，SAVEPOINT</p><p><strong>帮助文档</strong>：<a href="https://dev.mysql.com/doc/refman/8.0/en/sql-statements.html">https://dev.mysql.com/doc/refman/8.0/en/sql-statements.html</a></p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">help 命令类型</span><br></code></pre></td></tr></table></figure><h2 id="3-2-字符集和排序"><a href="#3-2-字符集和排序" class="headerlink" title="3.2 字符集和排序"></a>3.2 字符集和排序</h2><p>早期MySQL版本默认为 latin1，从MySQL8.0开始默认字符集已经为 utf8mb4</p><p>实例/数据库/表/字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CHARACTER SET;<br>SHOW CHARSET;<br><br>show variables like &#x27;character%&#x27;;<br><br>#设置服务器默认的字符集<br>[root@Rocky8 ~]# vim/etc/my.cnf<br>[mysqld]<br>character-set-server=utf8mb4<br><br>#设置mysql客户端默认的字符集<br>[root@Rocky8 ~]# vim /etc/my.cnf<br>#针对mysql客户端<br>[mysql]<br>default-character-set=utf8mb4<br>#针对所有MySQL客户端<br>[client]<br>default-character-set=utf8mb4<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;collation%&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="3-3-管理数据库"><a href="#3-3-管理数据库" class="headerlink" title="3.3 管理数据库"></a>3.3 管理数据库</h2><p>数据库文件默认位置：/var/lib/mysql/</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>]  <span class="hljs-string">&#x27;DB_NAME&#x27;</span><br><br><span class="hljs-keyword">DROP</span> DATABASE<span class="hljs-operator">|</span>SCHEMA [IF <span class="hljs-keyword">EXISTS</span>] <span class="hljs-string">&#x27;DB_NAME&#x27;</span>;<br><br><span class="hljs-keyword">ALTER</span> DATABASE DB_NAME <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8<br><br><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><h2 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h2><p>官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/data-types.html">https://dev.mysql.com/doc/refman/8.0/en/data-types.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401300039156.png"></p><p><strong>选择正确的数据类型对于获得高性能至关重要，三大原则：</strong></p><ul><li> 更小的通常更好，尽量使用可正确存储数据的最小数据类型</li><li> 简单就好，简单数据类型的操作通常需要更少的CPU周期</li><li>尽量避免NULL，包含为NULL的列，对MySQL更难优化</li></ul><p><strong>面试题</strong>: VARCHAR(50) <strong>能存放几个</strong> <strong>UTF8</strong> <strong>编码的汉字？</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">存放的汉字个数与版本相关。<br>mysql <span class="hljs-number">4.0</span>以下版本，<span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) 指的是 <span class="hljs-number">50</span> 字节，如果存放 UTF8 格式编码的汉字时（每个汉字<span class="hljs-number">3</span>字节），只能存放<span class="hljs-number">16</span> 个。<br>mysql <span class="hljs-number">5.0</span>以上版本，<span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) 指的是 <span class="hljs-number">50</span> 字符，无论存放的是数字、字母还是 UTF8 编码的汉字，都可以存放 <span class="hljs-number">50</span> 个。<br></code></pre></td></tr></table></figure><p><strong>修饰符</strong></p><ul><li>NULL                               数据列可包含NULL值，默认值</li><li>NOT NULL                      数据列不允许包含NULL值，相当于网站注册表中的 * 为必填选项</li><li>DEFAULT                         默认值</li><li>PRIMARY KEY                 主键，所有记录中此字段的值不能重复，且不能为NULL</li><li>UNIQUE KEY                   唯一键，所有记录中此字段的值不能重复，但可以为NULL</li><li>CHARACTER SET name 指定一个字符集</li><li>AUTO_INCREMENT        自动递增，适用于整数类型, 必须作用于某个 key 的字段,比如primary key</li><li>UNSIGNED                      无符号</li></ul><h2 id="3-5-DDL-语句"><a href="#3-5-DDL-语句" class="headerlink" title="3.5 DDL 语句"></a>3.5 DDL 语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student (<br>id <span class="hljs-type">int</span> UNSIGNED AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>age tinyint UNSIGNED,<br>#height <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),<br>gender ENUM(<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;M&#x27;</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student1 <span class="hljs-keyword">like</span> student<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student3 <span class="hljs-keyword">as</span> student<br><br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student;<br><span class="hljs-keyword">desc</span> student;    #查看表属性<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS <span class="hljs-keyword">LIKE</span> student;  #查看表状态<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] student;<br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> student;      #清空表<br><br>#修改表名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students RENAME s1;<br>#添加字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> s1 <span class="hljs-keyword">ADD</span> phone <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>) AFTER name;<br>#修改字段类型<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> s1 MODIFY phone <span class="hljs-type">int</span>;<br>#修改字段名称和类型<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> s1 CHANGE <span class="hljs-keyword">COLUMN</span> phone mobile <span class="hljs-type">char</span>(<span class="hljs-number">11</span>);<br>#删除字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> s1 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> mobile;<br>#修改字符集<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> s1 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8;<br>#修改数据类型和字符集<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> s1 change name name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8;<br>#添加字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">ADD</span> gender ENUM(<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student modify is_del bool <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br>#修改字段名和类型<br>ALETR <span class="hljs-keyword">TABLE</span> students CHANGE id sid <span class="hljs-type">int</span> UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY; <br>#删除字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">DROP</span> age;<br>#查看表结构<br><span class="hljs-keyword">DESC</span> students;<br>#新建表无主键，添加和删除主键<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t1 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key (stuid);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t1 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key ;<br>#添加外键<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">add</span> <span class="hljs-keyword">foreign</span> key(TeacherID) <span class="hljs-keyword">references</span> teachers(tid);<br>#删除外键<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students #查看外键名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> key <span class="hljs-operator">&lt;</span>外键名<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><h2 id="3-6-DML-语句"><a href="#3-6-DML-语句" class="headerlink" title="3.6 DML 语句"></a>3.6 DML 语句</h2><h3 id="3-6-1-INSERT"><a href="#3-6-1-INSERT" class="headerlink" title="3.6.1 INSERT"></a>3.6.1 INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> student(id,name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;jin&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-keyword">default</span>);<br><br><span class="hljs-keyword">insert</span> student1 <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student<br></code></pre></td></tr></table></figure><h3 id="3-6-2-UPDATE"><a href="#3-6-2-UPDATE" class="headerlink" title="3.6.2 UPDATE"></a>3.6.2 UPDATE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">18</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;jin&#x27;</span>;<br><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>U <span class="hljs-operator">/</span><span class="hljs-operator">/</span>安全更改模式<br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# alias mysql<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mysql -U&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-6-3-DELETE"><a href="#3-6-3-DELETE" class="headerlink" title="3.6.3 DELETE"></a>3.6.3 DELETE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">delect <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> deleted <span class="hljs-type">char</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="3-7-DQL-语句"><a href="#3-7-DQL-语句" class="headerlink" title="3.7 DQL 语句"></a>3.7 DQL 语句</h2><p>FROM Clause –&gt; WHERE Clause –&gt; GROUP BY –&gt; HAVING Clause –&gt;SELECT –&gt; ORDER </p><p>BY –&gt; LIMIT</p><h3 id="2-7-1-单表查询"><a href="#2-7-1-单表查询" class="headerlink" title="2.7.1 单表查询"></a>2.7.1 单表查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span>,age <span class="hljs-keyword">is</span> (<span class="hljs-keyword">not</span>) <span class="hljs-keyword">NULL</span>,name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;马%&#x27;</span>;<br><span class="hljs-keyword">select</span> id 编号,name 姓名 <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age<span class="hljs-operator">&gt;=</span><span class="hljs-number">18</span> <span class="hljs-keyword">and</span><span class="hljs-operator">/</span><span class="hljs-operator">&amp;&amp;</span> sge<span class="hljs-operator">&lt;=</span><span class="hljs-number">20</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age<span class="hljs-operator">&lt;=</span><span class="hljs-number">18</span> <span class="hljs-keyword">or</span><span class="hljs-operator">/</span><span class="hljs-operator">||</span> sge<span class="hljs-operator">&gt;=</span><span class="hljs-number">20</span>; <br><br><span class="hljs-keyword">select</span> gender，<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender <span class="hljs-keyword">having</span> classid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br># <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>: <span class="hljs-keyword">select</span> 后面只能跟上 分组字段 或 聚合函数<br># 聚合函数  <span class="hljs-built_in">count</span>(),<span class="hljs-built_in">sum</span>(),<span class="hljs-built_in">max</span>(),<span class="hljs-built_in">min</span>(),<span class="hljs-built_in">avg</span>()<br># <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>分组后过滤 用<span class="hljs-keyword">where</span> 替换为<span class="hljs-keyword">having</span>,并且 放在<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 后面<br><br><span class="hljs-keyword">select</span> classid,gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender,classid <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">-</span>classid <span class="hljs-keyword">desc</span>;<br># <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>: <span class="hljs-keyword">ASC</span><span class="hljs-comment">--升序 DESC--降序 </span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> stuid limit <span class="hljs-number">10</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> stuid limit <span class="hljs-number">5</span>,<span class="hljs-number">10</span>;<br># 查询第n页的数据,每页显示m条记录<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students limit (n<span class="hljs-number">-1</span>) <span class="hljs-operator">*</span> m,m;<br><br>#对查询结果中的数据请求施加&quot;锁&quot;<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>: 写锁，独占或排它锁，只有一个读和写操作<br>LOCK <span class="hljs-keyword">IN</span> SHARE MODE: 读锁，共享锁，同时多个读操作<br></code></pre></td></tr></table></figure><h3 id="2-7-2-多表查询"><a href="#2-7-2-多表查询" class="headerlink" title="2.7.2 多表查询"></a>2.7.2 多表查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 子查询<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> Age <span class="hljs-operator">&lt;</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students);<br><span class="hljs-keyword">update</span> teachers <span class="hljs-keyword">set</span> age <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students) <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">select</span> Name,Age <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> age <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> age <span class="hljs-keyword">from</span> teachers);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">where</span>  <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers t <span class="hljs-keyword">where</span> s.teacherid<span class="hljs-operator">=</span>t.tid);<br><br><br><br># 联合查询<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>纵向合并<br><span class="hljs-keyword">select</span> STUID 编号,NAME 姓名,AGE 年龄,GENDER 性别 <span class="hljs-keyword">from</span> students <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers; <br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>去重: <br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">union</span>  <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>不去重<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-comment">/*横向合并*/</span><br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>交叉连接、横向笛卡尔 <span class="hljs-comment">-- 全部排列组合、意义不大</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">cross</span> <span class="hljs-keyword">join</span> teachers;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>内连接 前后次序无关<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> teachers t <span class="hljs-keyword">on</span> s.teacherid<span class="hljs-operator">=</span>t.Tid;<br><span class="hljs-keyword">select</span> stuid,s.name student_name,tid,t.name teacher_name <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> teachers t <span class="hljs-keyword">on</span> s.teacherid<span class="hljs-operator">=</span>t.tid;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>外连接 前后次序影响查询结果<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">left</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> teachers t <span class="hljs-keyword">on</span> s.teacherid<span class="hljs-operator">=</span>t.tid;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">right</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> teachers t <span class="hljs-keyword">on</span> s.teacherid<span class="hljs-operator">=</span>t.tid;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>完全外连接  mysql 不支持 <span class="hljs-keyword">full</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> 用一下方法代替<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">left</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> teachers t <span class="hljs-keyword">on</span> s.teacherid<span class="hljs-operator">=</span>t.tid <span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">right</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> teachers t <span class="hljs-keyword">on</span> s.teacherid<span class="hljs-operator">=</span>t.tid;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>自连接<br><span class="hljs-keyword">select</span> t.name,s.name leader_name <span class="hljs-keyword">from</span> emp t <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> emp s <span class="hljs-keyword">on</span> t.leaderid <span class="hljs-operator">=</span> s.id;<br><span class="hljs-keyword">select</span> t.name,ifnull(s.name,<span class="hljs-string">&#x27;无上级&#x27;</span>) leader_name <span class="hljs-keyword">from</span> emp t <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp s <span class="hljs-keyword">on</span> t.leaderid <span class="hljs-operator">=</span> s.id;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>三表连接<br><span class="hljs-keyword">select</span> st.name,co.Course,sc.score <span class="hljs-keyword">from</span> courses co <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> scores sc <span class="hljs-keyword">on</span> co.courseid<span class="hljs-operator">=</span>sc.courseid <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> students st <span class="hljs-keyword">on</span> sc.stuid<span class="hljs-operator">=</span>st.stuid;<br></code></pre></td></tr></table></figure><p><strong>练习</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs livescript">导入hellodb.sql生成数据库<br><br><span class="hljs-string">\1.</span> 在students表中，查询年龄大于<span class="hljs-number">25</span>岁，且为男性的同学的名字和年龄<br><br><span class="hljs-string">\2.</span> 以ClassID为分组依据，显示每组的平均年龄<br><br><span class="hljs-string">\3.</span> 显示第<span class="hljs-number">2</span>题中平均年龄大于<span class="hljs-number">30</span>的分组及平均年龄<br><br><span class="hljs-string">\4.</span> 显示以L开头的名字的同学的信息<br><br><span class="hljs-string">\5.</span> 显示TeacherID非空的同学的相关信息<br><br><span class="hljs-string">\6.</span> 以年龄排序后，显示年龄最大的前<span class="hljs-number">10</span>位同学的信息<br><br><span class="hljs-string">\7.</span> 查询年龄大于等于<span class="hljs-number">20</span>岁，小于等于<span class="hljs-number">25</span>岁的同学的信息<br><br><span class="hljs-string">\8.</span> 以ClassID分组，显示每班的同学的人数<br><br><span class="hljs-string">\9.</span> 以Gender分组，显示其年龄之和<br><br><span class="hljs-string">\10.</span> 以ClassID分组，显示其平均年龄大于<span class="hljs-number">25</span>的班级<br><br><span class="hljs-string">\11.</span> 以Gender分组，显示各组中年龄大于<span class="hljs-number">25</span>的学员的年龄之和<br><br><span class="hljs-string">\12.</span> 显示前<span class="hljs-number">5</span>位同学的姓名、课程及成绩<br><br><span class="hljs-string">\13.</span> 显示其成绩高于<span class="hljs-number">80</span>的同学的名称及课程<br><br><span class="hljs-string">\14.</span> 取每位同学各门课的平均成绩，显示成绩前三名的同学的姓名和平均成绩<br><br><span class="hljs-string">\15.</span> 显示每门课程课程名称及学习了这门课的同学的个数<br><br><span class="hljs-string">\16.</span> 显示其年龄大于平均年龄的同学的名字<br><br><span class="hljs-string">\17.</span> 显示其学习的课程为第<span class="hljs-number">1</span>、<span class="hljs-number">2</span>，<span class="hljs-number">4</span>或第<span class="hljs-number">7</span>门课的同学的名字<br><br><span class="hljs-string">\18.</span> 显示其成员数最少为<span class="hljs-number">3</span>个的班级的同学中年龄大于同班同学平均年龄的同学<br><br><span class="hljs-string">\19.</span> 统计各班级中年龄大于全校同学平均年龄的同学<br><br></code></pre></td></tr></table></figure><p>补充：<strong>SQL 注入攻击</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1=1&#x27;</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">-- &#x27; and password=&#x27;magedu123&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>; # <span class="hljs-string">&#x27; and password=&#x27;</span>magedu123<span class="hljs-string">&#x27;;</span><br></code></pre></td></tr></table></figure><h2 id="3-8-view-视图"><a href="#3-8-view-视图" class="headerlink" title="3.8 view 视图"></a>3.8 view 视图</h2><p>虚拟表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span>  <span class="hljs-keyword">VIEW</span> view_name <span class="hljs-keyword">AS</span> select_statement<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;v_st_co_sc&#x27;</span>\G<br><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# ls <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>hellodb<span class="hljs-operator">/</span><br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name #只能看视图定义<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> view_name # 可以查看表和视图<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> [IF <span class="hljs-keyword">EXISTS</span>] view_name<br></code></pre></td></tr></table></figure><p>视图中的数据事实上存储于”基表”中，因此，其修改操作也会针对基表实现；其修改操作受基表限制。</p><h2 id="3-9-function-函数"><a href="#3-9-function-函数" class="headerlink" title="3.9 function 函数"></a>3.9 function <strong>函数</strong></h2><p>系统内置函数参考：</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/sql-function-reference.html">https://dev.mysql.com/doc/refman/8.0/en/sql-function-reference.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/sql-function-reference.html">https://dev.mysql.com/doc/refman/5.7/en/sql-function-reference.html</a></p><p>自定义函数：user-defined function UDF，保存在mysql.proc (MySQL8.0 中已经取消此表)表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># MySQL8<span class="hljs-number">.0</span> 默认开启二进制不允许创建函数<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@log</span>_bin;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>打开此变量允许二进制日志信息函数创建<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> log_bin_trust_function_creators<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>;<br><br>#Mariadb10<span class="hljs-number">.3</span> 默认没有开启二进制日志,所以可以创建函数<br>[root<span class="hljs-variable">@centos8</span> <span class="hljs-operator">~</span>]#vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf.d<span class="hljs-operator">/</span>mariadb<span class="hljs-operator">-</span>server.cnf<br>[mysqld]<br>log<span class="hljs-operator">-</span>bin <br>[root<span class="hljs-variable">@centos8</span> <span class="hljs-operator">~</span>]#systemctl restart mariadb<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@log</span>_bin;<br></code></pre></td></tr></table></figure><ul><li>参数可以有多个,也可以没有参数</li><li>无论有无参数，小括号（）是必须的</li><li>必须有且只有一个返回值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">#无参UDF<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> simpleFun() <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">RETURN</span> &quot;Hello World&quot;;<br><br>#有参数UDF<br>DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> deleteById(id <span class="hljs-type">SMALLINT</span> UNSIGNED) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">BEGIN</span><br> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stuid <span class="hljs-operator">=</span> id;<br> <span class="hljs-keyword">RETURN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> students);<br><span class="hljs-keyword">END</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br><br><span class="hljs-keyword">select</span> deleteById(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h2 id="3-10-procedure-存储过程"><a href="#3-10-procedure-存储过程" class="headerlink" title="3.10 procedure 存储过程"></a>3.10 procedure 存储过程</h2><p>存储过程：多表 SQL 的语句的集合，可以独立执行，存储过程保存在 mysql.proc 表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建无参存储过程<br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> showTime()<br><span class="hljs-keyword">BEGIN</span><br> <span class="hljs-keyword">SELECT</span> now();<br><span class="hljs-keyword">END</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br><br><span class="hljs-keyword">CALL</span> showTime;<br><br>#创建含参存储过程：只有一个<span class="hljs-keyword">IN</span>参数<br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> selectById(<span class="hljs-keyword">IN</span> id <span class="hljs-type">SMALLINT</span> UNSIGNED)<br><span class="hljs-keyword">BEGIN</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> stuid <span class="hljs-operator">=</span> id;<br><span class="hljs-keyword">END</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br><br><span class="hljs-keyword">call</span> selectById(<span class="hljs-number">2</span>);<br><br><br>delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> dorepeat(n <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br> REPEAT <span class="hljs-keyword">SET</span> <span class="hljs-variable">@sum</span> <span class="hljs-operator">=</span> <span class="hljs-variable">@sum</span><span class="hljs-operator">+</span><span class="hljs-variable">@i</span>; <br> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@i</span> <span class="hljs-operator">=</span> <span class="hljs-variable">@i</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br> UNTIL <span class="hljs-variable">@i</span> <span class="hljs-operator">&gt;</span> n <span class="hljs-keyword">END</span> REPEAT;<br><span class="hljs-keyword">END</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br><span class="hljs-keyword">CALL</span> dorepeat(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@sum</span>;<br></code></pre></td></tr></table></figure><h2 id="3-11-trigger-触发器"><a href="#3-11-trigger-触发器" class="headerlink" title="3.11 trigger 触发器."></a>3.11 <strong>trigger</strong> <strong>触发器.</strong></h2><p>触发器的执行不是由程序调用，也不是由手工启动，而是由事件来触发、激活从而实现执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql">#创建触发器，在向学生表<span class="hljs-keyword">INSERT</span>数据时，学生数增加，<span class="hljs-keyword">DELETE</span>学生时，学生数减少<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student_info (<br> stu_id <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT ,<br> stu_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (stu_id)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student_count (<br> student_count  <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student_count <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> trigger_student_count_insert<br>AFTER <span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">ON</span> student_info <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">UPDATE</span> student_count <span class="hljs-keyword">SET</span> student_count<span class="hljs-operator">=</span>student_count<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> trigger_student_count_delete<br>AFTER <span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">ON</span> student_info <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">UPDATE</span> student_count <span class="hljs-keyword">SET</span> student_count<span class="hljs-operator">=</span>student_count<span class="hljs-number">-1</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> trigger_student_count_delete<br></code></pre></td></tr></table></figure><h2 id="3-12-Event-事件"><a href="#3-12-Event-事件" class="headerlink" title="3.12 Event 事件"></a>3.12 Event 事件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 默认事件调度功能是关闭的,MySQL8<span class="hljs-number">.0</span>默认是开启的<br>MariaDB [(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@event</span>_scheduler;<br># 临时开启事件调度功能<br>MariaDB [(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> event_scheduler<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>#开启事件调度功能后,自启动一个event_scheduler线程<br>MariaDB [(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> processlist;<br>#临时关闭事件调度功能<br>MariaDB [(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> event_scheduler<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建一个表记录每次事件调度的名字和事件戳<br>MariaDB [testdb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> events_list(event_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,event_started <span class="hljs-type">timestamp</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>); <br>#任务计划存放在mysql.event表中<br>MariaDB [testdb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.event\G<br>#任务计划存放在mysql.event表中<br>MariaDB [testdb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.event\G<br>#开启事件调度功能<br>MariaDB [testdb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> event_scheduler<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>MariaDB [testdb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> EVENT event_every_second <span class="hljs-keyword">ON</span> SCHEDULE <span class="hljs-keyword">EVERY</span> <span class="hljs-number">1</span> <span class="hljs-keyword">SECOND</span> <br>DO <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> events_list <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;event_now&#x27;</span>, now());<br>#事件是存放在mysql.event表中<br>MariaDB [testdb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.event\G<br></code></pre></td></tr></table></figure><h2 id="3-13-MySQL-用户管理"><a href="#3-13-MySQL-用户管理" class="headerlink" title="3.13 MySQL 用户管理"></a>3.13 MySQL 用户管理</h2><ul><li><p>虚拟用户：给应用使用的用户账号</p></li><li><p>系统用户：Linux系统的用户</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;USERNAME&#x27;</span>@<span class="hljs-string">&#x27;HOST&#x27;</span>  #HOST: 主机名、IP地址、Network、通配符 <span class="hljs-operator">%</span> _<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> test1@<span class="hljs-string">&#x27;10.1.16.128&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# mysql <span class="hljs-operator">-</span>utest1 <span class="hljs-operator">-</span>p123456 <span class="hljs-operator">-</span>h10<span class="hljs-number">.1</span><span class="hljs-number">.16</span><span class="hljs-number">.129</span><br><span class="hljs-keyword">show</span> processlist;<br><br>rename <span class="hljs-keyword">user</span> test1@<span class="hljs-string">&#x27;10.1.16.128&#x27;</span> <span class="hljs-keyword">to</span> test@<span class="hljs-string">&#x27;10.1.16.128&#x27;</span>;<br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# mysql <span class="hljs-operator">-</span>utest <span class="hljs-operator">-</span>p123456 <span class="hljs-operator">-</span>h10<span class="hljs-number">.1</span><span class="hljs-number">.16</span><span class="hljs-number">.129</span><br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> test@<span class="hljs-string">&#x27;10.1.16.128&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>修改用户密码</strong></p><ul><li>新版mysql中用户密码可以保存在mysql.user表的authentication_string字段中</li><li>如果mysql.user表的authentication_string和password字段都保存密码，authentication_string优先生效</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">#方法<span class="hljs-number">1</span>,用户可以也可通过此方式修改自已的密码<br><span class="hljs-keyword">set</span> password <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;host&#x27;</span> <span class="hljs-operator">=</span> PASSWORD(<span class="hljs-string">&#x27;password&#x27;</span>);  #MySQL8<span class="hljs-number">.0</span> 版本不支持此方法,因为password函数被取消<br><span class="hljs-keyword">set</span> password <span class="hljs-keyword">for</span> root@<span class="hljs-string">&#x27;localhost&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span> ;  #MySQL8<span class="hljs-number">.0</span>版本支持此方法,此方式直接将密码<span class="hljs-number">123456</span>加密后存放在mysql.user表的authentication_string字段<br><br>#方法<span class="hljs-number">2</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> test@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;centos&#x27;</span>;  #通用改密码方法, 用户可以也可通过此方式修改自已的密码,MySQL8 版本修改密码<br><br>#方法<span class="hljs-number">3</span> 此方式MySQL8<span class="hljs-number">.0</span>不支持,因为password函数被取消<br><span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">SET</span> password<span class="hljs-operator">=</span>PASSWORD(<span class="hljs-string">&#x27;password&#x27;</span>) <span class="hljs-keyword">WHERE</span> clause;<br>#mariadb <span class="hljs-number">10.3</span><br><span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span>password(<span class="hljs-string">&#x27;ubuntu&#x27;</span>) <span class="hljs-keyword">where</span><br><span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;mage&#x27;</span>;<br>#此方法需要执行下面指令才能生效：<br>flush privileges;<br><br>#方法<span class="hljs-number">4</span><br>mysqladmin <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p<span class="hljs-operator">&lt;</span>oldpassword<span class="hljs-operator">&gt;</span> password <span class="hljs-operator">&lt;</span>newpassword<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p><strong>忘记管理员密码的解决办法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 方法一 <span class="hljs-comment">-- 学习测试环境  //删库跑路</span><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# systemctl stop mysqld<br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# ls <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span><br>[root<span class="hljs-variable">@Rocky8</span> <span class="hljs-operator">~</span>]# rm <span class="hljs-operator">-</span>rf <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-comment">/*</span><br><span class="hljs-comment">[root@Rocky8 ~]# mysql</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 方法二 -- mysql5.7和8.0破解密码</span><br><span class="hljs-comment">[root@centos8 ~]#vim /etc/my.cnf</span><br><span class="hljs-comment">[mysqld]</span><br><span class="hljs-comment">skip-grant-tables  </span><br><span class="hljs-comment">skip-networking  #MySQL8.0不需</span><br><span class="hljs-comment">[root@centos8 ~]#systemctl restart mysqld</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">mysql&gt; select user,host,authentication_string from mysql.user;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//方法1</span><br><span class="hljs-comment">mysql&gt; update mysql.user set authentication_string=&#x27;&#x27; where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//方法2</span><br><span class="hljs-comment">mysql&gt; flush privileges;</span><br><span class="hljs-comment">#再执行下面任意一个命令</span><br><span class="hljs-comment">mysql&gt; alter user root@&#x27;localhost&#x27; identified by &#x27;ubuntu&#x27;;</span><br><span class="hljs-comment">mysql&gt; set password for root@&#x27;localhost&#x27;=&#x27;ubuntu&#x27;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">[root@centos8 ~]#vim /etc/my.cnf</span><br><span class="hljs-comment">[mysqld]</span><br><span class="hljs-comment">#skip-grant-tables  </span><br><span class="hljs-comment">#skip-networking</span><br><span class="hljs-comment">[root@centos8 ~]#systemctl restart mysqld</span><br><span class="hljs-comment">[root@centos8 ~]#mysql -uroot -pubuntu</span><br></code></pre></td></tr></table></figure><h2 id="3-14-权限管理和DCL语句"><a href="#3-14-权限管理和DCL语句" class="headerlink" title="3.14 权限管理和DCL语句"></a>3.14 权限管理和DCL语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;123456&#x27;</span>; <br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-built_in">current_user</span>;<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> hellodb.students <span class="hljs-keyword">to</span> test@<span class="hljs-string">&#x27;10.1.16.128&#x27;</span>;<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> hellodb.students <span class="hljs-keyword">from</span> test@<span class="hljs-string">&#x27;10.1.16.128&#x27;</span>;<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> test@<span class="hljs-string">&#x27;10.1.16.%&#x27;</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> test@<span class="hljs-string">&#x27;10.1.16.128&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option;<br></code></pre></td></tr></table></figure><h2 id="3-15-MySQL的图形化远程工具"><a href="#3-15-MySQL的图形化远程工具" class="headerlink" title="3.15 MySQL的图形化远程工具"></a>3.15 MySQL的图形化远程工具</h2><ul><li>Navicat</li><li>SQLyog</li><li>DBeaver   <a href="https://dbeaver.io/">https://dbeaver.io/</a></li></ul><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-实验2-弹性伸缩实战</title>
    <link href="/2024/01/19/ACA-%E5%AE%9E%E9%AA%8C2-%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9%E5%AE%9E%E6%88%98/"/>
    <url>/2024/01/19/ACA-%E5%AE%9E%E9%AA%8C2-%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>本实验从零开始<strong>构建Serverless 容器服务 ASK</strong>，并在容器服务内<strong>创建无状态应用</strong>，并<strong>设置指标弹性伸缩HPA</strong>以及定<strong>时弹性伸缩CronHPA</strong>，使学生能够熟练掌握的容器集群的创建以及设置阿里云弹性容器实例ECI的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191648529.png"></p><p><strong>1.ACK集群创建</strong></p><p><img src="C:/Users/86187/AppData/Roaming/Typora/typora-user-images/image-20240119164609251.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191648835.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191648029.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191649399.png"></p><p><strong>2.ACK集群基本信息</strong></p><p>我们可以点击右侧的【详情】查看集群相关参数：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_45381f2342154dcf8f711871268e3c73.png"></p><p>【基本信息】页面主要包括：集群ID、API Server 公网连接端点、API Server 内网连接端点、Service CIDR、RRSA OIDC 提供商 URL、自定义证书 SAN、测试域名、标签以及资源组：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_a7c0da374d7b471aa8ced4baedc0eeda.png"></p><p>【连接信息】页面主要包括：通过 kubectl 连接 Kubernetes 集群的公网访问方式及内网访问方式：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_3df86d8396ca40e4b12a671d9a067c76.png"></p><p>【集群资源】页面主要包括：虚拟专有网络 VPC、节点虚拟交换机、安全组、以及API Server 负载均衡（SLB），这些资源是容器服务集群管理的资源，请不要删除或自行修改，以避免导致集群异常，影响集群内应用的正常运行。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191651180.png"></p><p>【集群日志】页面主要包括：各时间节点集群产生的日志信息，日志信息可以帮助我们更好的排查集群的故障：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191651289.png"></p><p>【集群任务】页面主要包括：任务类型、任务状态、创建时间以及失败原因：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191651862.png"></p><p>【注意事项】标准 Serverless 集群无需创建和管理Master节点及 Worker 节点，即可通过控制台或者命令配置容器实例的资源、指定应用容器镜像以及对外服务的方式，直接启动应用程序。使用 Kubernetes 原生标准服务发现组件 CoreDNS，需要在集群部署一组容器用于 DNS 解析。默认采用2个 2C 2Gi 规格的 ECI 实例。Knative 是一款基于 Kubernetes 的 Serverless 框架，其目标是制定云原生、跨平台的Serverless编排标准。</p><p><strong>3.创建无状态应用Deployment</strong></p><p>Deployment意思就是无状态的，用于部署无状态的服务。类似网页访问之类的请求就是无状态的，每次请求都包含了需要的所有信息，每次请求都和上次没有关系。Deployment是最常用的控制器。一般用于管理维护企业内部的无状态的微服务，比如configserver、zuul、springboot。可以管理多个副本的Pod实现无缝迁移、自动扩容缩容、自动灾难恢复、一键回滚等功能。</p><p>点击左侧导航栏【无状态】按钮创建无状态应用，然后点击【使用YAML】创建资源：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191654936.png"></p><p>点击【创建】即可创建无状态应用：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191654961.png"></p><p>返回控制台查看应用创建详情：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191654005.png"></p><p>此时系统根据配置创建了两个无状态应用实例，点击【详情】可以查看基本信息：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191654107.png"></p><p>基本信息页包含：应用名称、状态、标签、现状详情以及容器的详细信息：    </p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191654149.png"></p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_fcf586070d964d74a03de9c903724648.png"></p><p>【注意事项】YAML是一个可读性高，用来表达数据序列化的格式。</p><p><strong>4.创建指标弹性伸缩HPA</strong></p><p><strong>指标伸缩（HPA）</strong>：很多场景下，往往需要更多的监测指标来指导集群的扩缩容，如HTTP请求率、Ingress QPS等，但是默认HPA并不支持这些自定义的指标或外部指标，但是Kubernetes提供了External Metrics的机制，为应用提供更加便捷的扩缩机制。</p><p>点击【无状态】选择无状态应用右侧的【更多】，最后点击【弹性伸缩】，进行弹性伸缩的配置：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_c3c57d9d55ef40ca98cf48689b9c7087.png"></p><p>点击指标伸缩（HPA）的【创建】去创建弹性伸缩的规则，名称设置为【cpu-demo】点击指标的【添加】按钮添加指标，监控项选择【CPU】阈值设置为【50%】最后点击【确定】：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_173ff424ab2043cdafdd336159897f46.png"></p><p>此时指标伸缩（HPA）已经创建成功了，当应用实例的CPU使用率大于50%时系统会根据设定的规则进行弹性伸缩，创建新的应用：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191655563.png"></p><p>因为指标伸缩对象最多一个，所以我们可以将刚刚创建的【cpu-demo】规则进行删除，创建根据内存监控的弹性伸缩规则，点击【删除】：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_55ca11e645a34b24b21acede5acfe2be.png"></p><p>选择【确定】：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191655098.png"></p><p>点击指标伸缩（HPA）的【创建】去创建弹性伸缩的规则，名称设置为【memory-demo】点击指标的【添加】按钮添加指标，监控项选择【内存使用量】阈值设置为【70%】最后点击【确定】：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191655557.png"></p><p>此时指标伸缩（HPA）已经创建成功了，当应用实例的内存的使用量大于70%时系统会根据设定的规则进行弹性伸缩，创建新的应用：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191655252.png"></p><p>【注意事项】指标伸缩（HPA）对象最多只有一个。</p><p><strong>5.创建定时弹性伸缩CronHPA</strong></p><p>定时伸缩（CronHPA）: 对于应对资源浪费的场景，阿里云服务容器提供kubernetes-cronhpa-controller组件，来实现资源定时扩容。</p><p>点击定时伸缩（CronHPA）的【点击安装】按钮：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191657108.png"></p><p>安装成功后点击定时伸缩（CronHPA）的【创建】去创建定时弹性伸缩的规则，名称设置为【cron-hpa】目标副本数设置为【10】，调度周期选择【按小时】然后选择【每1分钟执行一次】，最后点击【确定】，即可创建定时伸缩：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191657141.png"></p><p>点击【无状态】回到控制台，一分钟后【刷新页面】可以看到容器组数量变为【10/10】说明我们创建的定时伸缩（CronHPA）规则生效：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191657505.png"></p><p>点击【详情】可以查看容器详情：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_87a05cf041e04111bfb574e359b5a050.png"></p><p>定时任务创建成功</p><p><strong>6. 访问弹性伸缩应用</strong></p><p>通过设置网络服务即可以访问无状态应用。</p><p>点击控制台左侧【网络】选择【服务】点击右侧【创建】进行服务的创建，名称设置为【web-demo】，类型选择【负载均衡】【公网访问】以及【新建SLB】，在关联处管理我们之前所创建的无状态应用，端口映射第一条规则名称设置为【https-port】服务端口【443】映射容器的443端口，第二条规则名称设置为【http-port】服务端口【80】映射容器的80端口，协议均为TCP，最后点击【创建】即可，完成网络服务创建：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_ecda7286815846b689df1331a65382da.png"></p><p>此时我们的【web-demo】服务正在创建中：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191658246.png"></p><p>创建成功后点击80端口的公网ip进行访问：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191658913.png"></p><p>此时可以成功访问到我们所创建的无状态应用：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191658825.png"></p><p>出现上图界面，就表示弹性伸缩应用创建成功并可以公网访问。</p><p><strong>7.解绑NAT网关</strong></p><p><strong>说明：此小节需严谨按照是要步骤操作，否则会对其他实验产生影响，造成资源驻留。</strong></p><p>1.进入集群页面，选择【更多】，点击【删除】。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/ovurciethbfzk_a96929a11ba247c98540efd8feca96b9.png"></p><p>2.进入删除页面，根据页面提示点击【保留资源】列表中相应的资源ID。</p><p><strong>保留资源</strong>：警告标识</p><p><strong>资源类型</strong>：API Server 公网访问 EIP</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191659670.png"> </p><p>3.进入弹性公网IP界面，点击当前实例ID，进入实例详情页面。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191659613.png"></p><p>4.点击右侧的【绑定实例ID】，跳转至NAT网关实例详情界面。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/ovurciethbfzk_52f0b6c4a452419082fa144efcf70d5c.png"></p><p>5.选择【绑定的弹性公网IP】选项卡，点击强制解绑。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191659535.png"></p><p>6.点击【刷新】按钮，可以看到，绑定的eip已被解绑。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/ovurciethbfzk_cecbdf32fcbe4e5589840a021bfd6cba.png"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-实验1:开通ECS</title>
    <link href="/2024/01/19/ACA-%E5%AE%9E%E9%AA%8C1-%E5%BC%80%E9%80%9AECS/"/>
    <url>/2024/01/19/ACA-%E5%AE%9E%E9%AA%8C1-%E5%BC%80%E9%80%9AECS/</url>
    
    <content type="html"><![CDATA[<ul><li>掌握如何配置ECS安全组</li><li>掌握如何连接ECS</li><li>掌握如何使用ECS配置Apache服务</li><li>掌握如何释放ECS</li></ul><p><strong>1.开通ECS</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190056102.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190056092.png"></p><p><strong>2.远程连接</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190057339.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190057196.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190058852.png"></p><p><strong>3.配置Apache服务</strong></p><p>3.1 安装Apache 服务</p><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y httpd<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190100896.png"></p><p>显示Complete 说明安装完成</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190100907.png"></p><p>3.2 启动 Apache服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> httpd<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190101521.png"></p><p>说明：httpd为apache服务名，启动httpd即启动apache服务。</p><p>3.3 设置Apache服务开机自启动</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> httpd<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190101814.png"></p><p>3.4 查询Apache 服务是否处于运行中状态。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status httpd</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190101275.png"></p><p>3.5 访问Apache服务</p><p>在当前浏览器页面，新开启一个网页，在地址栏输入实例的公网 IP 地址，并回车。</p><p>首先从ECS实例页面获取公网 IP 地址：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190102043.png"></p><p>打开浏览区，输入公网 IP 地址：<a href="http://0.0.0.121/">http://121</a>,40.xx.xx</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/wtvjf5x6bk4vq_067af0f0f6db4c17af0eb78e73be54bb.png"></p><p>【注意事项】公网地址请替换为自己ECS 创建的真实地址。</p><p><strong>4.配置安全组</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190058264.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190059994.png"></p><p><strong>5.释放ECS实例</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190103521.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190103680.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190103818.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190103087.png"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-软件管理</title>
    <link href="/2023/10/09/Linux-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2023/10/09/Linux-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-软件运行和编译"><a href="#1-软件运行和编译" class="headerlink" title="1 软件运行和编译"></a>1 软件运行和编译</h1><p><strong>ABI</strong>    应用户程序的二进制接口（ Windows[PE] 与 Linux[ELF] 不兼容）</p><figure class="highlight tcl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment">#查看文件二进制格式</span><br><span class="hljs-keyword">file</span> <span class="hljs-keyword">filename</span><br></code></pre></td></tr></table></figure><p><strong>API</strong>    应用程序开发接口  POSIX标准</p><p>c语言程序实现过程：源代码 -&gt; 预处理 -&gt; 编译 -&gt; 汇编 -&gt; 链接</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">#一步实现编译<span class="hljs-keyword">c</span>语言源代码<span class="hljs-punctuation">,</span>生成可执行文件<br>gcc hello.<span class="hljs-keyword">c</span> -o hello<br></code></pre></td></tr></table></figure><p><strong>静态链接与动态链接</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta">#查看程序运行过程中依赖的第三方程序库</span><br><span class="hljs-keyword">ldd</span> hello<br></code></pre></td></tr></table></figure><h1 id="2-软件包和包管理器"><a href="#2-软件包和包管理器" class="headerlink" title="2 软件包和包管理器"></a>2 软件包和包管理器</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Centos</span> Rocky：rpm文件、rpm、yum（dnf）<br>Ubuntu：deb文件、dpkg、apt<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">#利用 cpio 工具查看包文件列表</span><br>rpm2cpio 包文件 | cpio -itv      <span class="hljs-comment">#预览保内文件</span><br>rpm2cpio 包文件 | cpio -<span class="hljs-built_in">id</span><span class="hljs-string">&quot;*.conf&quot;</span>    <span class="hljs-comment">#释放包内文件</span><br></code></pre></td></tr></table></figure><p><strong>相关文件</strong></p><ul><li>包文件组成：保内文件；元数据；包安装或缺卸时运行的脚本</li><li>数据库（公共）：/var/lib/rpm：程序包名称及版本、依赖关系、功能说明、包安装后生成的个文件路径及效验码信息</li></ul><p><a href="http://www.elrepo.org/">http://www.elrepo.org</a>    支持最新的内核和硬件相关包</p><p><a href="https://wiki.centos.org/SpecialInterestGroup/SCLo">https://wiki.centos.org/SpecialInterestGroup/SCLo</a>    提供较高版本的第三方软件包</p><h1 id="3-rpm包管理器"><a href="#3-rpm包管理器" class="headerlink" title="3 rpm包管理器"></a>3 rpm包管理器</h1><p>功能：安装（ -ivh ）、升级（-u）、卸载（ -e ）、<strong>查询</strong>（ -q ）、校验（-k）、数据库维护</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> $?      #<span class="hljs-number">0</span>表示安装成功，非<span class="hljs-number">0</span>表示未安装成功<br></code></pre></td></tr></table></figure><p><strong>查询</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ldif">rpm -q 包        <span class="hljs-comment">#支持通配符</span><br><br><span class="hljs-literal">-</span>qa    <span class="hljs-comment">#所有包</span><br><span class="hljs-literal">-</span>ql包名   <span class="hljs-comment">#程序包安装后生成的所有文件</span><br><span class="hljs-literal">-</span>qi包名   <span class="hljs-comment">#查看包的信息</span><br><span class="hljs-literal">-</span>qf文件名      <span class="hljs-comment">#查看文件所属的包</span><br><span class="hljs-literal">-</span>qc包名   <span class="hljs-comment">#只查看配置文件</span><br><span class="hljs-literal">-</span>-scripts    <span class="hljs-comment">#查看包自带的脚本</span><br><br><span class="hljs-comment">#查看最近安装的包</span><br>rpm -qa --last|head<br></code></pre></td></tr></table></figure><p><strong>包效验</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rpm</span> -qa <span class="hljs-string">&quot;gpg-pubkey*&quot;</span><span class="hljs-comment">#查看秘钥</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rpm</span> -V 包名<span class="hljs-comment">#查看包本件是否被改动过</span><br></code></pre></td></tr></table></figure><p><strong>数据库维护</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>lib/rpm       <span class="hljs-comment">#rpm数据库文件</span><br></code></pre></td></tr></table></figure><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">rpm</span> <span class="hljs-built_in">--initdb</span><span class="hljs-comment">#初始化</span><br><span class="hljs-string">rpm</span> <span class="hljs-built_in">--rebuilddb</span><span class="hljs-comment">#重建包头的数据库索引目录</span><br></code></pre></td></tr></table></figure><h1 id="4-yum-和-dnf"><a href="#4-yum-和-dnf" class="headerlink" title="4 yum 和 dnf"></a>4 yum 和 dnf</h1><h2 id="4-1-yum客户端配置"><a href="#4-1-yum客户端配置" class="headerlink" title="4.1 yum客户端配置"></a>4.1 yum客户端配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/yum</span>.conf<span class="hljs-comment">#为所有仓库提供公共配置</span><br><span class="hljs-regexp">/etc/yum</span>.repos.d/*.repo<span class="hljs-comment">#为每个仓库的提供配置文件</span><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">man</span> 5 yum.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p><strong>相关变量</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">yum的repo配置文件中可用的变量：<br><span class="hljs-meta"><span class="hljs-keyword">$releasever</span>：当前OS的发行版的主版本号，如：8,7,6</span><br><span class="hljs-meta"><span class="hljs-keyword">$arch</span>：CPU架构，如：拱门64，i586，我686，x86_64等</span><br><span class="hljs-meta"><span class="hljs-keyword">$basearch</span>：系统基础平台；i386，x86_64</span><br><span class="hljs-meta"><span class="hljs-keyword">$contentdir</span>：表示目录，比如：centos-8，centos-7</span><br><span class="hljs-meta"><span class="hljs-keyword">$YUM0</span>-$YUM9：自定义变量</span><br></code></pre></td></tr></table></figure><h2 id="4-2-yum命令"><a href="#4-2-yum命令" class="headerlink" title="4.2 yum命令"></a>4.2 yum命令</h2><p><strong>安装</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> 软件<br></code></pre></td></tr></table></figure><p><strong>卸载</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum <span class="hljs-built_in">remove</span> 软件<br></code></pre></td></tr></table></figure><h3 id="4-2-1-显示仓库列表"><a href="#4-2-1-显示仓库列表" class="headerlink" title="4.2.1 显示仓库列表"></a>4.2.1 显示仓库列表</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum repolist -v</span><br></code></pre></td></tr></table></figure><h3 id="4-2-2-显示程序包"><a href="#4-2-2-显示程序包" class="headerlink" title="4.2.2 显示程序包"></a>4.2.2 显示程序包</h3><p><strong>查看指定的包</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">yum <span class="hljs-type">list</span> 包<br></code></pre></td></tr></table></figure><p><strong>查看已安装的包</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">yum list installed<span class="hljs-string">|head</span><br></code></pre></td></tr></table></figure><p><strong>查看可安装的包</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">yum list available<span class="hljs-string">|head</span><br></code></pre></td></tr></table></figure><h3 id="4-2-3-安装程序包"><a href="#4-2-3-安装程序包" class="headerlink" title="4.2.3 安装程序包"></a>4.2.3 安装程序包</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum install <span class="hljs-keyword">package</span><br><span class="hljs-title">yum reinstall <span class="hljs-keyword">package</span></span><br><span class="hljs-comment">--downloadonly</span><br><span class="hljs-comment">--downloaddir=&lt;path&gt;,--destdir=&lt;path&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-3-1-安装-EPEL-源包"><a href="#4-2-3-1-安装-EPEL-源包" class="headerlink" title="4.2.3.1 安装 EPEL 源包"></a>4.2.3.1 安装 EPEL 源包</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">yum -y install epel-release<br></code></pre></td></tr></table></figure><h4 id="4-2-3-2-安装-SCL-源包"><a href="#4-2-3-2-安装-SCL-源包" class="headerlink" title="4.2.3.2 安装 SCL 源包"></a>4.2.3.2 安装 SCL 源包</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>centos-release-<span class="hljs-keyword">scl </span>-y<br></code></pre></td></tr></table></figure><h4 id="4-2-3-3-生成最新内核"><a href="#4-2-3-3-生成最新内核" class="headerlink" title="4.2.3.3 生成最新内核"></a>4.2.3.3 生成最新内核</h4><p><a href="http://www.elrepo.org/">http://www.elrepo.org</a>    支持最新的内核和硬件相关包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install https://www.elrepo.org/elrepo-release-<span class="hljs-number">7</span>.<span class="hljs-number">0</span>- <span class="hljs-number">4</span>.el7.elrepo.noarch.rpm<br></code></pre></td></tr></table></figure><h4 id="4-2-3-4-只下载相关的依赖包，而不安装"><a href="#4-2-3-4-只下载相关的依赖包，而不安装" class="headerlink" title="4.2.3.4 只下载相关的依赖包，而不安装"></a>4.2.3.4 只下载相关的依赖包，而不安装</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum -y install --downloadonly --downloaddir=<span class="hljs-regexp">/data/</span>httpd httpd<br><span class="hljs-regexp">/data/</span>httpd 下载到的指定文件夹             httpd 需要下载的包<br></code></pre></td></tr></table></figure><p>下载包也可以通过启用配置文件实现</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># cat /etc/yum.conf</span><br><span class="hljs-section">[main]</span><br><span class="hljs-attr">cachedir</span>=/var/cache/yum/<span class="hljs-variable">$basearch</span>/<span class="hljs-variable">$releasever</span>  <span class="hljs-comment">#缓存路径</span><br><span class="hljs-attr">keepcache</span>=<span class="hljs-number">1</span>    <span class="hljs-comment">#如果为1,则下载rpm并缓存下来,不删除,默认安装rpm后会删除rpm包</span><br></code></pre></td></tr></table></figure><h3 id="4-2-4-升级和降级"><a href="#4-2-4-升级和降级" class="headerlink" title="4.2.4 升级和降级"></a>4.2.4 升级和降级</h3><p><strong>检查可用升级</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">yum <span class="hljs-keyword">check</span>-<span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p><strong>升级和降级</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum upgrade <span class="hljs-keyword">package</span><br><span class="hljs-title">yum downgrade <span class="hljs-keyword">package</span></span><br>yum upgrade-minimal#最小化升级<br></code></pre></td></tr></table></figure><h3 id="4-2-5-查询"><a href="#4-2-5-查询" class="headerlink" title="4.2.5 查询"></a>4.2.5 查询</h3><p><strong>查看程序包</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">yun</span> <span class="hljs-literal">info</span> [...]<br></code></pre></td></tr></table></figure><p><strong>查看指定的特性是由哪个程序包所提供</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">yum</span> provides / whatprovides feature<span class="hljs-comment">#文件要写全路径,而不只是文件名,否则可能无法查询到</span><br></code></pre></td></tr></table></figure><p><strong>以指定的关键字搜索程序包名及summary信息</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yum <span class="hljs-built_in">search</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p><strong>查看指定包所依赖的capabilities</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">yum deplist <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><p><strong>查看未安装包的文件列表</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">dnf repoquery -l 包名            <span class="hljs-comment">#Centos8</span><br><br>yum -y <span class="hljs-keyword">install</span> yum-utils<br>repoquery -ql 包名<br></code></pre></td></tr></table></figure><h3 id="4-2-6-仓库缓存"><a href="#4-2-6-仓库缓存" class="headerlink" title="4.2.6 仓库缓存"></a>4.2.6 仓库缓存</h3><p><strong>清除目录/var/cache/yum/缓存</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum clean <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p><strong>构建缓存</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum makecache</span><br></code></pre></td></tr></table></figure><h3 id="4-2-7-查看yum事务历史"><a href="#4-2-7-查看yum事务历史" class="headerlink" title="4.2.7 查看yum事务历史"></a>4.2.7 查看yum事务历史</h3><p><strong>日志文件</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#CentOS <span class="hljs-number">7</span>以前版本日志 <br>/<span class="hljs-built_in">var</span>/<span class="hljs-keyword">log</span>/yum.<span class="hljs-keyword">log</span> <br><br>#CentOS <span class="hljs-number">8</span> 版本日志 <br>/<span class="hljs-built_in">var</span>/<span class="hljs-keyword">log</span>/dnf.rpm.<span class="hljs-keyword">log</span> <br>/<span class="hljs-built_in">var</span>/<span class="hljs-keyword">log</span>/dnf.<span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><p><strong>日志命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum <span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure><h3 id="4-2-8-查看包的安全警报"><a href="#4-2-8-查看包的安全警报" class="headerlink" title="4.2.8 查看包的安全警报"></a>4.2.8 查看包的安全警报</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">yum updateinfo <span class="hljs-keyword">summary</span> / list / <span class="hljs-keyword">info</span> / <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><h3 id="4-2-9-包组的管理"><a href="#4-2-9-包组的管理" class="headerlink" title="4.2.9 包组的管理"></a>4.2.9 包组的管理</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">yum grouplist   <span class="hljs-comment">#查看所有包组信息</span><br>yum groupinstall <span class="hljs-keyword">group</span><br><span class="hljs-title">yum</span> groupupdate <span class="hljs-keyword">group</span><br><span class="hljs-title">yum</span> groupremove <span class="hljs-keyword">group</span><br><span class="hljs-title">yum</span> group<span class="hljs-literal">inf</span>o group<br></code></pre></td></tr></table></figure><h3 id="4-2-10-实现私用-yum-仓库"><a href="#4-2-10-实现私用-yum-仓库" class="headerlink" title="4.2.10 实现私用 yum 仓库"></a>4.2.10 实现私用 yum 仓库</h3><h3 id="4-2-11-yum-失败的主要原因"><a href="#4-2-11-yum-失败的主要原因" class="headerlink" title="4.2.11 yum 失败的主要原因"></a>4.2.11 yum 失败的主要原因</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum 的配置文件格式或路径错误-&gt;检查<span class="hljs-regexp">/etc/yum.repos.d/</span>*.repo文件格式<br>yum metadata过旧-&gt;yum clean all 清理缓存<br>yum 源出问题、网络不通-&gt;网卡配置<br></code></pre></td></tr></table></figure><h1 id="5-程序包编译"><a href="#5-程序包编译" class="headerlink" title="5 程序包编译"></a>5 程序包编译</h1><p>源代码 -&gt; 预处理 -&gt; 编译 -&gt; 汇编 -&gt; 链接</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#基于最小化安装的系统建议安装下面相关包</span><br>yum <span class="hljs-keyword">install </span>gcc make autoconf gcc-c++ glibc glibc-devel pcre pcre-devel openssl  openssl-devel systemd-devel zlib-devel vim lrzsz tree tmux lsof tcpdump wget  net-tools iotop <span class="hljs-keyword">bc </span><span class="hljs-keyword">bzip2 </span>zip unzip nfs-utils man-pages<br></code></pre></td></tr></table></figure><p><strong>编译安装步骤</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">运行 configure 脚本，生成 Makefile 文件     ./configure --<span class="hljs-keyword">help</span><br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">二进制程序目录导入至PATH环境变量中编辑文件<span class="hljs-regexp">/etc/</span>profile.d<span class="hljs-regexp">/NAME.shexport PATH=/</span>PATH<span class="hljs-regexp">/TO/</span>BIN:<span class="hljs-variable">$PATH</span><br>创建相关的用户及文件<br>编辑<span class="hljs-regexp">/etc/m</span>an.config|man_db.conf文件,添加一个MANPATH<br></code></pre></td></tr></table></figure><h1 id="6-Ubuntu-软件管理"><a href="#6-Ubuntu-软件管理" class="headerlink" title="6 Ubuntu 软件管理"></a>6 Ubuntu 软件管理</h1><p><strong>dpkg</strong> 相当于rpm，不支持包的依赖关系</p><p><strong>apt</strong> 相当于yum，支持包的依赖关系</p><h2 id="6-1-dpkg-包管理器"><a href="#6-1-dpkg-包管理器" class="headerlink" title="6.1 dpkg 包管理器"></a>6.1 dpkg 包管理器</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">man dpkg</span><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">#删除包</span><br>dpkg -P <span class="hljs-keyword">package</span><br><br><span class="hljs-meta">#搜索包含pattern的包，类似于rpm -qf</span><br>dpkg -S &lt;pattern&gt;<br><br><span class="hljs-meta">#显示该包的简要说明</span><br>dpkg -l <span class="hljs-keyword">package</span><br><br><span class="hljs-meta">#列出该包中所包含的文件,类似rpm –ql</span><br>dpkg -L <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><h2 id="6-2-apt"><a href="#6-2-apt" class="headerlink" title="6.2 apt"></a>6.2 apt</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">apt <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span>apt list<br>apt purge <span class="hljs-comment">#移除软件包及配置文件</span><br>apt update<span class="hljs-comment">#刷新存储库索引</span><br>apt upgrade<span class="hljs-comment">#升级所有软件包</span><br>apt search<span class="hljs-comment">#搜索应用程序</span><br>apt <span class="hljs-keyword">show</span><span class="hljs-comment">#显示安装细节</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">apt <span class="hljs-literal">-y</span> install apt<span class="hljs-operator">-file</span><br>apt update<br>apt<span class="hljs-operator">-file</span> search <span class="hljs-literal">-x</span> <span class="hljs-string">&#x27;正则表达式&#x27;</span> <span class="hljs-operator">-F</span> filename<br>apt<span class="hljs-literal">-cache</span> madison 包名     <span class="hljs-comment">#查看包的版本</span><br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-网络协议和管理配置</title>
    <link href="/2023/09/28/Linux-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/28/Linux-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>网络通信过程</strong></p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs">路由<br>ARP<br>三次握手<br>数据通信<br>四次挥手<br></code></pre></td></tr></table></figure><h1 id="1-网络基础"><a href="#1-网络基础" class="headerlink" title="1 网络基础"></a>1 网络基础</h1><p> <strong>网络功能和优点</strong></p><ul><li>数据和应用程序</li><li>资源</li><li>网络存储</li><li>备份设备</li></ul><p><strong>作用范围分类</strong></p><ul><li>广域网WAN</li><li>城域网MAN</li><li>局域网LAN</li></ul><p><strong>常见物理组件</strong>：路由器、交换机、PC</p><h2 id="1-1-网络应用程序"><a href="#1-1-网络应用程序" class="headerlink" title="1.1 网络应用程序"></a><strong>1.1 网络应用程序</strong></h2><ul><li>Web浏览器</li><li>即时消息（微信）</li><li>电子邮件</li><li>协作（视频会议、VNC）</li><li>web网络服务（apache、nginx）</li><li>文件网络服务（ftp、nfs）</li><li>数据库服务（MySQL）</li><li>中间件服务（Tomcat）</li><li>安全服务</li></ul><p><strong>应用程序对网络的要求</strong></p><ul><li>批处理应用程序<ul><li>FTP、TFTP、库存更新</li><li>无需直接人工交互</li><li>宽带很重要，但并非关键性因素</li></ul></li><li>交互式应用程序<ul><li>库存查询、数据库更新</li><li>人机交互</li><li>因为用户需等待响应，所以响应时间很重要，但并非关键性因素，除非要等待时间较长</li></ul></li><li>实时应用程序<ul><li>视频</li><li>人与人交互</li><li>端到端的延时至关重要</li></ul></li></ul><h2 id="1-2-网络的特性"><a href="#1-2-网络的特性" class="headerlink" title="1.2 网络的特性"></a>1.2 网络的特性</h2><ul><li>速度</li><li>成本</li><li>安全性</li><li>可靠性</li><li>可用性</li><li>可拓展性</li><li>拓扑：计算机网络的拓扑结构是指一个网络的通信链路和计算机结点相互连接构成的几何图形<ul><li>拓扑分类：<ul><li>物理拓扑：物理设备的布线方式</li><li>逻辑拓扑：信息在网络中流动的方式</li></ul></li><li>拓扑结构：<ul><li>总线拓扑</li><li>（拓展）星型拓扑</li><li>环状拓扑</li><li>双环拓扑</li><li>全网状拓扑</li><li>部分网状拓扑</li></ul></li></ul></li></ul><h2 id="1-3-网络标准"><a href="#1-3-网络标准" class="headerlink" title="1.3 网络标准"></a>1.3 网络标准</h2><p>OSI七层结构：“<strong>物数网传会表应</strong>”</p><p>物理层 -&gt; 数据链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 会话层 -&gt; 表示层 -&gt; 应用层</p><p><strong>PDU：协议数据单元是指对等层次之间传递的数据单位</strong></p><ul><li>物理层PDU：数据位 bit</li><li>数据链路层PDU：数据帧 frame</li><li>网络层PDU：数据包 packet</li><li>传输层PDU：数据段 segment</li><li>其他更高层次PDU：消息 message</li></ul><p><strong>三种通讯模式：</strong>单播、广播、多播            注意：冲突域、广播域</p><p><strong>三种通讯机制：</strong>单工通信(收音机)、半双工通信(对讲机)、全双工通信(手机)</p><h1 id="2-局域网"><a href="#2-局域网" class="headerlink" title="2 局域网"></a>2 局域网</h1><p><strong>特点</strong>：网络为一个单位所拥有；地理范围和站点数目有限。</p><p><strong>主要功能</strong>：资源共享和数据通信。</p><p><strong>优点：</strong>  能方便地共享昂贵的外部设备,主机以及软件、数据，从一个站点可以访问全网；便于系统的扩展和逐渐演变,各设备的位置可灵活的调整和改变；提高系统的可靠性、可用性和易用性。</p><p>中国国家无线网络标准：WAPI</p><p>Wi-Fi：无线保真（无线保真度），是Wi-Fi联盟制造商的商标做为产品的品牌认证，是一个创建于IEEE 802.11标准的无线局域网技术，Wi-Fi联盟成立于1999年，当时的名称叫做Wireless以太网兼容性联盟（WECA）。在2002年10月，正式改名为Wi-Fi联盟。</p><p>超五类线 — 当前应用最广泛的网线。</p><p><strong>中继器 repeater</strong> — 实际上是一种信号放大器。</p><p><strong>集线器 hub</strong> — 共享宽带、半双工。（基本淘汰）</p><p><strong>网桥 Bridge</strong> — 物理层</p><p><strong>交换机 switch</strong> — 数据链路层</p><p><strong>路由器 router</strong> — 网络层、分隔广播域和冲突域、选择路由表中到达目标最好的路径、连接广域网</p><p><strong>以太网技术</strong></p><p>各大厂商MAC识别码：<a href="http://standards-oui.ieee.org/oui/oui.txt">http://standards-oui.ieee.org/oui/oui.txt</a></p><p><strong>VLAN 技术</strong>— 虚拟局域网、隔离广播域  trunk干道</p><p><strong>VXLAN技术</strong> — 云环境虚拟局域网</p><p>分层的网络架构：访问层(终端接入)-&gt;分布层(广播域、路由、安全、远程接入、访问层汇聚)-&gt;核心层(快速转发) </p><h1 id="3-TCP-IP-协议栈"><a href="#3-TCP-IP-协议栈" class="headerlink" title="3 TCP/IP 协议栈"></a>3 TCP/IP 协议栈</h1><p>TCP/IP是一个Protocol Stack，包括TCP、IP、UDP、ICMP、RIP、TELNET、FTP、SMTP、ARP等许多协议。</p><p>TCP/IP 4层模型：网络接口层、互联网层、<strong>传输层</strong>、应用层</p><p>TCP/IP 5层模型：物理层、数据链路层、互联网层、<strong>传输层</strong>、应用层</p><p>OSI 7层模型：物理层、数据链路层、网络层、<strong>传输层</strong>、会话层、表示层、应用层</p><p>RFC 文档: <a href="https://www.ietf.org/rfc/rfc1122#section-1.3.3">https://www.ietf.org/rfc/rfc1122#section-1.3.3</a></p><p>传输层：TCP(可靠的)   UDP(高效的)</p><p><strong>TCP/IP和OSI模型的比较</strong> </p><ul><li>相同点 <ul><li>两者都是以协议栈的概念为基础 </li><li>协议栈中的协议彼此相互独立 </li><li>下层对上层提供服务 </li></ul></li><li>不同点 <ul><li>OSI是先有模型；TCP/IP是先有协议,后有模型 </li><li>OSI是国际标准,适用于各种协议栈；TCP/IP实际标准,只适用于TCP/IP网络 </li><li>层次数量不同</li></ul></li></ul><h2 id="3-1-TCP-transport层"><a href="#3-1-TCP-transport层" class="headerlink" title="3.1 TCP  transport层"></a>3.1 TCP  transport层</h2><h3 id="3-1-1-TCP特性"><a href="#3-1-1-TCP特性" class="headerlink" title="3.1.1 TCP特性"></a>3.1.1 TCP特性</h3><ul><li>工作在传输层 </li><li>面向连接协议 </li><li>全双工协议 </li><li>半关闭 </li><li>将数据打包成段,排序 </li><li>确认机制 </li><li>数据恢复,重传 </li><li>错误检查 </li><li>流量控制,滑动窗口 </li><li>拥塞控制,慢启动和拥塞避免算法 </li><li>更多关于tcp的内核参数,可参看man 7 tcp</li></ul><h3 id="3-1-2-TCP包头结构"><a href="#3-1-2-TCP包头结构" class="headerlink" title="3.1.2 TCP包头结构"></a>3.1.2 TCP包头结构</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202310182246919.png" alt="屏幕截图 2023-10-18 223123"></p><p><strong>ACK</strong>：表示是否前面确认号字段是否有效.只有当ACK=1时,前面的确认号字段才有效.TCP规 定,连接建立后,ACK必须为1,带ACK标志的TCP报文段称为确认报文段</p><p><strong>SYN</strong>：在建立连接时使用,用来同步序号.当SYN=1,ACK=0时,表示这是一个请求建立连接的报 文段；当SYN=1,ACK=1时,表示对方同意建立连接.SYN=1,说明这是一个请求建立连接或同意 建立连接的报文.只有在前两次握手中SYN才置为1,带SYN标志的TCP报文段称为同步报文段</p><p><strong>seq</strong>：序列号（seq）用于标记数据段的顺序。占4个字节，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。</p><h3 id="3-1-3-TCP协议PORT"><a href="#3-1-3-TCP协议PORT" class="headerlink" title="3.1.3 TCP协议PORT"></a>3.1.3 TCP协议PORT</h3><ul><li>0-1023    系统端口或特权端口（仅root）[ 22/tcp(ssh)    80/tcp(http)    433/tcp(https)]</li><li>1024-49151    用户端口或注册端口 [1433/tcp(SqlSever)    1521/tcp(oracle)   3306/tcp(mysql)    11211/tcp/udp(memcached)]</li><li>49152-65535   动态或私有端口，客户端随机使用端口 范围定义：/proc/sys/net/ipv4/ip_local_portZ_range</li></ul><p><strong>查看常见服务端口号</strong>  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>services<br></code></pre></td></tr></table></figure><h3 id="3-1-4-三次握手和四次挥手"><a href="#3-1-4-三次握手和四次挥手" class="headerlink" title="3.1.4 三次握手和四次挥手"></a>3.1.4 三次握手和四次挥手</h3><h4 id="3-1-4-1-三次握手"><a href="#3-1-4-1-三次握手" class="headerlink" title="3.1.4.1 三次握手"></a><strong>3.1.4.1 三次握手</strong></h4><ol><li><strong>第一次握手</strong>：客户端发送一个连接请求消息到服务端。服务端收到这个消息后，知道客户端和自己可以连接，但此时客户端并不知道服务端是否已经接收到了它的请求。</li><li><strong>第二次握手</strong>：服务端收到消息后的应答，客户端得到服务端的反馈后，才确定自己与服务端是可以连接上的。</li><li><strong>第三次握手</strong>：客户端再次向服务端发送一个确认消息，确认服务端已经收到了自己的连接请求，这时才正式建立连接。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202310200014912.png" alt="截图__2023-10-20-00-13-43"></p><h4 id="3-1-4-2-四次挥手"><a href="#3-1-4-2-四次挥手" class="headerlink" title="3.1.4.2 四次挥手"></a>3.1.4.2 四次挥手</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202310200022834.png" alt="截图__2023-10-20-00-21-57"></p><h3 id="3-1-5-sync半连接和accept全连接队列"><a href="#3-1-5-sync半连接和accept全连接队列" class="headerlink" title="3.1.5 sync半连接和accept全连接队列"></a>3.1.5 sync半连接和accept全连接队列</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/tcp_max_syn_backlog<span class="hljs-comment">#未完成连接队列大小，默认值128，建议调整大小为1024以上</span><br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/</span>core/somaxconn<span class="hljs-comment">#完成连接队列大小，默认值128，建议调整大小为1024以上</span><br></code></pre></td></tr></table></figure><h3 id="3-1-6-TCP超时重传"><a href="#3-1-6-TCP超时重传" class="headerlink" title="3.1.6 TCP超时重传"></a>3.1.6 TCP超时重传</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/tcp_retries1 <span class="hljs-comment">#指定在底层IP接管之前TCP最少执行的重传次数,默认值是 3 </span><br><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/tcp_retries2 <span class="hljs-comment">#指定连接放弃前TCP最多可以执行的重传次数,默认值15 (一般对应13~30min)</span><br></code></pre></td></tr></table></figure><h3 id="3-1-7-拥塞控制"><a href="#3-1-7-拥塞控制" class="headerlink" title="3.1.7 拥塞控制"></a>3.1.7 拥塞控制</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/tcp_congestion_control<br></code></pre></td></tr></table></figure><h3 id="3-1-8-内核TCP参数优化"><a href="#3-1-8-内核TCP参数优化" class="headerlink" title="3.1.8 内核TCP参数优化"></a>3.1.8 内核TCP参数优化</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">man</span> <span class="hljs-number">7</span> tcp<br></code></pre></td></tr></table></figure><p><strong>编辑文件/etc/sysctl.conf</strong>，加入以下内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_fin_timeout</span> = <span class="hljs-number">2</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_reuse</span> = <span class="hljs-number">1</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_recycle</span> = <span class="hljs-number">1</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_syncookies</span> = <span class="hljs-number">1</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_keepalive_time</span> = <span class="hljs-number">600</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.ip_local_port_range</span> = <span class="hljs-number">2000</span> <span class="hljs-number">65000</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_syn_backlog</span> = <span class="hljs-number">16384</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_tw_buckets</span> = <span class="hljs-number">36000</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.route</span><span class="hljs-selector-class">.gc_timeout</span> = <span class="hljs-number">100</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_syn_retries</span> = <span class="hljs-number">1</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_synack_retries</span> = <span class="hljs-number">1</span> <br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_orphans</span> = <span class="hljs-number">16384</span> <br>net<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.somaxconn</span> = <span class="hljs-number">16384</span> <br>net<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.netdev_max_backlog</span> = <span class="hljs-number">16384</span><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sysctl -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><h2 id="3-2-UDP-transport层"><a href="#3-2-UDP-transport层" class="headerlink" title="3.2 UDP  transport层"></a>3.2 UDP  transport层</h2><ul><li>工作在传输层 </li><li>提供不可靠的网络访问 </li><li>非面向连接协议 </li><li>有限的错误检查 </li><li>传输性能高 </li><li>无数据恢复特性 </li></ul><p>更多关于udp的内核参数,可参看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">man</span> <span class="hljs-number">7</span> udp<br></code></pre></td></tr></table></figure><h2 id="3-3-ICMP-Internet层"><a href="#3-3-ICMP-Internet层" class="headerlink" title="3.3  ICMP Internet层"></a>3.3  ICMP Internet层</h2><p>控制消息协议——探测网络状态</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span><br></code></pre></td></tr></table></figure><h2 id="3-4-ARP-Internet层"><a href="#3-4-ARP-Internet层" class="headerlink" title="3.4 ARP Internet层"></a>3.4 ARP Internet层</h2><p>地址解析协议——将IP地址解析成MAC地址</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#查看arp表</span><br><span class="hljs-attribute">arp</span> -n<br></code></pre></td></tr></table></figure><p><strong>ARP静态绑定可以防止ARP欺骗</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arp</span> -s <span class="hljs-number">10.0.0.6</span> <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">32</span>:<span class="hljs-number">80</span>:<span class="hljs-number">38</span><br></code></pre></td></tr></table></figure><h2 id="3-5-Gratuitious-ARP-Internet层"><a href="#3-5-Gratuitious-ARP-Internet层" class="headerlink" title="3.5 Gratuitious ARP  Internet层"></a>3.5 Gratuitious ARP  Internet层</h2><p>免费ARP——检查地址冲突</p><h2 id="3-6-RARP-Internet层"><a href="#3-6-RARP-Internet层" class="headerlink" title="3.6 RARP Internet层"></a>3.6 RARP Internet层</h2><p>反向地址解析协议——将MAC转化成IP</p><h2 id="3-7-internet协议-Internet层"><a href="#3-7-internet协议-Internet层" class="headerlink" title="3.7 internet协议  Internet层"></a>3.7 internet协议  Internet层</h2><ul><li>运行于OSI网络层</li><li>面向无连接的协议</li><li>独立处理数据包</li><li>分层编址</li><li>尽力而为传输</li><li>无数据恢复功能</li></ul><p><img src="%E6%88%AA%E5%9B%BE__2023-10-21-16-02-34.png" alt="截图__2023-10-21-16-02-34"></p><p><strong>查看IP冲突的主机</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">arping</span> <span class="hljs-built_in">IP</span><br></code></pre></td></tr></table></figure><h1 id="4-IP地址"><a href="#4-IP地址" class="headerlink" title="4 IP地址"></a>4 IP地址</h1><ul><li>网络ID：标识网络。每个网段分配一个网络ID，处于高位</li><li>主机ID：标识单个主机，由组织分配给各设备，处于低位</li></ul><p>IP地址唯一标识网络设备，可以实现逻辑的管理功能</p><p>IP = 网络ID + 主机ID</p><p>网络ID ：标识网络地址</p><p>主机ID ：标识主机</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">网络数 = <span class="hljs-number">2</span>^可变的网络ID位数<br>主机数 = <span class="hljs-number">2</span>^主机ID位数 - <span class="hljs-number">2</span><br>网络ID = <span class="hljs-built_in">IP</span>地址“与”子网掩码netmask<br></code></pre></td></tr></table></figure><p>网络计算器：<a href="https://www.sojson.com/convert/subnetmask.html">https://www.sojson.com/convert/subnetmask.html</a></p><h2 id="4-1-IP地址分类"><a href="#4-1-IP地址分类" class="headerlink" title="4.1 IP地址分类"></a>4.1 IP地址分类</h2><p>A类：0-127.X.X.X             高8位是网络ID             0开头表示未知地址，127开头表示回环地址    </p><p>0XXXXXXX    126个A类网络</p><p>最多的主机数 = 2^24 - 2 = 16777214</p><p>B类：128-191.X.X.X        高16位是网络ID</p><p>10XXXXXX.XXXXXXXX    网络数 = 2^14 = 16384    </p><p>最多的主机数 = 2^16 - 2 = 65534    </p><p>C类：192-223.X.X.X        高24位是网络ID</p><p>110XXXXX.XXXXXXXX.XXXXXXXX    网络数 = 2^21 = 2097152</p><p>最多的主机数 = 2^8 - 2 = 254</p><p>D类：224-239.X.X.X        </p><p><strong>不分类的IP地址</strong></p><p>网咯ID的位数按需分配——CIDR表示法，可以表示网络ID的位数，格式：IP/网络ID的位数</p><p>netmask子网掩码：可以表示网络ID位数，32bit二进制，对应于网络ID的位为1，对应于主机ID的位为0</p><h2 id="4-2-公共和私有IP地址"><a href="#4-2-公共和私有IP地址" class="headerlink" title="4.2 公共和私有IP地址"></a>4.2 公共和私有IP地址</h2><p><strong>私有IP地址</strong></p><table><thead><tr><th align="center"><strong>A</strong></th><th align="center">10.0.0.0 ~ 10.255.255.255</th></tr></thead><tbody><tr><td align="center"><strong>B</strong></td><td align="center"><strong>172.16.0.0 ~ 172.31.255.255</strong></td></tr><tr><td align="center"><strong>C</strong></td><td align="center"><strong>192.168.0.0 ~ 192.168.255.255</strong></td></tr></tbody></table><h2 id="4-3-特殊地址"><a href="#4-3-特殊地址" class="headerlink" title="4.3 特殊地址"></a>4.3 特殊地址</h2><ul><li><p>0.0.0.0      表示所有不清楚的主机和目的网络</p></li><li><p>255.255.255.2555</p><p>  限制广播地址。对本机来说，这个地址值本网段内(同一广播域)的所有主机</p></li><li><p>127.0.0.1 ~ 172.255.255.254</p><p>  本机回环地址，主要用于测试。</p></li><li><p>224.0.0.0 ~ 239.255.255.255</p><p>  组播地址，224.0.0.1特指所有主机，224.0.0.2特指所有路由器。224.0.0.5指OSPF路由器，地址多用于一些特定的程序以及多媒体程序</p></li><li><p>169.254.x.x</p><p>  Windows主机使用DHCP自动分配IP地址</p></li></ul><h2 id="4-4-划分子网"><a href="#4-4-划分子网" class="headerlink" title="4.4 划分子网"></a>4.4 划分子网</h2><p>划分子网：网络ID向主机借位，如果借N位，则划分2^N个子网。</p><p>合并超网：将多个小网络合并成一个大网，主机ID向网络ID借位，主要实现路由聚合功能</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dns">中国移动<span class="hljs-number">10.0.0.0</span>/<span class="hljs-number">8</span> 给<span class="hljs-number">32</span>个各省公司划分对应的子网 <br><span class="hljs-number">1</span>)每个省公司的子网的netmask?<br><span class="hljs-number">2</span>^<span class="hljs-number">5</span>&gt;=<span class="hljs-number">32</span> 借<span class="hljs-number">5</span>位网络ID <br><span class="hljs-number">8</span>+<span class="hljs-number">5</span>=<span class="hljs-number">13</span> <br><span class="hljs-number">255.248.0.0</span> <br><br><span class="hljs-number">2</span>)每个省公司的子网的主机数有多少?<br><span class="hljs-number">2</span>^(<span class="hljs-number">32</span>-<span class="hljs-number">13</span>)-<span class="hljs-number">2=524286</span> <br><br><span class="hljs-number">3</span>)河南省得到第<span class="hljs-number">10</span>个子网,网络ID?<br><span class="hljs-number">10.00000</span> <span class="hljs-number">000.0.0</span>/<span class="hljs-number">13</span> <br><span class="hljs-number">10.01001</span> <span class="hljs-number">000.0.0</span>/<span class="hljs-number">13</span> <br><span class="hljs-number">10.72.0.0</span>/<span class="hljs-number">13</span> <br><br><span class="hljs-number">4</span>)河南省得到第<span class="hljs-number">10</span>个子网的最小IP和最大的IP?<br><span class="hljs-number">10.01001</span> <span class="hljs-number">000.0.1</span> <br><span class="hljs-number">10.01001 111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">11111110</span> <br><br><span class="hljs-number">10.72.0.1</span>---<span class="hljs-number">10.79.255.254</span> <br><br><span class="hljs-number">5</span>)所有子网中最大,最小的子网的netid?<br><span class="hljs-number">10.00000</span> <span class="hljs-number">000.0.0</span>/<span class="hljs-number">13 10.0.0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">13</span> <br><span class="hljs-number">10.11111</span> <span class="hljs-number">000.0.0</span>/<span class="hljs-number">13 10.248.0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><h2 id="4-5-动态主机配置协议-DHCP"><a href="#4-5-动态主机配置协议-DHCP" class="headerlink" title="4.5 动态主机配置协议 DHCP"></a>4.5 动态主机配置协议 DHCP</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202310221927909.png" alt="截图__2023-10-22-19-26-50"></p><h1 id="5-网络配置"><a href="#5-网络配置" class="headerlink" title="5 网络配置"></a>5 网络配置</h1><h2 id="5-1-基本网络配置"><a href="#5-1-基本网络配置" class="headerlink" title="5.1 基本网络配置"></a>5.1 基本网络配置</h2><ul><li>主机名</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment">#Centos7以后</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> 主机名<br>或<br><span class="hljs-string">vim</span> /<span class="hljs-string">etc</span>/<span class="hljs-string">hostname</span><br><span class="hljs-comment">#Centos6</span><br><span class="hljs-string">vim</span> /<span class="hljs-string">etc</span>/<span class="hljs-string">sysconfig</span>/<span class="hljs-string">network</span><br><span class="hljs-string">hostname</span> 主机名<br></code></pre></td></tr></table></figure><ul><li><p>IP/netmask</p></li><li><p>路由：默认网关</p></li><li><p>DNS服务器</p><p>  主DNS服务器</p><p>  次DNS服务器</p><p>  第三个DNS服务器</p></li></ul><h2 id="5-2-网卡名称"><a href="#5-2-网卡名称" class="headerlink" title="5.2 网卡名称"></a>5.2 网卡名称</h2><h3 id="5-2-1-Centos6之前"><a href="#5-2-1-Centos6之前" class="headerlink" title="5.2.1 Centos6之前"></a>5.2.1 Centos6之前</h3><p>默认为eth0</p><p><strong>网卡名储存文件</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/ etc/u</span>dev<span class="hljs-regexp">/rules.d/</span><span class="hljs-number">70</span>-persistent-net.rules<br></code></pre></td></tr></table></figure><p><strong>临时修改网卡名称</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ip link <span class="hljs-built_in">set</span> eth0 down  <span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">set</span> eth0 name abc <span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">set</span> abc up<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>a a 10.0.0.6/24 dev eth0<br></code></pre></td></tr></table></figure><h3 id="5-2-2-Centos7以上网络配置"><a href="#5-2-2-Centos7以上网络配置" class="headerlink" title="5.2.2 Centos7以上网络配置"></a>5.2.2 Centos7以上网络配置</h3><p><strong>更改为传统命名机制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/default/grub<br>添加GRUB_CMDLINE_LINUX=<span class="hljs-string">&quot;net.ifnames=0 biosdevname=0&quot;</span><br><br>On a system with UEFI boot mode: <br><span class="hljs-comment"># grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg </span><br><br>On a system with legacy boot mode: <br><span class="hljs-comment"># grub2-mkconfig -o /boot/grub2/grub.cfg （***）</span><br><span class="hljs-comment"># grub2-mkconfig -o /etc/grub2.cfg</span><br></code></pre></td></tr></table></figure><h2 id="5-3-网络配置命令"><a href="#5-3-网络配置命令" class="headerlink" title="5.3 网络配置命令"></a>5.3 网络配置命令</h2><h3 id="5-3-1-网络配置方式"><a href="#5-3-1-网络配置方式" class="headerlink" title="5.3.1 网络配置方式"></a>5.3.1 网络配置方式</h3><ul><li><p>静态指定</p><p>  ifconfig  route  natstat</p><p>  ip:  object {link addr route}  ss  tc</p><p>  system-config-network-tui  setup</p></li><li><p>动态分配</p><p>  DHCP</p></li></ul><p><strong>Centos网卡配置文件生效方法</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#Centos6</span><br>service network <span class="hljs-keyword">restart</span><br><span class="hljs-meta">#Centos7</span><br>systemctl <span class="hljs-keyword">restart</span> network<br><span class="hljs-meta">#Centos8/Rocky</span><br>nmcli <span class="hljs-keyword">connection</span> reload<br>nmcli <span class="hljs-keyword">connection</span> up etho<br></code></pre></td></tr></table></figure><p><strong>验证网关</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">route -n</span><br></code></pre></td></tr></table></figure><p><strong>验证DNS</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>resolv.conf<br></code></pre></td></tr></table></figure><h3 id="5-3-2-ifconfig"><a href="#5-3-2-ifconfig" class="headerlink" title="5.3.2 ifconfig"></a>5.3.2 ifconfig</h3><p>来自于net-tools包，建议使用 ip 代替</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#查看网卡</span><br><span class="hljs-attribute">ifconfig</span><span class="hljs-meta"> [-a]</span><br><br><span class="hljs-comment">#启用和禁用网卡</span><br><span class="hljs-attribute">ifconfig</span> eth0 down<br><span class="hljs-attribute">ifconfig</span> eth0 up<br><br><span class="hljs-comment">#对一个网卡设置多个IP地址（网卡别名）</span><br><span class="hljs-attribute">ifconfig</span> eth0:<span class="hljs-number">1</span> <span class="hljs-number">172.16.0.8</span>/<span class="hljs-number">24</span><br><br><span class="hljs-comment">#统计网卡流量</span><br><span class="hljs-attribute">ifconfig</span> -s<br><br><span class="hljs-comment">#清除eth0上面的IP地址</span><br><span class="hljs-attribute">ifconfig</span> eth0 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="5-3-3-route"><a href="#5-3-3-route" class="headerlink" title="5.3.3 route"></a>5.3.3 route</h3><p>路由：路径的选择</p><p>路由表（导航、地图，在任何可通信的主机上都有）管理命令</p><p><strong>查看路由表</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">route -<span class="hljs-built_in">n</span><br>目标网络geteway网关子网掩码Metric花费iface接口<br></code></pre></td></tr></table></figure><p>gateway网关：到达非直连的网络,将数据发送到临近(下一个)路由器的临近本主机的接口的IP地址,如果 是直连网络,gateway是0.0.0.0</p><p>iface: 到达对应网络,应该从当前主机哪个网卡发送出来</p><p><strong>添加/删除路由</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">route add -<span class="hljs-built_in">net</span> 目标网络ID gw geteway网关 dev 接口<br>route <span class="hljs-built_in">del</span> -<span class="hljs-built_in">net</span> 目标网络ID gw geteway网关 dev 接口<br></code></pre></td></tr></table></figure><h3 id="5-3-4-配置动态路由"><a href="#5-3-4-配置动态路由" class="headerlink" title="5.3.4 配置动态路由"></a>5.3.4 配置动态路由</h3><p>通过守护进程获取动态路由，安装quagga包，通过命令vtysh配置</p><ul><li>RIP：路由信息协议</li><li>OSPF：开放式最短路径优先</li><li>BGP：边界网关协议</li></ul><h3 id="5-3-5-netstat"><a href="#5-3-5-netstat" class="headerlink" title="5.3.5 netstat"></a>5.3.5 netstat</h3><p>来自于net-tools包，建议使用ss代替</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-t：tcp协议相关</span><br><span class="hljs-deletion">-u：udp协议相关</span><br><span class="hljs-deletion">-w：原始socket相关</span><br><span class="hljs-deletion">-l：处于监听状态</span><br><span class="hljs-deletion">-a：所有状态</span><br><span class="hljs-deletion">-n：以数字显示IP和端口</span><br><span class="hljs-deletion">-e：扩展格式</span><br><span class="hljs-deletion">-p：显示相关进程及PID</span><br><br><span class="hljs-deletion">-r: 显示内核路由表 </span><br><span class="hljs-deletion">-n: 数字格式</span><br></code></pre></td></tr></table></figure><p><strong>常见组合</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">-<span class="hljs-built_in">tan</span>，-uan，-tnl，-<span class="hljs-keyword">unl</span><br></code></pre></td></tr></table></figure><h3 id="5-3-6-ip"><a href="#5-3-6-ip" class="headerlink" title="5.3.6 ip"></a>5.3.6 ip</h3><p>来自于 iproute 包，建议使用</p><h4 id="5-3-6-1-配置LInux网络属性"><a href="#5-3-6-1-配置LInux网络属性" class="headerlink" title="5.3.6.1 配置LInux网络属性"></a><strong>5.3.6.1 配置LInux网络属性</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#禁用网卡</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">set</span> eth1 down<br><br><span class="hljs-comment">#网卡改名</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link sey eth1 name wangnet<br><br><span class="hljs-comment">#启用网卡</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">set</span> wangnet up<br><br><span class="hljs-comment">#网卡别名</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>addr <span class="hljs-built_in">add</span> 172.16.100.100/16 dev eth0 label wth0:0<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>addr del 172.16.100.100/16 dev eth0 label wth0:0<br><br><span class="hljs-comment">#清除网络地址</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>addr flush dev eth0<br><br><span class="hljs-comment">#添加/删除网卡</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip address </span><span class="hljs-built_in">add</span> 10.0.0.88/24 dev eth0<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip address </span>del 10.0.0.88/24 dev eth0<br></code></pre></td></tr></table></figure><h4 id="5-3-6-2-管理路由"><a href="#5-3-6-2-管理路由" class="headerlink" title="5.3.6.2 管理路由"></a>5.3.6.2 管理路由</h4><p>ip route</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#添加路由</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span><span class="hljs-built_in">add</span> TARGET via GW IFACE src SOURCE_IP<br>TARGET:<br>主机路由：IP<br>网络路由：NETWORK/MASK<br><span class="hljs-comment">#添加网关</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span><span class="hljs-built_in">add</span><span class="hljs-built_in"> default </span>via GW dev IFACE<br><span class="hljs-comment">#删除路由</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span>del TARGET<br><span class="hljs-comment">#显示路由</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span>show|list<br><span class="hljs-comment">#清空路由表</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span>flush [dev IFACE] [via PREFIX]<br><span class="hljs-comment">#查看路由过程</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span><span class="hljs-built_in">get</span> 10.0.0.7<br></code></pre></td></tr></table></figure><h3 id="5-3-7-ss"><a href="#5-3-7-ss" class="headerlink" title="5.3.7 ss"></a>5.3.7 ss</h3><p>来自于iproute包，代替netstat，网络通过遍历/proc来获取socket信息，使用netlink与内核tcp_diag模块通信获取socket信息</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-t: tcp协议相关 </span><br><span class="hljs-deletion">-u: udp协议相关 </span><br><span class="hljs-deletion">-w: 裸套接字相关 </span><br><span class="hljs-deletion">-x：unix sock相关 </span><br><span class="hljs-deletion">-l: listen状态的连接 </span><br><span class="hljs-deletion">-a: 所有 </span><br><span class="hljs-deletion">-n: 数字格式 </span><br><span class="hljs-deletion">-p: 相关的程序及PID </span><br><span class="hljs-deletion">-e: 扩展的信息 </span><br><span class="hljs-deletion">-m：内存用量 </span><br><span class="hljs-deletion">-o：计时器信息</span><br></code></pre></td></tr></table></figure><p><strong>常有组合</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">-<span class="hljs-built_in">tan</span>, -tanl, -tanlp, -uan<br></code></pre></td></tr></table></figure><h3 id="5-3-8-nmcli"><a href="#5-3-8-nmcli" class="headerlink" title="5.3.8 nmcli"></a>5.3.8 nmcli</h3><p>图形工具：nm-connection-editor</p><p>字符配置tui工具：</p><ul><li>nmtui</li><li>nmtui-connect</li><li>nmtui-edit</li><li>nmtui-hostname</li></ul><p>命令行工具：nmcli</p><p><strong>nmcli命令相关术语</strong> </p><ul><li>设备即网络接口 </li><li>连接是对网络接口的配置,一个网络接口可有多个连接配置,但同时只有一个连接配置生效</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#查看帮助</span><br><span class="hljs-attribute">nmcli</span> con add help<br><span class="hljs-comment">#显示网络配置</span><br><span class="hljs-attribute">nmcli</span> con show<br><span class="hljs-comment">#显示所有活动连接</span><br><span class="hljs-attribute">nmcli</span> con show --active<br><span class="hljs-comment">#显示网络连接配置</span><br><span class="hljs-attribute">nmcli</span> con show <span class="hljs-string">&quot;System eth0&quot;</span><br><span class="hljs-comment">#显示设备状态</span><br><span class="hljs-attribute">nmcli</span> dev status<br><span class="hljs-comment">#显示网络接口属性</span><br><span class="hljs-attribute">nmcli</span> dev show eth0<br><span class="hljs-comment">#创建新连接default,IP自动通过dhcp获取</span><br><span class="hljs-attribute">nmcli</span> con add con-name default type Ethernet ifname eth0<br><span class="hljs-comment">#删除连接</span><br><span class="hljs-attribute">nmcli</span> con del default<br><br><span class="hljs-comment">#创建静态连接static，制定静态IP，不自动连接</span><br><span class="hljs-attribute">nmcli</span> con add con-name static   ifname eth0 autoconnect no type Ethernet  ipv4.addresses <span class="hljs-number">172</span>.<span class="hljs-number">25</span>.X.<span class="hljs-number">10</span>/<span class="hljs-number">24</span> ipv4.gateway   <span class="hljs-number">172</span>.<span class="hljs-number">25</span>.X.<span class="hljs-number">254</span><br><span class="hljs-comment">#启动static连接配置</span><br><span class="hljs-attribute">nmcli</span> con up static<br><span class="hljs-comment">#启用default连接配置</span><br><span class="hljs-attribute">nmcli</span> con up default<br><br><span class="hljs-comment">#修改连接设置</span><br><span class="hljs-attribute">nmcli</span> con mod “static” connection.autoconnect no <br><span class="hljs-attribute">nmcli</span> con mod “static” ipv4.dns <span class="hljs-number">172</span>.<span class="hljs-number">25</span>.X.<span class="hljs-number">254</span> <br><span class="hljs-attribute">nmcli</span> con mod “static”  +ipv4.dns  <span class="hljs-number">8.8.8.8</span> <br><span class="hljs-attribute">nmcli</span> con mod “static”  -ipv4.dns  <span class="hljs-number">8.8.8.8</span> <br><span class="hljs-attribute">nmcli</span> con mod “static” ipv4.addresses “<span class="hljs-number">172</span>.<span class="hljs-number">16</span>.X.<span class="hljs-number">10</span>/<span class="hljs-number">24</span>  <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.X.<span class="hljs-number">254</span>” <br><span class="hljs-attribute">nmcli</span> con mod “static”  +ipv4.addresses <span class="hljs-number">10.10.10.10</span>/<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h2 id="5-4-网络配置文件"><a href="#5-4-网络配置文件" class="headerlink" title="5.4 网络配置文件"></a>5.4 网络配置文件</h2><h3 id="5-4-1-网络基本配置文件"><a href="#5-4-1-网络基本配置文件" class="headerlink" title="5.4.1 网络基本配置文件"></a>5.4.1 网络基本配置文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-IFACE<br></code></pre></td></tr></table></figure><h3 id="5-4-2-主机名配置文件"><a href="#5-4-2-主机名配置文件" class="headerlink" title="5.4.2 主机名配置文件"></a>5.4.2 主机名配置文件</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">/etc/sysconfig/network<br><span class="hljs-attribute">HOSTNAME</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><h3 id="5-4-3-主机名数据库和IP地址的映射"><a href="#5-4-3-主机名数据库和IP地址的映射" class="headerlink" title="5.4.3 主机名数据库和IP地址的映射"></a>5.4.3 主机名数据库和IP地址的映射</h3><p>getent hosts 查看/etc/hosts内容，优先于使用DNS前检查</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><h3 id="5-4-4-DNS域名解析"><a href="#5-4-4-DNS域名解析" class="headerlink" title="5.4.4 DNS域名解析"></a>5.4.4 DNS域名解析</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>resolv.conf<br>nameserber DNS_SERVER_IP1<br>nameserber DNS_SERVER_IP2<br>nameserber DNS_SERVER_IP3<br>search DOMAIN<br></code></pre></td></tr></table></figure><h3 id="5-4-5-修改-etc-hosts-和-DNS的优先级"><a href="#5-4-5-修改-etc-hosts-和-DNS的优先级" class="headerlink" title="5.4.5 修改/etc/hosts 和 DNS的优先级"></a>5.4.5 修改/etc/hosts 和 DNS的优先级</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>nsswitch.conf<br>hosts: files dns<br></code></pre></td></tr></table></figure><h3 id="5-4-6-路由相关配置文件"><a href="#5-4-6-路由相关配置文件" class="headerlink" title="5.4.6 路由相关配置文件"></a>5.4.6 路由相关配置文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/</span>route-IFACE<br><br>两种风格<br>(<span class="hljs-number">1</span>) TARGET via GW <br>如: <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">8</span> via <span class="hljs-number">172.16</span>.<span class="hljs-number">0.1</span> <br><br>(<span class="hljs-number">2</span>)每三行定义一个路由<br>ADDRESS <span class="hljs-comment"># =TARGET </span><br>NETMASK <span class="hljs-comment"># =mask </span><br>GATEWAY <span class="hljs-comment"># =GW</span><br></code></pre></td></tr></table></figure><h2 id="5-5-网卡别名"><a href="#5-5-网卡别名" class="headerlink" title="5.5  网卡别名"></a>5.5  网卡别名</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> eth0:<span class="hljs-number">0</span> <span class="hljs-number">192.168.1.100</span>/<span class="hljs-number">24</span> up<br><span class="hljs-attribute">ifconfig</span> eth0:<span class="hljs-number">0</span> down<br><br><span class="hljs-attribute">ip</span> addr add <span class="hljs-number">172.16.1.1</span>/<span class="hljs-number">16</span> dev eth0 <br><span class="hljs-attribute">ip</span> addr add <span class="hljs-number">172.16.1.2</span>/<span class="hljs-number">16</span> dev eth0 label eth0:<span class="hljs-number">0</span> <br><span class="hljs-attribute">ip</span> addr del <span class="hljs-number">172.16.1.2</span>/<span class="hljs-number">16</span> dev eth0 label eth0:<span class="hljs-number">0</span> <br><span class="hljs-attribute">ip</span> addr flush dev eth0 label eth0:<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="5-6-bonding-多网卡"><a href="#5-6-bonding-多网卡" class="headerlink" title="5.6 bonding 多网卡"></a>5.6 bonding 多网卡</h2><h3 id="5-6-1-bonding配置"><a href="#5-6-1-bonding配置" class="headerlink" title="5.6.1 bonding配置"></a>5.6.1 bonding配置</h3><p><strong>创建bonding设备的配置文件</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs abnf">/etc/sysconfig/network-scripts/ifcfg-bond0<br><span class="hljs-attribute">NAME</span><span class="hljs-operator">=</span>bond0 <br><span class="hljs-attribute">TYPE</span><span class="hljs-operator">=</span>bond <br><span class="hljs-attribute">DEVICE</span><span class="hljs-operator">=</span>bond0 <br><span class="hljs-attribute">BOOTPROTO</span><span class="hljs-operator">=</span>none <br><span class="hljs-attribute">IPADDR</span><span class="hljs-operator">=</span><span class="hljs-number">10.0</span>.<span class="hljs-number">0.100</span> <br><span class="hljs-attribute">PREFIX</span><span class="hljs-operator">=</span><span class="hljs-number">8</span><br>BONDING_OPTS<span class="hljs-operator">=</span><span class="hljs-string">&quot;mode=1 miimon=100 fail_over_mac=1&quot;</span><br><br>/etc/sysconfig/network-scripts/ifcfg-eth0 <br><span class="hljs-attribute">NAME</span><span class="hljs-operator">=</span>eth0 <br><span class="hljs-attribute">DEVICE</span><span class="hljs-operator">=</span>eth0 <br><span class="hljs-attribute">BOOTPROTO</span><span class="hljs-operator">=</span>none <br><span class="hljs-attribute">MASTER</span><span class="hljs-operator">=</span>bond0 <br><span class="hljs-attribute">SLAVE</span><span class="hljs-operator">=</span>yes <br><span class="hljs-attribute">ONBOOT</span><span class="hljs-operator">=</span>yes <br><br>/etc/sysconfig/network-scripts/ifcfg-eth1 <br><span class="hljs-attribute">NAME</span><span class="hljs-operator">=</span>eth1 <br><span class="hljs-attribute">DEVICE</span><span class="hljs-operator">=</span>eth1 <br><span class="hljs-attribute">BOOTPROTO</span><span class="hljs-operator">=</span>none <br><span class="hljs-attribute">MASTER</span><span class="hljs-operator">=</span>bond0 <br><span class="hljs-attribute">SLAVE</span><span class="hljs-operator">=</span>yes <br><span class="hljs-attribute">ONBOOT</span><span class="hljs-operator">=</span>yes<br></code></pre></td></tr></table></figure><p><strong>查看bond0状态</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/proc/</span>net<span class="hljs-regexp">/bonding/</span>bond0<br></code></pre></td></tr></table></figure><p><strong>删除bond0</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">ifconfig <span class="hljs-keyword">bond0 </span>down<br>rmmod <span class="hljs-keyword">bonding</span><br></code></pre></td></tr></table></figure><h3 id="5-6-2-nmcli-实现-bonding"><a href="#5-6-2-nmcli-实现-bonding" class="headerlink" title="5.6.2 nmcli 实现 bonding"></a>5.6.2 nmcli 实现 bonding</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#添加bonding接口</span><br>nmcli con add <span class="hljs-keyword">type</span> bond con-name mybond0 ifname bond0 mode active-backup  ipv4.method manual ipv4.addresses <span class="hljs-number">10.0</span>.<span class="hljs-number">0.100</span>/<span class="hljs-number">24</span><br><br><span class="hljs-comment">#添加从属接口</span><br>nmcli con add <span class="hljs-keyword">type</span> bond-<span class="hljs-literal">slave</span> ifname ens7 <span class="hljs-keyword">master</span> <span class="hljs-title">bond0</span> <br>nmcli con add <span class="hljs-keyword">type</span> bond-<span class="hljs-literal">slave</span> ifname ens3 <span class="hljs-keyword">master</span> <span class="hljs-title">bond0</span><br><br><span class="hljs-comment">#要启动绑定，必须启动从属接口</span><br>nmcli con up bond-<span class="hljs-literal">slave</span>-eth0 <br>nmcli con up bond-<span class="hljs-literal">slave</span>-eth1<br><br><span class="hljs-comment">#启动绑定</span><br>nmcli con up mybond0<br></code></pre></td></tr></table></figure><h2 id="5-7-网络组-Network-Teaming"><a href="#5-7-网络组-Network-Teaming" class="headerlink" title="5.7 网络组 Network Teaming"></a>5.7 网络组 Network Teaming</h2><h2 id="5-8-网桥（交换机）"><a href="#5-8-网桥（交换机）" class="headerlink" title="5.8 网桥（交换机）"></a>5.8 网桥（交换机）</h2><h2 id="5-9-网络测试诊断工具"><a href="#5-9-网络测试诊断工具" class="headerlink" title="5.9 网络测试诊断工具"></a>5.9 网络测试诊断工具</h2><h1 id="6-Ubuntu网络配置"><a href="#6-Ubuntu网络配置" class="headerlink" title="6 Ubuntu网络配置"></a>6 Ubuntu网络配置</h1><p><strong><span id="more"></span></strong></p>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LinuxLinux-磁盘和存储管理</title>
    <link href="/2023/09/21/Linux-%E7%A3%81%E7%9B%98%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
    <url>/2023/09/21/Linux-%E7%A3%81%E7%9B%98%E5%92%8C%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-磁盘结构"><a href="#1-磁盘结构" class="headerlink" title="1 磁盘结构"></a>1 磁盘结构</h1><h2 id="1-1-设备文件"><a href="#1-1-设备文件" class="headerlink" title="1.1 设备文件"></a>1.1 设备文件</h2><p>设备文件：关联至一个设备驱动程序，进而能够跟与之对应硬件设备进行通信</p><p>设备号码：</p><ul><li>主设备号：标识设备类型 major number</li><li>次设备号：表示同一类型下的不同设备 minor number</li></ul><p>设备类型：</p><ul><li>块设备：block  磁盘</li><li>字符设备：char  键盘</li></ul><p>磁盘设备的常见设备文件命名：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dev/</span>DEV_FILE<br><span class="hljs-regexp">/dev/</span>sdx<span class="hljs-comment">#SAS,SATA,SCSI,IDE,USB</span><br><span class="hljs-regexp">/dev/</span>nvme0n<span class="hljs-comment">##nvme协议硬盘，如：第一个硬盘：nvme0n1,第二个硬盘：nvme0n2</span><br></code></pre></td></tr></table></figure><p>虚拟磁盘（云服务器）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dev/</span>vd<br><span class="hljs-regexp">/dev/</span>xvd<br></code></pre></td></tr></table></figure><p>不同磁盘标识：a-z，aa，ab…</p><h2 id="1-2-硬盘类型"><a href="#1-2-硬盘类型" class="headerlink" title="1.2 硬盘类型"></a>1.2 硬盘类型</h2><p><strong>硬盘接口类型</strong></p><ul><li>IDE        早期家用</li><li>SCSI      早期服务器</li><li>SATA     家用</li><li>SAS       服务器</li><li>USB</li><li>M.2</li></ul><p>注意：速度不是由单纯的接口类型决定，支持Nvme协议硬盘速度是最快的</p><p><strong>服务器硬盘大小</strong></p><ul><li>LFF：3.5寸</li><li>SFF：2.5寸</li></ul><p>L、S分别是大、小的意思。服务器或盘柜采用sff规格：增大单位密度内的磁盘容量、增强散热、减小功耗。</p><h2 id="1-3-机械硬盘和固态硬盘"><a href="#1-3-机械硬盘和固态硬盘" class="headerlink" title="1.3 机械硬盘和固态硬盘"></a>1.3 机械硬盘和固态硬盘</h2><p>机械硬盘HDD：主要由：盘片,磁头,盘片转轴及控制电 机,磁头控制器,数据转换器,接口,缓存等几个部分组成。</p><p>固态硬盘SSD：用固态电子存储芯片阵列而制成的硬盘,由控制单元和存储单 元(FLASH芯片,DRAM芯片)组成。</p><p><strong>硬盘存储术语CHS</strong></p><ul><li>head：磁头 磁头数=盘面数</li><li>track：磁道 磁道=柱面数      eg.所有的0磁道合称0柱面</li><li><strong>sector：扇区，512bytes</strong>      现在一般以<strong>扇区</strong>为单位，很少关注磁头磁道</li><li>cylinder：柱面 1柱面=512 * sector数/track * head数=512 * 63 * 255 =7.84M</li></ul><p>**区位记录磁盘扇区结构ZBR:**不同磁道存储的扇区数不同</p><p><strong>LBA</strong>：通过转化成CHS格式完成磁盘具体寻址</p><h1 id="2-管理存储"><a href="#2-管理存储" class="headerlink" title="2 管理存储"></a>2 管理存储</h1><ul><li>设备分区</li><li>创建文件系统</li><li>挂载新的文件系统</li></ul><h2 id="2-1-磁盘分区"><a href="#2-1-磁盘分区" class="headerlink" title="2.1 磁盘分区"></a>2.1 磁盘分区</h2><h3 id="2-1-1-目的"><a href="#2-1-1-目的" class="headerlink" title="2.1.1 目的"></a>2.1.1 目的</h3><ul><li>优化I/O性能</li><li>实现磁盘空间配额限制</li><li>提高修复速度</li><li>隔离系统程序</li><li>安装多个OS</li><li>采用不同文件系统</li></ul><h2 id="2-1-2-分区方式"><a href="#2-1-2-分区方式" class="headerlink" title="2.1.2 分区方式"></a>2.1.2 分区方式</h2><p>MBR        GPT</p><p><strong>查看磁盘分区</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l<br></code></pre></td></tr></table></figure><h4 id="2-1-2-1-MBR分区"><a href="#2-1-2-1-MBR分区" class="headerlink" title="2.1.2.1 MBR分区"></a>2.1.2.1 MBR分区</h4><p>32位扇区       &lt;2T</p><p>0磁道0扇区：512bytes</p><ul><li>446bytes        boot loader 启动相关</li><li>64bytes          分区表，每16bytes表示一个分区</li><li>2bytes             标识符（位）55aa</li></ul><p>MBR分区：一块硬盘 4个主分区（最多）、也可以 3个主分区+1扩展（N个逻辑分区）</p><h4 id="2-1-2-2-GPT分区"><a href="#2-1-2-2-GPT分区" class="headerlink" title="2.1.2.2 GPT分区"></a>2.1.2.2 GPT分区</h4><p>GUID 支持128个分区，支持8Z</p><p>4个区域：GPT头、分区表、GPT分区、备份区域</p><h3 id="2-1-3-BIOS和UEFI"><a href="#2-1-3-BIOS和UEFI" class="headerlink" title="2.1.3 BIOS和UEFI"></a>2.1.3 BIOS和UEFI</h3><p><strong>BIOS</strong>（基本输入输出系统），系统硬件自检，16位汇编。电脑启动时点F2,开启页面。</p><p><strong>UEFI</strong> 可以看做是BIOS的升级版，32/64位c语言编写。</p><p>一般组合形式：<strong>BIOS+MBR</strong> 或 <strong>UEFI+GPT</strong>  windows只能用以上组合，而Linux还可以使用BIOS+GPT+GRUB</p><h3 id="2-1-4-管理分区"><a href="#2-1-4-管理分区" class="headerlink" title="2.1.4 管理分区"></a>2.1.4 管理分区</h3><p><strong>列出块设备</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br></code></pre></td></tr></table></figure><p><strong>创建分区命令</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fdisk</span>管理MBR分区<br>gdisk管理GPT分区<br>parted高级分区操作，可以是交互或者非交互方式<br></code></pre></td></tr></table></figure><p><strong>增加新硬盘，让kernel发现新硬盘</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">echo <span class="hljs-string">&#x27;- - -&#x27;</span> &gt; /sys/<span class="hljs-keyword">class</span>/<span class="hljs-symbol">scsi_host</span>/<span class="hljs-symbol">host0</span>|<span class="hljs-symbol">1</span>|<span class="hljs-symbol">2</span>/<span class="hljs-symbol">scan</span><br></code></pre></td></tr></table></figure><h4 id="2-1-4-1-parted命令"><a href="#2-1-4-1-parted命令" class="headerlink" title="2.1.4.1 parted命令"></a>2.1.4.1 parted命令</h4><p>注意：<strong>操作实时生效</strong></p><p><strong>交互式</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">parted</span> 文件名<br></code></pre></td></tr></table></figure><p><strong>非交互</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">parted 文件名 <span class="hljs-keyword">cmd</span><br></code></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#设置分区方式</span><br>parted <span class="hljs-regexp">/dev/</span>sdb mklabel gpt|msdos<br><span class="hljs-comment">#打印硬盘分区情况</span><br>parted <span class="hljs-regexp">/dev/</span>sdb print<br><span class="hljs-comment">#分区</span><br>parted <span class="hljs-regexp">/dev/</span>sdb mkpart primary <span class="hljs-number">1</span> <span class="hljs-number">200</span> （默认单位M）<br><span class="hljs-comment">#删除分区</span><br>parted <span class="hljs-regexp">/dev/</span>sdb rm <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="2-1-4-2-分区工具-fdisk-和-gdisk"><a href="#2-1-4-2-分区工具-fdisk-和-gdisk" class="headerlink" title="2.1.4.2 分区工具 fdisk 和 gdisk"></a>2.1.4.2 分区工具 fdisk 和 gdisk</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">fdisk -l <span class="hljs-selector-attr">[-u]</span> <span class="hljs-selector-attr">[device...]</span>查看分区<br>fdisk <span class="hljs-selector-attr">[device...]</span>管理MBR分区<br>gdisk <span class="hljs-selector-attr">[device...]</span>GPT分区工具<br></code></pre></td></tr></table></figure><p><strong>子命令</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>分区列表<br>t更改分区类型<br>n创建新分区<br>d删除分区<br>v效验分区<br>u转换单位<br>w保存并退出<br><span class="hljs-selector-tag">q</span>不保存并退出<br></code></pre></td></tr></table></figure><p><strong>查看内核是否已经识别新的分区</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/proc/</span>partitions<br></code></pre></td></tr></table></figure><p><strong>Centos 7,8同步分区表</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">partprobe</span><br></code></pre></td></tr></table></figure><p><strong>Centos6 通知内核重新读取硬盘分区表</strong></p><p>新增分区用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">partx -a <span class="hljs-regexp">/dev/</span>sda<br></code></pre></td></tr></table></figure><p>删除分区用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">partx</span> -d --nr <span class="hljs-number">6</span>-<span class="hljs-number">8</span> /dev/sda<br></code></pre></td></tr></table></figure><h2 id="2-2-文件系统"><a href="#2-2-文件系统" class="headerlink" title="2.2 文件系统"></a>2.2 文件系统</h2><h3 id="2-2-1文件系统概念"><a href="#2-2-1文件系统概念" class="headerlink" title="2.2.1文件系统概念"></a>2.2.1文件系统概念</h3><p>文件系统是操作系统用于明确存储设备或分区上的文件的方法和数据结构；即在存储设备上组织文件的方法。</p><p>支持的文件系统：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/lib/m</span>odules<span class="hljs-regexp">/`uname -r`/</span>kernel/fs<br></code></pre></td></tr></table></figure><p>各种文件系统:<a href="https://en.wikipedia.org/wiki/Comparison_of_file_systems">https://en.wikipedia.org/wiki/Comparison_of_file_systems</a></p><p>帮助：man 5 fs</p><h3 id="2-2-2-文件系统类型"><a href="#2-2-2-文件系统类型" class="headerlink" title="2.2.2 文件系统类型"></a>2.2.2 文件系统类型</h3><p><strong>查看支持的文件系统：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/proc/</span>filesystems<br></code></pre></td></tr></table></figure><p><strong>Linux常用文件系统</strong></p><ul><li>ext2</li><li>ext3</li><li><strong>ext4</strong></li><li><strong>xfs</strong></li><li>swap</li><li>iso9660 光盘</li><li>btrfs(Oracle)</li><li>reiserfs</li></ul><p><strong>Windows 常用文件系统</strong></p><ul><li>FAT32</li><li>NTFS</li><li>exFAT</li></ul><p><strong>Unix：</strong></p><ul><li>FFS（fast）</li><li>UFS（unix）</li><li>JFS2</li></ul><p><strong>网络文件系统：</strong></p><ul><li>NFS</li><li>CIFS</li></ul><p><strong>集群文件系统：</strong></p><ul><li>GFS2</li><li>OCFS2（oracle）</li></ul><p><strong>分布式文件系统：</strong></p><ul><li>fastdfs</li><li>ceph</li><li>moosefs</li><li>mogilefs</li><li>glusterfs</li><li>Lustre</li></ul><p><strong>RAW</strong>：裸文件系统，未经处理或未经格式化产生的文件系统</p><h3 id="2-2-3-文件系统选择管理"><a href="#2-2-3-文件系统选择管理" class="headerlink" title="2.2.3 文件系统选择管理"></a>2.2.3 文件系统选择管理</h3><h4 id="2-2-3-1-创建文件系统"><a href="#2-2-3-1-创建文件系统" class="headerlink" title="2.2.3.1 创建文件系统"></a>2.2.3.1 创建文件系统</h4><p>创建文件管理工具</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfs.ext4 <span class="hljs-regexp">/dev/</span>DEVICEmkfs -t ext4 <span class="hljs-regexp">/dev/</span>DEVICE<br>mke2fs:ext系列文件系统专用管理工具<br></code></pre></td></tr></table></figure><h4 id="2-2-3-2-查看和管理分区信息"><a href="#2-2-3-2-查看和管理分区信息" class="headerlink" title="2.2.3.2 查看和管理分区信息"></a>2.2.3.2 查看和管理分区信息</h4><p>blkid 可以查看块设备属性信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">blkid <span class="hljs-selector-attr">[OPTION]</span>...<span class="hljs-selector-attr">[DEVICE]</span><br></code></pre></td></tr></table></figure><p>findfs 查找分区</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">findfs [<span class="hljs-keyword">options</span>] LABEL=&lt;label&gt;<br>findfs [<span class="hljs-keyword">options</span>] <span class="hljs-type">UUID</span>=&lt;<span class="hljs-type">uuid</span>&gt;<br></code></pre></td></tr></table></figure><p>tune2fs  重新设定ext系列文件系统可调整参数的值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#查看设备属性信息</span><br>tune2fs -l <span class="hljs-regexp">/dev/</span>DEVICE<br></code></pre></td></tr></table></figure><p>dumpe2fs 显示ext文件系统信息，将磁盘块分组管理</p><p>-h    查看超级块信息，不显示分组信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dumpe2fs<span class="hljs-regexp">/dev/</span>DEVICE<br></code></pre></td></tr></table></figure><p>xfs_info 显示挂载或已挂载的xfs文件系统信息</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">xfs_info mountpoint <span class="hljs-string">| devname</span><br></code></pre></td></tr></table></figure><h4 id="2-2-3-4-文件系统检测和修复"><a href="#2-2-3-4-文件系统检测和修复" class="headerlink" title="2.2.3.4 文件系统检测和修复"></a>2.2.3.4 文件系统检测和修复</h4><p>2<strong>一定不要在挂载状态下执行命令修复。</strong></p><p>fsck：File System Check</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif">fsck.FS_TYPE<br>fsck -t FS_TYPE         <span class="hljs-comment">#FS_TYPE 一定要与分区上已经文件类型相同</span><br><span class="hljs-literal">-</span>a 自动修复<br><span class="hljs-literal">-</span>r交互式修复错误<br></code></pre></td></tr></table></figure><p>e2fsck    ext系列文件专用的检测修复工具</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-y 自动回答yes</span><br><span class="hljs-deletion">-f强制修复</span><br><span class="hljs-deletion">-p自动进行安全的修复文件系统问题</span><br></code></pre></td></tr></table></figure><p>xfs_repair    xfs文件系统那专用检测修复工具</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-f修复文件</span><br><span class="hljs-deletion">-n只检查</span><br><span class="hljs-deletion">-d允许修复只读的挂在设备，在单用户下修复/时使用，然后立即reboot</span><br></code></pre></td></tr></table></figure><h2 id="2-3-挂载"><a href="#2-3-挂载" class="headerlink" title="2.3 挂载"></a>2.3 挂载</h2><p><strong>挂载</strong>    将额外文件系统与根文件系统某现存的目录建立起关联关系，进而使得此目录做为其它文件访问入口的行为</p><p><strong>缺卸</strong>    未解除此关联关系的过程</p><p>挂载点下原有文件在挂载完成后会被临时隐藏，因此，挂载点目录一般为空</p><p>进程正在使用中的设备无法卸载</p><h3 id="2-3-1-挂载文件系统（临时）-mount"><a href="#2-3-1-挂载文件系统（临时）-mount" class="headerlink" title="2.3.1 挂载文件系统（临时） mount"></a>2.3.1 挂载文件系统（临时） mount</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mount <span class="hljs-selector-attr">[-fnrsvw]</span> <span class="hljs-selector-attr">[-t vfstype]</span> <span class="hljs-selector-attr">[-o options]</span> device mountpoint<br></code></pre></td></tr></table></figure><ul><li>一个挂载点同一时间只能挂载一个设备</li><li>一个设备可以同时挂载到多个挂载点</li><li>通常挂载点一般是已存在空的目录</li><li>一个挂载点同一时间挂在了多个设备，只能看到最后一个设备的数据，其他设备上的数据将被隐藏</li></ul><h3 id="2-3-2-卸载文件系统-umount"><a href="#2-3-2-卸载文件系统-umount" class="headerlink" title="2.3.2 卸载文件系统 umount"></a>2.3.2 卸载文件系统 umount</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">umount 设备名<span class="hljs-string">|挂载点</span><br><br><span class="hljs-meta">#查看使用者</span><br>fuser -v 挂载点<br><span class="hljs-meta">#踢掉使用者</span><br>fuser -km 挂载点<br></code></pre></td></tr></table></figure><h3 id="2-3-3-查看挂载情况"><a href="#2-3-3-查看挂载情况" class="headerlink" title="2.3.3 查看挂载情况"></a>2.3.3 查看挂载情况</h3><p>查看挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#通过查看/etc/mtab文件显示已挂载的所有设备</span><br>mount<br><span class="hljs-comment">#查看内核跟踪到的已挂载的所有设备</span><br>cat <span class="hljs-regexp">/proc/m</span>ounts<br></code></pre></td></tr></table></figure><p>查看挂载点情况</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">findmnt挂载点<span class="hljs-string">|设备名</span><br></code></pre></td></tr></table></figure><h3 id="2-3-4-持久挂载"><a href="#2-3-4-持久挂载" class="headerlink" title="2.3.4 持久挂载"></a>2.3.4 持久挂载</h3><p>将挂载保存到 /etc/fstab 中可以下次开机，自动启用挂载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">man</span> <span class="hljs-number">5</span> fstab<br></code></pre></td></tr></table></figure><p>挂载设备+挂载点+文件系统类型+挂载选项+转储频率+fsck检查的文件系统的顺序</p><p>转储频率：0–不做备份   1–每天转储     2–每隔一天转储</p><p>fsck检查的文件系统的顺序：0–不自检    1–首先自检；一般只有rootfs才用  2–非rootfs使用</p><p>添加新的挂载项，需要执行以下命令生效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mount -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h2 id="2-4-处理交换文件和分区"><a href="#2-4-处理交换文件和分区" class="headerlink" title="2.4 处理交换文件和分区"></a>2.4 处理交换文件和分区</h2><h3 id="2-4-1-swap-分区"><a href="#2-4-1-swap-分区" class="headerlink" title="2.4.1 swap 分区"></a>2.4.1 swap 分区</h3><p>当内存不足时，用硬盘模拟内存使用，速度很慢。</p><h3 id="2-4-2-交换分区实现过程"><a href="#2-4-2-交换分区实现过程" class="headerlink" title="2.4.2 交换分区实现过程"></a>2.4.2 交换分区实现过程</h3><ol><li>创建交换分区或者文件</li><li>使用 mkswap 写入特殊签名</li><li>在 /etc/fstab 文件中添加适当的条目</li><li>使用swapon -a 激活交换空间</li></ol><h3 id="2-4-3-swap的使用策略"><a href="#2-4-3-swap的使用策略" class="headerlink" title="2.4.3 swap的使用策略"></a>2.4.3 swap的使用策略</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/vm/</span>swappiness 的值决定了当内存占用达到一定的百分比时，会启用swap分区空间<br></code></pre></td></tr></table></figure><p>swap的禁用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-number">0</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/vm/</span>swappiness<br><br>cat <span class="hljs-regexp">/etc/</span>fstab  <span class="hljs-comment">#注释掉swap</span><br><br>swapon -s<br><br>swapoff <span class="hljs-regexp">/dev/</span>device<br><br>free -h<br></code></pre></td></tr></table></figure><h2 id="2-5-移动介质"><a href="#2-5-移动介质" class="headerlink" title="2.5 移动介质"></a>2.5 移动介质</h2><h3 id="2-5-1-光盘"><a href="#2-5-1-光盘" class="headerlink" title="2.5.1 光盘"></a>2.5.1 光盘</h3><p>在图形环境下自动启动挂载/run/media/<user>/<label></p><p>手动挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount <span class="hljs-regexp">/dev/</span>cdrom  <span class="hljs-regexp">/mnt/</span><br></code></pre></td></tr></table></figure><p>操作光盘</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">eject</span><span class="hljs-comment">#弹出光盘</span><br>eject -t<span class="hljs-comment">#弹入光盘</span><br></code></pre></td></tr></table></figure><h3 id="2-5-2-USB介质"><a href="#2-5-2-USB介质" class="headerlink" title="2.5.2 USB介质"></a>2.5.2 USB介质</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">lsusb</span>  <span class="hljs-comment">#来自usbutils包</span><br></code></pre></td></tr></table></figure><h2 id="2-6-磁盘常见工具"><a href="#2-6-磁盘常见工具" class="headerlink" title="2.6 磁盘常见工具"></a>2.6 磁盘常见工具</h2><h3 id="2-6-1-查看工具-df"><a href="#2-6-1-查看工具-df" class="headerlink" title="2.6.1 查看工具 df"></a>2.6.1 查看工具 df</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">df [<span class="hljs-symbol">OPTION</span>]... [<span class="hljs-symbol">FILE</span>]...<br></code></pre></td></tr></table></figure><p>常见选型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-H易读，以10为单位<br>-h易读，以2为单位<br>-T文件系统类型<br></code></pre></td></tr></table></figure><h3 id="2-6-2-查看某目录总体空间实际占用状态du"><a href="#2-6-2-查看某目录总体空间实际占用状态du" class="headerlink" title="2.6.2 查看某目录总体空间实际占用状态du"></a>2.6.2 查看某目录总体空间实际占用状态du</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> [OPTION]... DIR<br></code></pre></td></tr></table></figure><h3 id="2-6-3-df与du的区别"><a href="#2-6-3-df与du的区别" class="headerlink" title="2.6.3 df与du的区别"></a><strong>2.6.3 df与du的区别</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> 查看时文件系统的空间使用，包括元数据和数据；删除文件后，如果此文件正在使用，不会立即释放空间<br><span class="hljs-built_in">du</span> 查看文件数据空间使用，不包括元数据，删除后空间立即释放<br><br>空分区：<span class="hljs-built_in">df</span> &gt; <span class="hljs-built_in">du</span><br>目录内挂载有其他分时的情况：<span class="hljs-built_in">df</span> &lt; <span class="hljs-built_in">du</span><br></code></pre></td></tr></table></figure><h3 id="2-6-3-dd命令"><a href="#2-6-3-dd命令" class="headerlink" title="2.6.3 dd命令"></a>2.6.3 dd命令</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">dd <span class="hljs-keyword">if</span>=<span class="hljs-regexp">/PATH/</span><span class="hljs-keyword">FROM</span><span class="hljs-regexp">/SRC of=/</span>PATH<span class="hljs-regexp">/TO/</span>DEST bs=# <span class="hljs-keyword">count</span>=#<br></code></pre></td></tr></table></figure><p>常用选项</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">if</span>=file 从所命名文件读取而不是从标准输入 <br><span class="hljs-attribute">of</span>=file 写到所命名的文件而不是到标准输出 <br><span class="hljs-attribute">ibs</span>=size   一次读size个byte <br><span class="hljs-attribute">obs</span>=size      一次写size个byte <br><span class="hljs-attribute">bs</span>=size block size, 指定块大小(既是是ibs也是obs) <br><span class="hljs-attribute">cbs</span>=size       一次转化size个byte <br><span class="hljs-attribute">skip</span>=blocks   从开头忽略blocks个ibs大小的块 <br><span class="hljs-attribute">seek</span>=blocks   从开头忽略blocks个obs大小的块 <br><span class="hljs-attribute">count</span>=n         复制n个bs <br><span class="hljs-attribute">conv</span>=conversion[,conversion<span class="hljs-built_in">..</span>.] 用指定的参数转换文件 <br><br><span class="hljs-comment">#conversion 转换参数:  </span><br>ascii 转换 EBCDIC 为 ASCII <br>ebcdic 转换 ASCII 为 EBCDIC <br>lcase 把大写字符转换为小写字符 <br>ucase 把小写字符转换为大写字符 <br>nocreat 不创建输出文件 <br>noerror 出错时不停止 <br>notrunc 不截短输出文件 <br>sync 把每个输入块填充到ibs个字节,不足部分用空(NUL)字符补齐 <br>fdatasync 写完成前,物理写入输出文件<br></code></pre></td></tr></table></figure><h1 id="3-RAID"><a href="#3-RAID" class="headerlink" title="3 RAID"></a>3 RAID</h1><p>独立硬盘冗余阵列，磁盘阵列</p><p><strong>功能</strong>：提高IO能力，磁盘并行读写；提高耐用性，磁盘冗余算法实现</p><p><strong>实现方式</strong>：外接式磁盘阵列；内接式RAID；软件RAID</p><p>RAID级别：多块磁盘组织在一起的工作方式有所不同  </p><p>参考链接：<a href="https://zh.wikipedia.org/wiki/RAID">https://zh.wikipedia.org/wiki/RAID</a></p><h2 id="3-1-RAID-0（家庭）"><a href="#3-1-RAID-0（家庭）" class="headerlink" title="3.1 RAID-0（家庭）"></a>3.1 RAID-0（家庭）</h2><p>以chunk为单位，数据均匀放在相同大小的不同硬盘上，并行处理读写速度较快。</p><p>如果一块磁盘损坏，所有数据都丢失。</p><p>磁盘利用率：100%</p><p>最少磁盘数：1+</p><h2 id="3-2-RAID-1"><a href="#3-2-RAID-1" class="headerlink" title="3.2 RAID-1"></a>3.2 RAID-1</h2><p>镜像，磁盘之间相互作为镜像。</p><p>不同磁盘存放相同数据，读取性功能提升，写性能略有下降。</p><p>磁盘利用率：50%</p><p>最小磁盘数：2+</p><h2 id="3-3-RAID-4"><a href="#3-3-RAID-4" class="headerlink" title="3.3 RAID-4"></a>3.3 RAID-4</h2><p>多块磁盘存储数据，一块磁盘作为效验盘。</p><p>多块数据盘异或运算值存于专用效验盘。</p><p>磁盘利用率：(N-1)/N</p><p>最小磁盘数：3+</p><h2 id="3-4-RAID-5（常用）"><a href="#3-4-RAID-5（常用）" class="headerlink" title="3.4 RAID-5（常用）"></a>3.4 RAID-5（常用）</h2><p>多块磁盘以chunk为单位存储数据，相较于 RAID-4 校验位分别存储到不同硬盘中。</p><p>读、写性能提升</p><p>磁盘利用率：(N-1)/N</p><p>最少磁盘数：3+</p><h2 id="3-5-RAID-6"><a href="#3-5-RAID-6" class="headerlink" title="3.5 RAID-6"></a>3.5 RAID-6</h2><p>相较于RAID-5，多了一个校验位。</p><p>读、写性能提升</p><p>磁盘利用率：(N-2)/N</p><p>最少磁盘数：4+</p><h2 id="3-6-RAID-10"><a href="#3-6-RAID-10" class="headerlink" title="3.6 RAID-10"></a>3.6 RAID-10</h2><p>相较于RAID-01，RAID-10安全性更高。</p><p>读、写性能提升</p><p>磁盘利用率：50%</p><p>最少磁盘数：4+</p><h2 id="3-7-RAID-01"><a href="#3-7-RAID-01" class="headerlink" title="3.7 RAID-01"></a>3.7 RAID-01</h2><p>读、写性能提升</p><p>磁盘利用率：50%</p><p>最少磁盘数：4+</p><h2 id="3-8-RAID-50"><a href="#3-8-RAID-50" class="headerlink" title="3.8 RAID-50"></a>3.8 RAID-50</h2><h2 id="3-9-RAID-60"><a href="#3-9-RAID-60" class="headerlink" title="3.9 RAID-60"></a>3.9 RAID-60</h2><h2 id="3-10-其他级别"><a href="#3-10-其他级别" class="headerlink" title="3.10 其他级别"></a>3.10 其他级别</h2><p>JBOB  就是一堆磁盘（家用）</p><p>RAID7</p><p>SHR    群晖公司</p><h2 id="3-11-总结"><a href="#3-11-总结" class="headerlink" title="3.11 总结"></a>3.11 总结</h2><p>磁盘列阵的比较</p><h1 id="4-逻辑卷管理器-LVM"><a href="#4-逻辑卷管理器-LVM" class="headerlink" title="4 逻辑卷管理器 LVM"></a>4 逻辑卷管理器 LVM</h1><ol><li>将设备指定为物理卷</li><li>用一个或多个物理卷来创建一个卷组，物理卷是用固定大小的物理区域来定义的</li><li>在物理卷上创建的逻辑卷，是由物理区域组成</li><li>可以在逻辑卷上创建文件系统并挂载</li></ol><h2 id="4-1-lv管理工具"><a href="#4-1-lv管理工具" class="headerlink" title="4.1 lv管理工具"></a>4.1 lv管理工具</h2><p>显示逻辑卷</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lvs</span><br><span class="hljs-attribute">Lvdisplay</span><br></code></pre></td></tr></table></figure><p>创建逻辑卷</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">lvcreate -L  大小 -<span class="hljs-built_in">n</span>  逻辑卷名  卷组<br></code></pre></td></tr></table></figure><p>删除逻辑卷</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">lvremove <span class="hljs-regexp">/dev/</span>VG_NAME/LV_NAME<br></code></pre></td></tr></table></figure><p>重设文件系统大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">fsadm <span class="hljs-selector-attr">[options]</span> <span class="hljs-attribute">resize</span> device <span class="hljs-selector-attr">[new_size[BKMGTEP]</span>] <br>resize2fs <span class="hljs-selector-attr">[-f]</span> <span class="hljs-selector-attr">[-F]</span> <span class="hljs-selector-attr">[-M]</span> <span class="hljs-selector-attr">[-P]</span> <span class="hljs-selector-attr">[-p]</span> device <span class="hljs-selector-attr">[new_size]</span> <br>xfs_growfs /mountpoint<br></code></pre></td></tr></table></figure><p><strong>范例</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#创建物理卷</span><br>pvcreate   <span class="hljs-regexp">/dev/</span>sda3<br><span class="hljs-comment">#为卷组分配物理卷</span><br>vgcreate vg0 <span class="hljs-regexp">/dev/</span>sda3<br><span class="hljs-comment">#从卷组创建逻辑卷</span><br>lvcreate -L <span class="hljs-number">256</span>M -n data vg0<br><span class="hljs-comment">#设置文件系统</span><br>mkfs.xfs <span class="hljs-regexp">/dev/</span>vg0/data<br><br><span class="hljs-comment">#临时挂载</span><br>mount <span class="hljs-regexp">/dev/</span>vg0<span class="hljs-regexp">/data /m</span>nt/data<br><span class="hljs-comment">#查找磁盘ID</span><br>blkid<br><span class="hljs-comment">#永久挂载</span><br>vim <span class="hljs-regexp">/etc/</span>fstab<br>mount -a<br><br><span class="hljs-comment">#删除卷组</span><br>vgremove 卷组名<br></code></pre></td></tr></table></figure><h2 id="4-2-在线扩展逻辑卷"><a href="#4-2-在线扩展逻辑卷" class="headerlink" title="4.2 在线扩展逻辑卷"></a>4.2 在线扩展逻辑卷</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#逻辑卷的空间扩展</span><br>lvextend -L 大小 <span class="hljs-regexp">/dev/</span>VG_NAME/LV_NAME<br><span class="hljs-comment">#文件系统扩展</span><br>resize2fs <span class="hljs-regexp">/dev/</span>VG_NAME/LV_NAME<br>xfs_growfs 挂载点<br><br>lvresize -r -l +<span class="hljs-number">100</span>%free <span class="hljs-regexp">/dev/</span>VG_NAME/LV_NAME<br></code></pre></td></tr></table></figure><h2 id="4-3-缩减逻辑卷"><a href="#4-3-缩减逻辑卷" class="headerlink" title="4.3 缩减逻辑卷"></a>4.3 缩减逻辑卷</h2><p><strong>xfs文件系统不支持缩减</strong>      <strong>先备份再缩减</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">umount <span class="hljs-regexp">/dev/</span>VG_NAME/LV_NAME <br>lvreduce -L 大小  -r <span class="hljs-regexp">/dev/</span>VG_NAME/LV_NAME<br>mount <span class="hljs-regexp">/dev/</span>VG_NAME/LV_NAME mountpoint<br></code></pre></td></tr></table></figure><h2 id="4-4-快照"><a href="#4-4-快照" class="headerlink" title="4.4 快照"></a>4.4 快照</h2><ul><li>备份速度快</li><li>应用场景是测试环境，不能完全替代备份</li><li>快照后，逻辑卷的修改速度会有一定影响</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#查看LV（逻辑卷）大小</span><br>lvs<br><span class="hljs-comment">#查看VG（挂载点）剩余空间</span><br>vgs<br><span class="hljs-comment">#建立快照</span><br>lvcreate -n 快照名 -s -p r -L <span class="hljs-number">1</span>G 逻辑卷<br><span class="hljs-comment">#查看快照逻辑卷</span><br>lvdisplay<br><br><span class="hljs-comment">#挂载快照,xfs注意要使用-o ro实现只读,防止快照被修改</span><br>mount -o ro,nouuid <span class="hljs-regexp">/dev/</span>vg0<span class="hljs-regexp">/data-snapshot   /m</span>nt/snap<br><br><span class="hljs-comment">#回复快照</span><br>df<br>umount 取消所有挂载<br>lvconvert --merge 快照名<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-链表</title>
    <link href="/2023/09/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/09/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><p><strong>结点结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>  ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LNode,*LinkList;<br><br>LNode* 强调一个结点<br>LinkList 强调一个单链表<br></code></pre></td></tr></table></figure><p><strong>申请一个结点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>* <span class="hljs-title">p</span>=</span>(<span class="hljs-keyword">struct</span> LNOde*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br></code></pre></td></tr></table></figure><h2 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h2><h3 id="按位插入-带头结点"><a href="#按位插入-带头结点" class="headerlink" title="按位插入(带头结点)"></a><strong>按位插入(带头结点)</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-type">int</span> i,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *p;<br><span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>p=L;<br><span class="hljs-keyword">while</span>( p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i<span class="hljs-number">-1</span>)&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>s-&gt;data = e;<br>s-&gt;next = p-&gt;next;<br>p-&gt;next = s;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位插入-不带头结点"><a href="#按位插入-不带头结点" class="headerlink" title="按位插入(不带头结点)"></a>按位插入(不带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-type">int</span> i,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>s-&gt;data = e;<br>        s-&gt;next = L;<br>        L = s;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    LNode *p;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>    p = L;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i<span class="hljs-number">-1</span>)&#123;<br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指定节点的后插操作"><a href="#指定节点的后插操作" class="headerlink" title="指定节点的后插操作"></a><strong>指定节点的后插操作</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">InsertNextNode</span><span class="hljs-params">(LNode *p,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br><span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>s-&gt;data = e;<br>s-&gt;next = p-&gt;next;<br>p-&gt;next = s;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指定节点的前插操作"><a href="#指定节点的前插操作" class="headerlink" title="指定节点的前插操作"></a><strong>指定节点的前插操作</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">InserPriorNode</span><span class="hljs-params">(LNode *p,ElemType e)</span>&#123;<br><span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *s = (LNOde *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br><span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>s-&gt;data = p-&gt;data;<br>p-&gt;data = e;<br>s-&gt;next = p-&gt;next;<br>p-&gt;next = s;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h2><h3 id="按位序删除-带头结点"><a href="#按位序删除-带头结点" class="headerlink" title="按位序删除(带头结点)"></a>按位序删除(带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *p;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>p = L;<br><span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(p-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *q = p-&gt;next;<br>e = q-&gt;data;<br>p-&gt;next = q-&gt;next;<br><span class="hljs-built_in">free</span>(q);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位序删除-不带头结点"><a href="#按位序删除-不带头结点" class="headerlink" title="按位序删除(不带头结点)"></a>按位序删除(不带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-type">int</span> i,Elemtype &amp;e)</span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *p;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>p = L;<br><span class="hljs-keyword">while</span>(p != <span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i<span class="hljs-number">-1</span>)&#123;<br>p=p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(p-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *q = p-&gt;next;<br>e = q-&gt;data;<br>p-&gt;next = q-&gt;next;<br><span class="hljs-built_in">free</span>(q);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指定节点删除"><a href="#指定节点删除" class="headerlink" title="指定节点删除"></a>指定节点删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">DeleteNode</span><span class="hljs-params">(LNode *p)</span>&#123;<br><span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>LNode *q = p-&gt;next;<br>p-&gt;data = q-&gt;data;<br>p-&gt;next = q-&gt;next;<br><span class="hljs-built_in">free</span>(q);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单链表的查找"><a href="#单链表的查找" class="headerlink" title="单链表的查找"></a>单链表的查找</h2><h3 id="按位查找-带头结点"><a href="#按位查找-带头结点" class="headerlink" title="按位查找(带头结点)"></a>按位查找(带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">LNode* <span class="hljs-title function_">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;<br>    LNode *p=L-&gt;next;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> L;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i)&#123;<br>p=p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位查找-不带头结点"><a href="#按位查找-不带头结点" class="headerlink" title="按位查找(不带头结点)"></a>按位查找(不带头结点)</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">LNode* GetElem(LinkList L,int i)&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;0)return <span class="hljs-literal">NULL</span>;<br>int <span class="hljs-attribute">j</span>=1;<br>    LNode *<span class="hljs-attribute">p</span>=L;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-attribute">i</span>==0) return L;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span> &amp;&amp; j&lt;i)&#123;<br><span class="hljs-attribute">p</span>=p-&gt;next;<br>j++;<br>&#125;<br>return p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按值查找-带头结点"><a href="#按值查找-带头结点" class="headerlink" title="按值查找(带头结点)"></a>按值查找(带头结点)</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl">LNode* LocateElem(LinkList L,ElemTYpe e)&#123;<br>LN<span class="hljs-function"><span class="hljs-title">ode</span> *p = L-&gt;</span>next;<br><span class="hljs-function"><span class="hljs-title">while</span>(p!=NULL &amp;&amp; p-&gt;</span><span class="hljs-keyword">data</span>!=e)&#123;<br><span class="hljs-function"><span class="hljs-title">p</span>=p-&gt;</span>next;<br>&#125;<br>return p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按值查找-不带头结点"><a href="#按值查找-不带头结点" class="headerlink" title="按值查找(不带头结点)"></a>按值查找(不带头结点)</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">LNode<span class="hljs-comment">* LocateElem(LinkList L,ElemType e)&#123;</span><br><span class="hljs-comment">LNode *p = L;</span><br><span class="hljs-keyword">while</span>(p!=<span class="hljs-keyword">NULL</span> <span class="hljs-variable">&amp;&amp;</span> p-&gt;data!=e)&#123;<br>p=p-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单链表的长度-带头结点"><a href="#单链表的长度-带头结点" class="headerlink" title="单链表的长度(带头结点)"></a>单链表的长度(带头结点)</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">int</span> Length(LinkList L)&#123;<br><span class="hljs-built_in">int</span> len = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>LNode *p = L-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>p = p-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br>len++<span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-keyword">return</span> len<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单链表的长度-不带头结点"><a href="#单链表的长度-不带头结点" class="headerlink" title="单链表的长度(不带头结点)"></a>单链表的长度(不带头结点)</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(LinkList L)</span></span>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>LNode *p = L;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>p=p-&gt;next;<br>len++;<br>&#125;<br><span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单链表的建立"><a href="#单链表的建立" class="headerlink" title="单链表的建立"></a>单链表的建立</h2><h3 id="尾插法建立单链表-带头结点"><a href="#尾插法建立单链表-带头结点" class="headerlink" title="尾插法建立单链表(带头结点)"></a>尾插法建立单链表(带头结点)</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">LinkList List_TailInsert(LinkList &amp;L)&#123;  <br>int x;  <br>L=(LinkList)malloc(sizeof(LNode)); <br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br>LNode *s,*<span class="hljs-attribute">r</span>=L;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br><span class="hljs-keyword">while</span>(x!=9999)&#123;<br>s=(LNode *)malloc(sizeof(LNode));<br>s-&gt;<span class="hljs-attribute">data</span>=x;  <br>r-&gt;<span class="hljs-attribute">next</span>=s;  <br><span class="hljs-attribute">r</span>=s;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>&#125;<br>r-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>return L;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尾插法建立单链表-不带头结点"><a href="#尾插法建立单链表-不带头结点" class="headerlink" title="尾插法建立单链表(不带头结点)"></a>尾插法建立单链表(不带头结点)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LinkList <span class="hljs-title">List_TailInsert</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;  <br><span class="hljs-type">int</span> x;  <br>LNode *s,*r=L;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br><span class="hljs-keyword">while</span> (x != <span class="hljs-number">9999</span>) &#123;<br>s = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s-&gt;data = x;<br>s-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (L==<span class="hljs-literal">NULL</span>) &#123;<br>L = s;<br>r = L;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>r-&gt;next = s;<br>r = s;<br>&#125;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>&#125;<br>r-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="头插法建立单链表-带头结点"><a href="#头插法建立单链表-带头结点" class="headerlink" title="头插法建立单链表(带头结点)"></a>头插法建立单链表(带头结点)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LinkList <span class="hljs-title">List_HeadInsert</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br><span class="hljs-type">int</span> x;<br>L=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));  <br>L-&gt;next = <span class="hljs-literal">NULL</span>;<br>LNode *s;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br><span class="hljs-keyword">while</span>(x!=<span class="hljs-number">9999</span>)&#123;<br>s=(LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s-&gt;data=x;  <br>s-&gt;next=L-&gt;next;<br>L-&gt;next=s;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>&#125;<br><span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="头插法建立单链表-不带头结点"><a href="#头插法建立单链表-不带头结点" class="headerlink" title="头插法建立单链表(不带头结点)"></a>头插法建立单链表(不带头结点)</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl">LinkList List_HeadInsert(LinkList &amp;L)&#123;<br>int x;<br>LNode *s;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br><span class="hljs-keyword">while</span>(x!=<span class="hljs-number">9999</span>)&#123;<br>s = (LNode*)malloc(sizeof(LNode));<br><span class="hljs-function"><span class="hljs-title">s</span>-&gt;</span><span class="hljs-keyword">data</span> = x;<br><span class="hljs-function"><span class="hljs-title">s</span>-&gt;</span>next = NULL;<br><span class="hljs-keyword">if</span> (L==NULL) &#123;<br>L = s;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-function"><span class="hljs-title">s</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = L-&gt;</span>next;<br>L-&gt;next = s;<br>            <span class="hljs-function"><span class="hljs-title">s</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span> = L-&gt;</span><span class="hljs-keyword">data</span>;<br>            L-&gt;<span class="hljs-keyword">data</span> = x;<br>&#125;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>&#125;<br>return L;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-DNS服务原理和互联网域名注册</title>
    <link href="/2023/09/12/Linux-DNS%E6%9C%8D%E5%8A%A1%E5%8E%9F%E7%90%86%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C/"/>
    <url>/2023/09/12/Linux-DNS%E6%9C%8D%E5%8A%A1%E5%8E%9F%E7%90%86%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="1-名字解析介绍和DNS"><a href="#1-名字解析介绍和DNS" class="headerlink" title="1 名字解析介绍和DNS"></a>1 名字解析介绍和DNS</h1><figure class="highlight accesslog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs accesslog">Linux：/etc/hosts<br>Windows：%WINDI%/system32/drivers/etc/hosts<br><br>#格式<br><span class="hljs-number">122.10.117.2</span>www.magedu.orgwww<br><span class="hljs-number">93.46.8.89</span>www.goole.comgoole<br><br>主机名www + 域名magedu.org<br></code></pre></td></tr></table></figure><h2 id="1-1-DNS-服务工作原理"><a href="#1-1-DNS-服务工作原理" class="headerlink" title="1.1 DNS 服务工作原理"></a>1.1 DNS 服务工作原理</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl">C<span class="hljs-function"><span class="hljs-title">lient</span>- -&gt;</span> <span class="hljs-function"><span class="hljs-title">hosts</span> files- - -&gt;</span> C<span class="hljs-function"><span class="hljs-title">lient</span> DNS Service Local Cache- -&gt;</span> DNS S<span class="hljs-function"><span class="hljs-title">erver</span> (recursion recursion) - -&gt;</span> DNS S<span class="hljs-function"><span class="hljs-title">erver</span> Cache- - -&gt;</span> DNS <span class="hljs-function"><span class="hljs-title">iteration</span> (iterations) - -&gt;</span> <span class="hljs-function"><span class="hljs-title">root</span>- - - -&gt;</span> <span class="hljs-function"><span class="hljs-title">top</span>-level domain DNS- -&gt;</span> secondary domain DNS...<br><br>客户端——&gt;hosts文件——&gt;客户端DNS服务本地缓存——&gt;DNS服务器（递归查询）——&gt;DNS服务器缓存——&gt;DNS迭代（迭代查询）【——&gt;根——&gt;顶级域名DNS——&gt;二级域名DNS..。】<br></code></pre></td></tr></table></figure><p><strong>DNS查询类型</strong></p><p><a href="https://help.aliyun.com/document_detail/102237.html">https://help.aliyun.com/document_detail/102237.html</a></p><h2 id="1-2-DNS服务器类型"><a href="#1-2-DNS服务器类型" class="headerlink" title="1.2 DNS服务器类型"></a>1.2 DNS服务器类型</h2><ul><li>主DNS服务器</li><li>从DNS服务器</li><li>缓存DNS服务器（转发器）</li></ul><h1 id="2-DNS软件-bind"><a href="#2-DNS软件-bind" class="headerlink" title="2 DNS软件 bind"></a>2 DNS软件 bind</h1><p>DNS服务器软件：bind、powerdns、dnsmasq、unbound、coredns</p><h2 id="2-1-BIND相关程序包"><a href="#2-1-BIND相关程序包" class="headerlink" title="2.1 BIND相关程序包"></a>2.1 BIND相关程序包</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">dnf -y <span class="hljs-keyword">install </span><span class="hljs-keyword">bind </span><span class="hljs-keyword">bind-utils</span><br><span class="hljs-keyword"></span>apt -y <span class="hljs-keyword">install </span><span class="hljs-keyword">bind9 </span><span class="hljs-keyword">bind9-u</span><br></code></pre></td></tr></table></figure><h2 id="2-2-BIND包相关文件"><a href="#2-2-BIND包相关文件" class="headerlink" title="2.2 BIND包相关文件"></a>2.2 BIND包相关文件</h2><ul><li>BIND主程序：/usr/sbin/named</li><li>服务脚本和Unit名称：/etc/rc.d/init.d/named、/usr/lib/systemd/system/named.service</li><li>主配置文件：/etc/named.conf、/etc/named.rfc1912.zones、/etc/rndc.key</li><li>管理工具：/usr/sbin/rndc：remote name domain controller    默认与bind安装在同一主机,且 只能通过127.0.0.1连接named进程,提供辅助性的管理功能；953/tcp</li><li>解析库文件：/var/named/ZONE_NAME.ZONE</li></ul><h2 id="2-3-主配置文件"><a href="#2-3-主配置文件" class="headerlink" title="2.3 主配置文件"></a>2.3 主配置文件</h2><ul><li>全局配置：options{}；</li><li>日志子系统配置：logging{}；</li><li>区域定义：本机能够为哪些zone进行解析，就要定义哪些zone</li></ul><p>​    zone“ZONE_NAME” IN {}；</p><p>dnssec：建议关闭dnssec，设为no</p><h1 id="3-实现主DNS服务器"><a href="#3-实现主DNS服务器" class="headerlink" title="3 实现主DNS服务器"></a>3 实现主DNS服务器</h1><h2 id="3-1-主DNS服务器配置"><a href="#3-1-主DNS服务器配置" class="headerlink" title="3.1 主DNS服务器配置"></a>3.1 主DNS服务器配置</h2><p>1.在主配置文件中定义区域</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/ etc/</span>named.conf <br><br><span class="hljs-comment"># 注释掉下面两行</span><br><span class="hljs-regexp">//</span> listen-on port <span class="hljs-number">53</span> &#123;<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;&#125;; <br><span class="hljs-regexp">//</span> allow-query &#123;localhost;&#125;; <br><br>zone <span class="hljs-string">&quot;ZONE _ NAME&quot;</span> IN &#123;<br>type &#123;master | split | hint | forward&#125;; <br>file <span class="hljs-string">&quot;ZONE_NAME.zone&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>2.定义区域解析库</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-meta">$TTL</span> <span class="hljs-number">86400</span> <br><span class="hljs-meta">$ORIGIN</span> magedu.org. <br>@ <span class="hljs-keyword">IN</span> <span class="hljs-keyword">SOA</span> ns1.magedu.org. admin.magedu.org (  <br><span class="hljs-number">2015042201</span>  <br><span class="hljs-number">1</span>H  <br><span class="hljs-number">5</span>M  <br><span class="hljs-number">7</span>D  <br><span class="hljs-number">1</span>D )  <br><span class="hljs-keyword">IN</span> <span class="hljs-keyword">NS</span> ns1  <br><span class="hljs-keyword">IN</span> <span class="hljs-keyword">NS</span> ns2  <br><span class="hljs-keyword">IN</span> <span class="hljs-keyword">MX</span> <span class="hljs-number">10</span> mx1  <br><span class="hljs-keyword">IN</span> <span class="hljs-keyword">MX</span> <span class="hljs-number">20</span> mx2 <br>ns1 <span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span> <span class="hljs-number">172.16.100.11</span> <br>ns2 <span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span> <span class="hljs-number">172.16.100.12</span> <br>mx1 <span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span> <span class="hljs-number">172.16.100.13</span> <br>mx2 <span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span> <span class="hljs-number">172.16.100.14</span> <br>websrv <span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span> <span class="hljs-number">172.16.100.11</span> <br>websrv <span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span> <span class="hljs-number">172.16.100.12</span> <br>www <span class="hljs-keyword">IN</span> <span class="hljs-keyword">CNAME</span>websrv<br></code></pre></td></tr></table></figure><h2 id="3-2-主配置文件语法检查"><a href="#3-2-主配置文件语法检查" class="headerlink" title="3.2 主配置文件语法检查"></a>3.2 主配置文件语法检查</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">named-checkconf</span><br></code></pre></td></tr></table></figure><h2 id="3-3-解析库文件语法检查"><a href="#3-3-解析库文件语法检查" class="headerlink" title="3.3 解析库文件语法检查"></a>3.3 解析库文件语法检查</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">named-checkzone <span class="hljs-string">&quot;magedu.org&quot;</span> <span class="hljs-regexp">/var/</span>named/magedu.org.zone<br></code></pre></td></tr></table></figure><h2 id="3-4-配置生效"><a href="#3-4-配置生效" class="headerlink" title="3.4 配置生效"></a>3.4 配置生效</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#三种方式</span><br>rndc <span class="hljs-keyword">reload</span><br>systemctl <span class="hljs-keyword">reload</span> named<br>service named <span class="hljs-keyword">reload</span><br></code></pre></td></tr></table></figure><h2 id="3-5-DNS-测试和管理工具"><a href="#3-5-DNS-测试和管理工具" class="headerlink" title="3.5 DNS 测试和管理工具"></a>3.5 DNS 测试和管理工具</h2><h3 id="3-5-1-dig"><a href="#3-5-1-dig" class="headerlink" title="3.5.1 dig"></a>3.5.1 dig</h3><p>dig只用于测试dns系统,不会查询hosts文件进行解析</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#测试反向解析</span><br><span class="hljs-keyword">dig </span>-x IP = <span class="hljs-keyword">dig </span>–t ptr reverseip.in-<span class="hljs-keyword">addr.arpa</span><br><span class="hljs-keyword"></span><span class="hljs-comment">#模拟区域传送</span><br><span class="hljs-keyword">dig </span>-t axfr ZONE_NAME @SERVER <br><span class="hljs-keyword">dig </span>-t axfr magedu.<span class="hljs-keyword">org </span>@<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span> <br><span class="hljs-keyword">dig </span>–t axfr <span class="hljs-number">100</span>.<span class="hljs-number">1</span>.<span class="hljs-number">10</span>.in-<span class="hljs-keyword">addr.arpa </span>@<span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <br><span class="hljs-keyword">dig </span>-t NS . @<span class="hljs-number">114</span>.<span class="hljs-number">114</span>.<span class="hljs-number">114</span>.<span class="hljs-number">114</span> <br><span class="hljs-keyword">dig </span>-t NS . @a.root-servers.net<br></code></pre></td></tr></table></figure><h3 id="3-5-2-host"><a href="#3-5-2-host" class="headerlink" title="3.5.2 host"></a>3.5.2 host</h3><p>格式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">host [-t <span class="hljs-keyword">type</span>] <span class="hljs-type">name</span> [<span class="hljs-keyword">SERVER</span>]<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">host -t NS magedu<span class="hljs-meta">.org</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <br>host -t soa magedu<span class="hljs-meta">.org</span> <br>host -t mx magedu<span class="hljs-meta">.org</span> <br>host -t axfr magedu<span class="hljs-meta">.org</span> <br>host <span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure><h3 id="3-5-3-nslookup"><a href="#3-5-3-nslookup" class="headerlink" title="3.5.3 nslookup"></a>3.5.3 nslookup</h3><p>nslookup 可以支持交互和非交互式两种方式执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nslookup <span class="hljs-selector-attr">[-option]</span> <span class="hljs-selector-attr">[name | -]</span> <span class="hljs-selector-attr">[server]</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">nslookup&gt;<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>IP:指明使用哪个DNS server进行查询<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">q</span>=RR_TYPE:指明查询的资源记录类型<br>NAME:要查询的名称<br></code></pre></td></tr></table></figure><h3 id="3-5-4-rndc"><a href="#3-5-4-rndc" class="headerlink" title="3.5.4 rndc"></a>3.5.4 rndc</h3><p>利用rndc工具可以实现管理DNS功能 rndc </p><p>监听端口: 953/tcp</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">rndc COMMAND </span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">COMMAND</span><span class="hljs-punctuation">:    </span><br><span class="hljs-attribute">status</span><span class="hljs-punctuation">:</span> <span class="hljs-string">查看状态  </span><br><span class="hljs-attribute">reload</span><span class="hljs-punctuation">:</span> <span class="hljs-string">重载主配置文件和区域解析库文件  </span><br><span class="hljs-attribute">reload zonename</span><span class="hljs-punctuation">:</span> <span class="hljs-string">重载区域解析库文件  </span><br><span class="hljs-attribute">retransfer zonename</span><span class="hljs-punctuation">:</span> <span class="hljs-string">手动启动区域传送,而不管序列号是否增加  </span><br><span class="hljs-attribute">notify zonename</span><span class="hljs-punctuation">:</span> <span class="hljs-string">重新对区域传送发通知  </span><br><span class="hljs-attribute">reconfig</span><span class="hljs-punctuation">:</span> <span class="hljs-string">重载主配置文件  </span><br><span class="hljs-attribute">querylog</span><span class="hljs-punctuation">:</span> <span class="hljs-string">开启或关闭查询日志文件/var/log/message  </span><br><span class="hljs-attribute">trace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">递增debug一个级别  </span><br><span class="hljs-attribute">trace LEVEL</span><span class="hljs-punctuation">:</span> <span class="hljs-string">指定使用的级别  </span><br>notrace：将调试级别设置为 0  <br>flush：清空DNS服务器的所有缓存记录<br></code></pre></td></tr></table></figure><h1 id="4-实现反向解析配置"><a href="#4-实现反向解析配置" class="headerlink" title="4 实现反向解析配置"></a>4 实现反向解析配置</h1><p>反向区域：即将IP反向解析为FQDN </p><p>区域名称：网络地址反写.in-addr.arpa.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">100</span>.--&gt; <span class="hljs-number">100</span>.<span class="hljs-number">16</span>.<span class="hljs-number">172</span>.in-addr.arpa .<br></code></pre></td></tr></table></figure><p>1.定义区域</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Zone <span class="hljs-string">&quot;ZONE _ NAME&quot;</span> <span class="hljs-keyword">IN</span> &#123;<br><span class="hljs-keyword">type</span> &#123;<span class="hljs-keyword">master</span> <span class="hljs-title">| slave</span> | forward&#125;; <br>file <span class="hljs-string">&quot; network address. zone&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>2.定义区域解析库文件</p><p>不需要A记录,以PTR记录为主</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$TTL</span> <span class="hljs-number">86400</span> <br><span class="hljs-variable">$ORIGIN</span> <span class="hljs-number">16.172</span><span class="hljs-selector-class">.in-addr</span><span class="hljs-selector-class">.arpa</span>. <br>@ IN SOA ns1<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. admin<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. (  <br><span class="hljs-number">2015042201</span>  <br><span class="hljs-number">1</span>H  <br><span class="hljs-number">5</span>M  <br><span class="hljs-number">7</span>D  <br><span class="hljs-number">1</span>D )  <br>IN NS ns1<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. <br><span class="hljs-number">1.2</span> IN PTR www<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. <br><span class="hljs-number">3.4</span> IN PTR mx1<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>.<br>#实现以下解析<br><span class="hljs-number">172.16</span>.<span class="hljs-number">2.1</span> www<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span><br><span class="hljs-number">172.16</span>.<span class="hljs-number">4.3</span> mx1<span class="hljs-selector-class">.magedu</span>.org<br></code></pre></td></tr></table></figure><h1 id="5-实现从服务器"><a href="#5-实现从服务器" class="headerlink" title="5 实现从服务器"></a>5 实现从服务器</h1><p>只有一台主DNS服务器,存在单点失败的问题,可以建立主DNS服务器的备份服务器,即从服务器来实 现DNS服务的容错机制.从服务器可以自动和主服务器进行单向的数据同步,从而和主DNS服务器一 样,也可以对外提供查询服务,但从服务器不提供数据更新服务.</p><h2 id="5-1-DNS从服务器"><a href="#5-1-DNS从服务器" class="headerlink" title="5.1 DNS从服务器"></a>5.1 DNS从服务器</h2><ol><li>应该为一台独立的名称服务器 </li><li>主服务器的区域解析库文件中必须有一条NS记录指向从服务器 </li><li>从服务器只需要定义区域,而无须提供解析库文件；解析库文件应该放置于/var/named/slaves/目 录中 </li><li>主服务器得允许从服务器作区域传送 </li><li>主从服务器时间应该同步,可通过ntp进行 </li><li>bind程序的版本应该保持一致；否则,应该从高,主低</li></ol><h2 id="5-2-定义从区域"><a href="#5-2-定义从区域" class="headerlink" title="5.2 定义从区域"></a>5.2 定义从区域</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">zone <span class="hljs-string">&quot;ZONE_NAME&quot;</span> IN &#123;  <br>type slave<span class="hljs-comment">;  </span><br>masters &#123; MASTER_IP<span class="hljs-comment">; &#125;;  </span><br>file <span class="hljs-string">&quot;slaves/ZONE_NAME.zone&quot;</span><span class="hljs-comment">; </span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="6-实现子域"><a href="#6-实现子域" class="headerlink" title="6 实现子域"></a>6 实现子域</h1><h2 id="6-1-子域委派授权"><a href="#6-1-子域委派授权" class="headerlink" title="6.1 子域委派授权"></a>6.1 子域委派授权</h2><p>将子域委派给其它主机管理,实现分布式DNS数据库</p><p>正向解析区域子域方法</p><p>e.g.定义两个子域区域</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">shanghai<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. IN NS ns1<span class="hljs-selector-class">.ops</span><span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. <br>shanghai<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. IN NS ns2<span class="hljs-selector-class">.ops</span><span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. <br>shenzhen<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. IN NS ns1<span class="hljs-selector-class">.shenzhen</span><span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. <br>shenzhen<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>.    IN NS ns2<span class="hljs-selector-class">.shenzhen</span><span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. <br>ns1<span class="hljs-selector-class">.shanghai</span><span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. IN A <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span> <br>ns2<span class="hljs-selector-class">.shanghai</span><span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. IN A <span class="hljs-number">1.1</span>.<span class="hljs-number">1.2</span> <br>ns1<span class="hljs-selector-class">.shenzhen</span><span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. IN A <span class="hljs-number">1.1</span>.<span class="hljs-number">1.3</span> <br>ns2<span class="hljs-selector-class">.shenzhen</span><span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.org</span>. IN A <span class="hljs-number">1.1</span>.<span class="hljs-number">1.4</span><br></code></pre></td></tr></table></figure><h1 id="7-实现DNS转发（缓存）服务器"><a href="#7-实现DNS转发（缓存）服务器" class="headerlink" title="7 实现DNS转发（缓存）服务器"></a>7 实现DNS转发（缓存）服务器</h1><h2 id="7-1-DNS转发"><a href="#7-1-DNS转发" class="headerlink" title="7.1 DNS转发"></a>7.1 DNS转发</h2><p>利用DNS转发，可以将用户的DNS请求，转发至指定的DNS服务，而非默认的根DNS服务器，并将指定的服务器查询的返回结果进行缓存，提高效率。</p><p>注意：</p><p>1.被转发的服务器需要能够未请求者做递归，否则转发请求不予进行</p><p>2.在/etc/named.conf的全局配置快中，关闭dnssec功能</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dnssec-<span class="hljs-built_in">enable</span> <span class="hljs-literal">no</span>;<br>dnssec-validation <span class="hljs-literal">no</span>;<br></code></pre></td></tr></table></figure><h2 id="7-2-转发方式"><a href="#7-2-转发方式" class="headerlink" title="7.2 转发方式"></a>7.2 转发方式</h2><h3 id="7-2-1全局转发"><a href="#7-2-1全局转发" class="headerlink" title="7.2.1全局转发"></a>7.2.1全局转发</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Options</span> &#123;    <br>forward <span class="hljs-built_in">first</span>|<span class="hljs-type">only</span>;    <br>forwarders &#123; ip;&#125;; <br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="7-2-2-特定区域转发"><a href="#7-2-2-特定区域转发" class="headerlink" title="7.2.2 特定区域转发"></a>7.2.2 特定区域转发</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">zone</span> &quot;ZONE_NAME&quot; <span class="hljs-keyword">IN</span> &#123;  <br><span class="hljs-keyword">type</span> forward;  <br>forward first|<span class="hljs-keyword">only</span>;  <br>forwarders &#123; ip;&#125;; <br>&#125;;<br></code></pre></td></tr></table></figure><p>first：先转发至指定DNS服务器,如果无法解析查询请求,则本服务器再去根服务器查询 </p><p>only: 先转发至指定DNS服务器,如果无法解析查询请求,则本服务器将不再去根服务器查询</p><h1 id="8-实现智能-DNS"><a href="#8-实现智能-DNS" class="headerlink" title="8 实现智能 DNS"></a>8 实现智能 DNS</h1><h2 id="8-1-GSLB"><a href="#8-1-GSLB" class="headerlink" title="8.1 GSLB"></a>8.1 GSLB</h2><p>全局负载均衡</p><h2 id="8-2-CDN"><a href="#8-2-CDN" class="headerlink" title="8.2 CDN"></a>8.2 CDN</h2><p>内容分发网络</p><h2 id="8-3-智能DNS相关技术"><a href="#8-3-智能DNS相关技术" class="headerlink" title="8.3 智能DNS相关技术"></a>8.3 智能DNS相关技术</h2><h3 id="8-3-1-bind中ACL"><a href="#8-3-1-bind中ACL" class="headerlink" title="8.3.1 bind中ACL"></a>8.3.1 bind中ACL</h3><p>ACL：把一个或多个地址归并为一个集合,并通过一个统一的名称调用</p><h3 id="8-3-2-bind有四个内置的acl"><a href="#8-3-2-bind有四个内置的acl" class="headerlink" title="8.3.2 bind有四个内置的acl"></a>8.3.2 bind有四个内置的acl</h3><ul><li>none         没有一个主机</li><li>any            任意主机</li><li>localhost  本机</li><li>localnet    本机的IP同掩码运算后得到的网络地址</li></ul><h3 id="8-3-3-访问控制的指令"><a href="#8-3-3-访问控制的指令" class="headerlink" title="8.3.3 访问控制的指令"></a>8.3.3 访问控制的指令</h3><ul><li>allow-query {}： 允许查询的主机；白名单 </li><li>allow-transfer {}：允许区域传送的主机；白名单 </li><li>allow-recursion {}: 允许递归的主机,建议全局使用 </li><li>allow-update {}: 允许更新区域数据库中的内容</li></ul><h3 id="8-3-4-View视图"><a href="#8-3-4-View视图" class="headerlink" title="8.3.4 View视图"></a>8.3.4 View视图</h3><p>将ACL和区域数据库实现对应关系,以实现智能DNS。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs abnf">view VIEW_NAME &#123;<br>match-clients &#123; beijingnet<span class="hljs-comment">; &#125;;  </span><br>zone <span class="hljs-string">&quot;magedu.org&quot;</span> &#123;  <br>type master<span class="hljs-comment">;  </span><br>file <span class="hljs-string">&quot;magedu.org.zone.bj&quot;</span><span class="hljs-comment">;   </span><br>&#125;<span class="hljs-comment">;  </span><br>include <span class="hljs-string">&quot;/etc/named.rfc1912.zones&quot;</span><span class="hljs-comment">; </span><br>&#125;<span class="hljs-comment">; </span><br><br>view VIEW_NAME &#123;  <br>match-clients &#123; shanghainet<span class="hljs-comment">; &#125;;  </span><br>zone <span class="hljs-string">&quot;magedu.org&quot;</span> &#123;  <br>type master<span class="hljs-comment">;  </span><br>file <span class="hljs-string">&quot;magedu.org.zone.sh&quot;</span><span class="hljs-comment">;   </span><br>    &#125;<span class="hljs-comment">;  </span><br>    include <span class="hljs-string">&quot;/etc/named.rfc1912.zones&quot;</span><span class="hljs-comment">; </span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="9-DNS排错"><a href="#9-DNS排错" class="headerlink" title="9 DNS排错"></a>9 DNS排错</h1><ul><li>SERVFAIL：The nameserver encountered a problem while processing the query.<ul><li>可使用dig +trace排错,可能是网络和防火墙导致</li></ul></li><li>nxdemion：The queried name does not exist in the zone.<ul><li>可能是CNAME对应的A记录不存在导致</li></ul></li><li>REFUSED: The nameserver refused the client’s DNS request due to policy restrictions. <ul><li>可能是DNS策略导致</li></ul></li></ul><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-论文写作</title>
    <link href="/2023/09/05/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C/"/>
    <url>/2023/09/05/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="评阅原则"><a href="#评阅原则" class="headerlink" title="评阅原则"></a>评阅原则</h1><ul><li>假设的合理性</li><li>建模的创造性</li><li>结果的正理性</li><li>表述的清晰程度</li></ul><h1 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h1><ul><li>摘要</li><li>问题的叙述</li><li>问题的分析，背景的分析等</li><li>模型的假设，符号说明（表）</li><li>模型的建立与求解</li><li>模型分析</li><li>模型评价</li><li>参考文献</li><li>附录</li></ul><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>评委们通过你的摘要就决定是否继续阅读你的论文</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202309052237533.png" alt="image-20230905223714354"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202309052238809.png" alt="image-20230905223836749"></p><h2 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述"></a>问题重述</h2><p>不可以Copy，需要<strong>适当总结归纳</strong></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p><strong>思维导图</strong>    <strong>思维展开</strong></p><h2 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h2><p>**题目中挖掘 **            影响较小的因素</p><h2 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h2><p>表格样式</p><h2 id="模型的建立与求解"><a href="#模型的建立与求解" class="headerlink" title="模型的建立与求解"></a>模型的建立与求解</h2><p><strong>问题分析</strong></p><p>问题一</p><p>问题二</p><p>问题三</p><p><strong>模型建立</strong></p><p>原问题  -&gt; 数学语言</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202309052250501.png" alt="image-20230905225019359"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202309052251077.png" alt="image-20230905225101029"></p><p><strong>注意</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202309052251836.png" alt="image-20230905225148738"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202309052253253.png" alt="image-20230905225307199"></p><p><strong>模型求解</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202309052305488.png" alt="image-20230905230511435"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>数学建模技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-插值和=与拟合</title>
    <link href="/2023/08/31/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88/"/>
    <url>/2023/08/31/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="1-插值"><a href="#1-插值" class="headerlink" title="1 插值"></a>1 插值</h1><h2 id="1-1-插值方法"><a href="#1-1-插值方法" class="headerlink" title="1.1 插值方法"></a>1.1 插值方法</h2><h3 id="1-1-1-利用待定系数法确定插值多项式"><a href="#1-1-1-利用待定系数法确定插值多项式" class="headerlink" title="1.1.1 利用待定系数法确定插值多项式"></a>1.1.1 利用待定系数法确定插值多项式</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308311550765.png" alt="image-20230831154845708"></p><p><strong>e.g.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308311550755.png"></p><p>利用Python软件，求得的插值多项式为    <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308311550228.png" alt="img" style="zoom: 33%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308311550236.png" alt="img" style="zoom:33%;" />处函数的估计值分别为14.918,20.8846。</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus">import numpy as np<br>import pylab as plt<br>x0 = np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>)<br>y0 = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[16, 18, 21, 17, 15, 12]</span>)<br>A = np<span class="hljs-selector-class">.vander</span>(x0)<br><span class="hljs-selector-tag">p</span> = np<span class="hljs-selector-class">.linalg</span><span class="hljs-selector-class">.inv</span>(A) @ y0  #求插值多项式的系数<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;从高次幂到低次幂的系数为：&#x27;</span>, np.round(p,<span class="hljs-number">4</span>)</span></span>)<br>yh = np<span class="hljs-selector-class">.polyval</span>(<span class="hljs-selector-tag">p</span>, <span class="hljs-selector-attr">[1.5, 2.6]</span>)  #计算函数值<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;预测值为：&#x27;</span>, np.round(yh,<span class="hljs-number">4</span>)</span></span>)<br>plt<span class="hljs-selector-class">.plot</span>(x0, y0, <span class="hljs-string">&#x27;o&#x27;</span>)  #画出已知数据点的散点<br>xt = np<span class="hljs-selector-class">.linspace</span>(<span class="hljs-number">1</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">100</span>)<br>plt<span class="hljs-selector-class">.plot</span>(xt, np<span class="hljs-selector-class">.polyval</span>(<span class="hljs-selector-tag">p</span>, xt))  #画插值曲线<br>plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><h3 id="1-1-2-拉格朗日插值法"><a href="#1-1-2-拉格朗日插值法" class="headerlink" title="1.1.2 拉格朗日插值法"></a>1.1.2 拉格朗日插值法</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">import numpy as <span class="hljs-built_in">np</span><br>from scipy.interpolate import <span class="hljs-built_in">lagrange</span><br><br>x0 = <span class="hljs-built_in">np</span>.arange(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>); y0 = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">array</span>([<span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">17</span>, <span class="hljs-number">15</span>, <span class="hljs-number">12</span>])<br>p = <span class="hljs-built_in">lagrange</span>(x0, y0)  #求拉格朗日插值多项式的系数<br><span class="hljs-built_in">print</span>(&#x27;从高次幂到低次幂的系数为：&#x27;, <span class="hljs-built_in">np</span>.<span class="hljs-built_in">round</span>(p,<span class="hljs-number">4</span>))<br>yh = <span class="hljs-built_in">np</span>.polyval(p, [<span class="hljs-number">1.5</span>, <span class="hljs-number">2.6</span>])  #计算多项式的函数值<br><span class="hljs-built_in">print</span>(&#x27;预测值为：&#x27;, <span class="hljs-built_in">np</span>.<span class="hljs-built_in">round</span>(yh,<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><h3 id="1-2-用python求解插值问题"><a href="#1-2-用python求解插值问题" class="headerlink" title="1.2 用python求解插值问题"></a>1.2 用python求解插值问题</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308311604683.png" alt="image-20230831160430625"></p><h3 id="1-2-1-一维插值"><a href="#1-2-1-一维插值" class="headerlink" title="1.2.1 一维插值"></a>1.2.1 一维插值</h3><p><strong>e.g.1</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308311608927.png" alt="image-20230831160848899"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> interp1d<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> lagrange<br><span class="hljs-keyword">import</span> pylab <span class="hljs-keyword">as</span> plt<br><br>a = np.loadtxt(<span class="hljs-string">&#x27;data7_4.txt&#x27;</span>)<br>x0 = a[<span class="hljs-number">0</span>]; y0 = a[<span class="hljs-number">1</span>]<br>x = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">151</span>)<br>yx1 = interp1d(x0, y0)  <span class="hljs-comment">#分段线性插值</span><br>y1 = yx1(x)  <span class="hljs-comment">#计算插值点的函数值</span><br>p2 = lagrange(x0, y0)  <span class="hljs-comment">#计算Lagange插值</span><br>y2 = np.polyval(p2, x)<br>yx3 = interp1d(x0, y0, <span class="hljs-string">&#x27;cubic&#x27;</span>)<br>y3 = yx3(x)<br><br>dx = np.diff(x); dy = np.diff(y3)<br>dyx = dy / dx; dyx0 = dyx[<span class="hljs-number">0</span>]<br>xt = x[<span class="hljs-number">130</span>:]; yt = y3[<span class="hljs-number">130</span>:]<br>ymin = <span class="hljs-built_in">min</span>(yt)<br>xmin = [xt[ind] <span class="hljs-keyword">for</span> ind, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(yt) <span class="hljs-keyword">if</span> v==ymin]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x=0处斜率的数值解为：&#x27;</span>, dyx0)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;xmin=&#x27;</span>, xmin); <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ymin=&#x27;</span>, ymin)<br><br>plt.rc(<span class="hljs-string">&#x27;font&#x27;</span>, family=<span class="hljs-string">&#x27;SimHei&#x27;</span>) <span class="hljs-comment">#用来正常显示中文标签</span><br>plt.rc(<span class="hljs-string">&#x27;axes&#x27;</span>, unicode_minus=<span class="hljs-literal">False</span>) <span class="hljs-comment">#用来正常显示负号</span><br>plt.rc(<span class="hljs-string">&#x27;font&#x27;</span>, size=<span class="hljs-number">16</span>)<br>plt.subplot(<span class="hljs-number">131</span>); plt.plot(x, y1)<br>plt.title(<span class="hljs-string">&#x27;分段线性插值&#x27;</span>)<br>plt.subplot(<span class="hljs-number">132</span>); plt.plot(x, y2)<br>plt.title(<span class="hljs-string">&#x27;Lagrange插值&#x27;</span>)<br>plt.subplot(<span class="hljs-number">133</span>); plt.plot(x,y3)<br>plt.title(<span class="hljs-string">&#x27;三次样条插值&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><strong>e.g.2</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308311659926.png" alt="image-20230831165932875"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> scipy.interpolate import UnivariateSpline, interp1d<br><span class="hljs-attribute">import</span> numpy as np<br><br><span class="hljs-attribute">t0</span>=np.linspace(<span class="hljs-number">0</span>.<span class="hljs-number">15</span>, <span class="hljs-number">0</span>.<span class="hljs-number">18</span>, <span class="hljs-number">4</span>)<br><span class="hljs-attribute">v0</span>=np.array([<span class="hljs-number">3</span>.<span class="hljs-number">5</span>, <span class="hljs-number">1</span>.<span class="hljs-number">5</span>, <span class="hljs-number">2</span>.<span class="hljs-number">5</span>, <span class="hljs-number">2</span>.<span class="hljs-number">8</span>])<br><span class="hljs-attribute">sp1</span> = UnivariateSpline(t0, v0)  #求三次样条函数<br><span class="hljs-attribute">print</span>(&#x27;三次样条函数系数：&#x27;,sp1.get_coeffs())<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;第1种方法的积分值：&quot;</span>,sp1.integral(<span class="hljs-number">0</span>.<span class="hljs-number">15</span>,<span class="hljs-number">0</span>.<span class="hljs-number">18</span>))  #求样条函数的积分<br><span class="hljs-attribute">sp2</span>=interp1d(t0,v0,&#x27;cubic&#x27;)  #第二种方法<br><span class="hljs-attribute">tn</span>=np.linspace(<span class="hljs-number">0</span>.<span class="hljs-number">15</span>,<span class="hljs-number">0</span>.<span class="hljs-number">18</span>,<span class="hljs-number">200</span>)<br><span class="hljs-attribute">vn</span>=sp2(tn)<br><span class="hljs-attribute">I2</span>=np.trapz(vn,tn); print(<span class="hljs-string">&quot;第2种方法的积分值：&quot;</span>, I2)<br></code></pre></td></tr></table></figure><p><strong>e.g.3</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308311738278.png" alt="image-20230831173816216"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> scipy.interpolate import UnivariateSpline<br>import pylab as plt<br>import numpy as np<br><br><span class="hljs-attribute">a</span>=np.loadtxt(&#x27;data7_6.txt&#x27;)<br><span class="hljs-attribute">x0</span>=a[::3].flatten()  #提出点的横坐标<br><span class="hljs-attribute">y1</span>=a[1::3].flatten()  #提出下边界的纵坐标<br><span class="hljs-attribute">y2</span>=a[2::3].flatten()  #提出上边界的纵坐标<br>plt.plot(x0,y1,<span class="hljs-string">&#x27;*-&#x27;</span>); plt.plot(x0,y2,<span class="hljs-string">&#x27;.-&#x27;</span>)<br><span class="hljs-attribute">f1</span>=UnivariateSpline(x0,y1)  #计算三次样条函数<br><span class="hljs-attribute">f2</span>=UnivariateSpline(x0,y2)  <br><span class="hljs-attribute">d1</span>=f1.derivative(1)   #求样条函数的导数<br><span class="hljs-attribute">d2</span>=f2.derivative(1)   <br><span class="hljs-attribute">x</span>=np.linspace(x0[0],x0[-1],1000)<br><span class="hljs-attribute">d10</span>=d1(x); <span class="hljs-attribute">d20</span>=d2(x)  #计算导数的具体值<br><span class="hljs-attribute">L</span>=np.trapz(np.sqrt(1+d10**2)+np.sqrt(1+d20**2),x)<br><span class="hljs-attribute">L</span>=L/18*40; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;周长L=&#x27;</span>,round(L,4))<br><span class="hljs-attribute">S</span>=np.trapz(f2(x)-f1(x),x)<br><span class="hljs-attribute">S</span>=S/18**2*1600; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;面积S=&#x27;</span>,round(S,4))<br>delta=(S-41288)/41288<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;相对误差delta=&#x27;</span>,round(delta,4)); plt.show()<br></code></pre></td></tr></table></figure><h3 id="1-2-2-二维网格节点插值"><a href="#1-2-2-二维网格节点插值" class="headerlink" title="1.2.2 二维网格节点插值"></a>1.2.2 二维网格节点插值</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202309031613970.png" alt="image-20230903161300854"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-安全技术</title>
    <link href="/2023/08/28/Linux-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/08/28/Linux-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="1-安全机制"><a href="#1-安全机制" class="headerlink" title="1 安全机制"></a>1 安全机制</h1><h2 id="1-1-信息安全防护的目标"><a href="#1-1-信息安全防护的目标" class="headerlink" title="1.1 信息安全防护的目标"></a>1.1 信息安全防护的目标</h2><ul><li>保密性</li><li>完整性</li><li>可用性</li><li>可控制性</li><li>不可否认性</li></ul><h2 id="1-2-安全防护环节"><a href="#1-2-安全防护环节" class="headerlink" title="1.2 安全防护环节"></a>1.2 安全防护环节</h2><ul><li>物理安全：各种设备/主机、机房环境</li><li>系统安全：主机或设备的操作系统</li><li>应用安全：各种网络服务、应用程序</li><li>网络安全：对网络访问的控制、防火墙规则</li><li>数据安全：信息的备份与恢复、加密解密</li><li>管理安全：各种保障性的规范、流程、方法</li></ul><h2 id="1-3-常见的安全攻击-ATRIDE"><a href="#1-3-常见的安全攻击-ATRIDE" class="headerlink" title="1.3 常见的安全攻击 ATRIDE"></a>1.3 常见的安全攻击 ATRIDE</h2><ul><li>假冒            Spoofing</li><li>篡改           Tampering</li><li>否认            Repudiation</li><li>信息泄露    Information Disclosure</li><li>拒绝服务    Denial of Service</li><li>提升权限    Elevation of Privilege             </li></ul><h2 id="1-4-安全设计基本原则"><a href="#1-4-安全设计基本原则" class="headerlink" title="1.4 安全设计基本原则"></a>1.4 安全设计基本原则</h2><ul><li>使用成熟的安全系统</li><li>以小人之心度输入数据</li><li>外部系统是不安全的</li><li>最小授权</li><li>减少外部接口</li><li>缺省使用安全模式</li><li>安全不是似是而非</li><li>从STRIDE思考</li><li>在入口处检查</li><li>从管理上保护好你的系统</li></ul><h2 id="1-5-常用安全技术"><a href="#1-5-常用安全技术" class="headerlink" title="1.5 常用安全技术"></a>1.5 常用安全技术</h2><ul><li>认证</li><li>授权</li><li>审计</li><li>安全通信</li></ul><p><strong>3A：认证，授权，审计</strong></p><h2 id="1-6-加密算法和协议"><a href="#1-6-加密算法和协议" class="headerlink" title="1.6 加密算法和协议"></a>1.6 加密算法和协议</h2><ul><li>对称加密</li><li>非对称（秘钥）加密</li><li>单项加密</li><li>认证协议</li></ul><h3 id="1-6-1-对称加密算法"><a href="#1-6-1-对称加密算法" class="headerlink" title="1.6.1 对称加密算法"></a>1.6.1 对称加密算法</h3><p>对称加密：加密和解密使用同一个秘钥</p><p>特性：</p><ul><li>加密、解密使用同一个秘钥，效率高</li><li>将原始数据分割成固定大小的块，逐个进行加密</li></ul><p>缺陷：</p><ul><li>秘钥过多</li><li>秘钥分发</li><li>数据来源无法确认</li></ul><p>常见对称加密算法：</p><ul><li>DES</li><li>3DES</li><li>AES</li><li>Blowfish，Twofish</li><li>IDEA，RC6，CAST5</li></ul><figure class="highlight brainfuck"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">data</span> <span class="hljs-literal">--</span> <span class="hljs-comment">加密(key1)</span> <span class="hljs-literal">--</span> <span class="hljs-comment">data&#x27;</span> <span class="hljs-literal">--</span> <span class="hljs-comment">解密(key1)</span> <span class="hljs-literal">--</span> <span class="hljs-comment">data</span><br></code></pre></td></tr></table></figure><h3 id="1-6-2-非对称加密算法"><a href="#1-6-2-非对称加密算法" class="headerlink" title="1.6.2 非对称加密算法"></a>1.6.2 非对称加密算法</h3><p>非对称加密：密钥是成对出现</p><ul><li>公钥：public key，公开给所有人，主要给别人加密使用</li><li>私钥：secret key，private key 自己存留</li></ul><p>特点：</p><p>用公钥加密数据，只能使用与之匹配的私钥解密；反之亦然。</p><p>功能：</p><ul><li>数据加密</li><li>数字签名</li></ul><p>缺点：</p><ul><li>秘钥长，算法复杂</li><li>加密解密效率低</li></ul><p>常见算法：</p><ul><li>RSA</li><li>DSA</li><li>ECC</li></ul><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">data</span> <span class="hljs-literal">--</span> <span class="hljs-comment">加密(key1)</span> <span class="hljs-literal">--</span> <span class="hljs-comment">data&#x27;</span> <span class="hljs-literal">--</span> <span class="hljs-comment">解密(key2)</span> <span class="hljs-literal">--</span> <span class="hljs-comment">data</span><br></code></pre></td></tr></table></figure><h3 id="1-6-3-单向哈希算法"><a href="#1-6-3-单向哈希算法" class="headerlink" title="1.6.3 单向哈希算法"></a>1.6.3 单向哈希算法</h3><p>哈希算法：也称散列算法，将任意数据缩小成固定大小的“指纹”，称为“digest”，即摘要</p><p>特性：</p><ul><li><strong>任意长度输入，固定长度输出</strong></li><li>若修改数据，指纹也会发生改变，且有雪崩效应，<strong>数据</strong>的一点<strong>微小改变</strong>，生成的<strong>指纹值变化非常大</strong>。</li><li>无法从指纹中重新生成数据，即<strong>不可逆</strong>，具有单向性</li><li><strong>data相同，digest必相同；data不同，digest必不同</strong></li></ul><p>功能：数据完整性</p><p>常见算法：</p><ul><li>md5：128bits</li><li>sha1：160bits</li><li>sha224</li><li>sha384</li><li><strong>sha512</strong></li></ul><p>常用工具：</p><ul><li>md5sum / sha1sum [ –check ] file</li><li>openssl 、gpg</li><li>rpm -V</li></ul><h3 id="1-6-4-综合应用多种加密算法"><a href="#1-6-4-综合应用多种加密算法" class="headerlink" title="1.6.4 综合应用多种加密算法"></a>1.6.4 综合应用多种加密算法</h3><h4 id="1-6-4-1-实现数据加密"><a href="#1-6-4-1-实现数据加密" class="headerlink" title="1.6.4.1 实现数据加密"></a>1.6.4.1 实现数据加密</h4><p>实现数据加密，无法实现验证数据完整性和来源</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">key</span>（data）+ Pb（<span class="hljs-built_in">key</span>）<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308291644468.png" alt="image-20230829164406016"></p><h4 id="1-6-4-2-实现数据签名"><a href="#1-6-4-2-实现数据签名" class="headerlink" title="1.6.4.2 实现数据签名"></a>1.6.4.2 实现数据签名</h4><p>不加密数据，可以保证数据来源的可靠性、数据的完整性和一致性</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span> + <span class="hljs-type">Sa</span>（hash（<span class="hljs-keyword">data</span>））</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308291654864.png" alt="image-20230829165431789"></p><h4 id="1-6-4-3-综合加密和签名"><a href="#1-6-4-3-综合加密和签名" class="headerlink" title="1.6.4.3 综合加密和签名"></a>1.6.4.3 综合加密和签名</h4><p>即实现加密数据，又可以保证数据来源的可靠性、数据的完整性和一致性</p><p><strong>方法一：Pb{ Sa[hash(data)] + data }</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308291655958.png" alt="image-20230829165500890"></p><p><strong>方法二：对称key{ Sa[ hash(data) ] +data } + Pb(对称key)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308291655883.png" alt="image-20230829165527810"></p><h3 id="1-6-5-密码交换-IKE"><a href="#1-6-5-密码交换-IKE" class="headerlink" title="1.6.5 密码交换 IKE"></a>1.6.5 密码交换 IKE</h3><p>密钥交换：IKE （ Internet Key Exchange ）</p><ul><li><p>公钥加密：用目标的公钥加密对称密钥</p></li><li><p>DH（Deffie-Hellman）：生成对称（会话）秘钥</p><p>  参考：<a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange</a></p></li></ul><h2 id="1-7-CA和证书"><a href="#1-7-CA和证书" class="headerlink" title="1.7 CA和证书"></a>1.7 CA和证书</h2><p>PKI ：Public Key Infrastructure公共密钥加密体系</p><p>签证机构：CA</p><p>注册机构：RA</p><p>证书吊销列表：CRL</p><p>X.509：定义了证书的结构以及认证协议标准</p><p>证书类型：证书授权机构的证书、服务器证书、用户证书</p><p>获取证书：自签名证书、使用证书授权机构（生成证书请求csr | 将证书请求csr发送给CA | CA签名颁发证书）</p><h3 id="1-7-1-安全协议-SSL-TLS"><a href="#1-7-1-安全协议-SSL-TLS" class="headerlink" title="1.7.1 安全协议 SSL/TLS"></a>1.7.1 安全协议 SSL/TLS</h3><p>功能：机密性、认证、完整性、重放保护</p><p>SSL/TLS位于 <strong>应用层</strong> 与 <strong>传输层</strong> 之间</p><p>组成：Handshake协议、ChangeCipherSpec协议、Alert协议、Record协议</p><h3 id="1-7-2-HTTPS"><a href="#1-7-2-HTTPS" class="headerlink" title="1.7.2 HTTPS"></a>1.7.2 HTTPS</h3><p>HTTPS = HTTP +SSL/TLS</p><p><strong>工作的简化过程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308301057910.png" alt="image-20230830105701834"></p><h1 id="2-OpenSSL"><a href="#2-OpenSSL" class="headerlink" title="2 OpenSSL"></a>2 OpenSSL</h1><p>官网：<a href="https://www.openssl.org/">https://www.openssl.org/</a></p><p>三个组件：</p><ul><li>libcrypto：用于实现加密和解密的库</li><li>libssl：用于实现ssl通信协议的安全库</li><li>openssl：多用途命令行工具</li></ul><h2 id="2-1-Base64-编码"><a href="#2-1-Base64-编码" class="headerlink" title="2.1 Base64 编码"></a>2.1 Base64 编码</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308301103429.png" alt="image-20230830110318294"></p><p><strong>base64的编码过程如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308301442337.png" alt="image-20230830144254249"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#将 文本 转化为 Base64编码</span><br><span class="hljs-built_in">base64</span><br><span class="hljs-comment">#将 Base64编码 转化为 文本</span><br><span class="hljs-built_in">base64</span> -d<br></code></pre></td></tr></table></figure><h2 id="2-2-openssl-命令"><a href="#2-2-openssl-命令" class="headerlink" title="2.2 openssl 命令"></a>2.2 openssl 命令</h2><p><strong>查看 openssl 版本</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">openssl <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p><strong>查看 openssl 帮助</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h3 id="2-2-1-openssl-命令单项哈希加密"><a href="#2-2-1-openssl-命令单项哈希加密" class="headerlink" title="2.2.1 openssl 命令单项哈希加密"></a>2.2.1 openssl 命令单项哈希加密</h3><p>工具：openssl dgst</p><p>算法：md5sum，sha1sum，sha224sum，sha256sum</p><p>帮助：man dgst</p><h3 id="2-2-2-openssl-命令生成用户密码"><a href="#2-2-2-openssl-命令生成用户密码" class="headerlink" title="2.2.2 openssl 命令生成用户密码"></a>2.2.2 openssl 命令生成用户密码</h3><p>帮助：man sslpasswd</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">openssl passwd <span class="hljs-comment">--help</span><br></code></pre></td></tr></table></figure><h3 id="2-2-3-openssl-命令生成随机数"><a href="#2-2-3-openssl-命令生成随机数" class="headerlink" title="2.2.3 openssl 命令生成随机数"></a>2.2.3 openssl 命令生成随机数</h3><p>随机数生成器：伪随机数字，利用键盘和鼠标，块设备中断生成随机数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dev/</span>random<span class="hljs-comment">#仅从熵池返回随机数：随机数用尽，阻塞</span><br><span class="hljs-regexp">/dev/u</span>random<span class="hljs-comment">#从熵池返回随机数：随机数用尽，会利用软件生成随机数，非阻塞</span><br></code></pre></td></tr></table></figure><p>帮助：man sslrand</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">openssl <span class="hljs-keyword">rand</span> -base64/-<span class="hljs-keyword">hex</span> NUM<br>NUM：表示字节数，使用-<span class="hljs-keyword">hex</span>，每个字符为十六进制，相当于<span class="hljs-number">4</span>为二进制，出现的字符数为<span class="hljs-number">2</span>*NUM<br></code></pre></td></tr></table></figure><h3 id="2-2-4-openssl-命令实现PKL"><a href="#2-2-4-openssl-命令实现PKL" class="headerlink" title="2.2.4 openssl 命令实现PKL"></a>2.2.4 openssl 命令实现PKL</h3><p><strong>公钥加密</strong></p><p>​    算法：RSA，ELGamal</p><p>​    工具：gpg，openssl rsautl（man rsautl）</p><p><strong>数字签名</strong></p><p>​    算法：RSA，DSA，ELGamal</p><p><strong>密钥交换</strong></p><p>​    算法：dh</p><p>openssl命令生成密钥对：man  genrsa</p><p><strong>生成私钥</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">OpenSSL genrsa -out /PATH/<span class="hljs-selector-tag">TO</span>/PRIVATEKEY<span class="hljs-selector-class">.FILE</span> <span class="hljs-selector-attr">[-aes128]</span> <span class="hljs-selector-attr">[-aes192]</span> <span class="hljs-selector-attr">[-aes256]</span> <span class="hljs-selector-attr">[-des3]</span> <span class="hljs-selector-attr">[NUM_BITS，2048]</span><br><br>#对称加密算法:man genrsa<br>-aes128，-aes192，-aes256，-aria128，-aria192，-aria256，-camellia128，-camellia192，-des，-des3，-idea<br></code></pre></td></tr></table></figure><p><strong>解密加密的私钥</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">openssl rsa -in <span class="hljs-regexp">/PATH/</span>TO<span class="hljs-regexp">/PRIVATEKEY.FILE -out /</span>PATH<span class="hljs-regexp">/TO/</span>PRIVATEKEY2.<span class="hljs-keyword">FILE</span><br></code></pre></td></tr></table></figure><p><strong>从私钥中提取公钥</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">openssl rsa -<span class="hljs-keyword">in</span> PRIVATEKEYFILE -pubout -<span class="hljs-keyword">out</span> PUBLICKEYFILE<br></code></pre></td></tr></table></figure><h2 id="2-3-建立私有CA实现证书申请颁发"><a href="#2-3-建立私有CA实现证书申请颁发" class="headerlink" title="2.3 建立私有CA实现证书申请颁发"></a>2.3 建立私有CA实现证书申请颁发</h2><p>建立私有CA： </p><ul><li>OpenCA：OpenCA开源组织使用Perl对OpenSSL进行二次开发而成的一套完善的PKI免费软件 </li><li>openssl：相关包 openssl和openssl-libs </li></ul><p>证书申请及签署步骤：</p><ol><li>生成证书申请请求</li><li> RA核验 </li><li>CA签署 </li><li>获取证书 </li></ol><p><strong>openssl的配置文件</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/tls/</span>openssl.cnf<br></code></pre></td></tr></table></figure><h3 id="2-3-1-创建私有CA"><a href="#2-3-1-创建私有CA" class="headerlink" title="2.3.1 创建私有CA"></a>2.3.1 创建私有CA</h3><h4 id="2-3-1-1-创建CA所需文件"><a href="#2-3-1-1-创建CA所需文件" class="headerlink" title="2.3.1.1 创建CA所需文件"></a>2.3.1.1 创建CA所需文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#生成证书索引数据库文件 </span><br>touch <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/CA/i</span>ndex.txt <br><span class="hljs-comment">#指定第一个颁发证书的序列号 </span><br>echo <span class="hljs-number">01</span> &gt; <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/CA/</span>serial<br></code></pre></td></tr></table></figure><h4 id="2-3-1-2-生成CA私钥"><a href="#2-3-1-2-生成CA私钥" class="headerlink" title="2.3.1.2 生成CA私钥"></a>2.3.1.2 生成CA私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/pki/CA<br>(<span class="hljs-built_in">umask</span> 066; openssl genrsa -out private/cakey.pem 2048)<br></code></pre></td></tr></table></figure><h4 id="2-3-1-3-生成CA自签名证书"><a href="#2-3-1-3-生成CA自签名证书" class="headerlink" title="2.3.1.3 生成CA自签名证书"></a>2.3.1.3 生成CA自签名证书</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">openssl req -<span class="hljs-keyword">new</span> -x509 -key <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/CA/</span><span class="hljs-keyword">private</span><span class="hljs-regexp">/cakey.pem -days 3650 -out  /</span>etc<span class="hljs-regexp">/pki/</span>CA/cacert.pem <br></code></pre></td></tr></table></figure><p>选项说明：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-new：生成新证书签署请求 </span><br><span class="hljs-deletion">-x509：专用于CA生成自签证书 </span><br><span class="hljs-deletion">-key：生成请求时用到的私钥文件 </span><br><span class="hljs-deletion">-days n：证书的有效期限 </span><br><span class="hljs-deletion">-out /PATH/TO/SOMECERTFILE: 证书的保存路径 </span><br></code></pre></td></tr></table></figure><p>国家代码：<a href="https://country-code.cl/">https://country-code.cl/</a></p><h3 id="2-3-2-申请证书并颁发证书"><a href="#2-3-2-申请证书并颁发证书" class="headerlink" title="2.3.2 申请证书并颁发证书"></a>2.3.2 申请证书并颁发证书</h3><p>1、为需要使用证书的主机生成生成私钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">(umask <span class="hljs-number">066</span>; openssl genrsa -out <span class="hljs-regexp">/data/</span>test.key )<br></code></pre></td></tr></table></figure><p>2、为需要使用证书的主机生成秘钥</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">openssl req -<span class="hljs-keyword">new</span> -key <span class="hljs-regexp">/data/</span>test.key -out <span class="hljs-regexp">/data/</span>test.csr<br></code></pre></td></tr></table></figure><p>3、在CA签署证书并将证书颁发给请求者</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">openssl ca -<span class="hljs-keyword">in</span> <span class="hljs-regexp">/data/</span>test.csr -out <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/CA/</span>certs/test.crt -days <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>注意：默认要求国家，省，公司名称三项必须和CA一致</p><p>4、查看证书中的信息</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">openssl x509 -in /PATH/FROM/CERT_FILE -noout -text|<span class="hljs-string">issuer</span>|<span class="hljs-string">subject</span>|<span class="hljs-string">serial</span>|datas<br><br><span class="hljs-comment">#查看指定编号的证书状态</span><br>openssl ca -status SERIAL<br></code></pre></td></tr></table></figure><h3 id="2-3-3-吊销证书"><a href="#2-3-3-吊销证书" class="headerlink" title="2.3.3 吊销证书"></a>2.3.3 吊销证书</h3><p>在客户端获取要吊销的证书的serial</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">openssl x509 in <span class="hljs-regexp">/PATH/</span><span class="hljs-keyword">FROM</span>/CERT_FILE -noout -serial -subhect<br></code></pre></td></tr></table></figure><p>在CA上，根据客户提交的serial与subject信息，对比检验是否与index.txt文件中的信息一致，吊销证 书：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">openssl ca -revoke <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/CA/</span>newcerts/SERIAL.pem<br></code></pre></td></tr></table></figure><p>指定第一个吊销证书的编号,注意：第一次更新证书吊销列表前，才需要执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-number">01</span> &gt; <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/CA/</span>crlnumber<br></code></pre></td></tr></table></figure><p>更新证书吊销列表</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">openssl ca -gencrl -out <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/CA/</span>crl.pem<br></code></pre></td></tr></table></figure><p>查看crl文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">openssl crl -<span class="hljs-keyword">in</span> <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/CA/</span>crl.pem -noout -text<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-shell脚本</title>
    <link href="/2023/08/28/Linux-shell%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/08/28/Linux-shell%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-文本处理工具</title>
    <link href="/2023/08/22/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/08/22/Linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="VIM-文本编辑工具之神"><a href="#VIM-文本编辑工具之神" class="headerlink" title="VIM - 文本编辑工具之神"></a>VIM - 文本编辑工具之神</h1><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> vim<br>apt <span class="hljs-keyword">install</span> vim<br></code></pre></td></tr></table></figure><p>官网：<a href="https://www.vim.org/">https://www.vim.org/</a></p><p>学习链接：<a href="https://www.w3cschool.cn/vim/">https://www.w3cschool.cn/vim/</a></p><h2 id="三种常见模式"><a href="#三种常见模式" class="headerlink" title="三种常见模式"></a>三种常见模式</h2><ul><li>命令或普通(Normal)模式：可以实现移动光标，剪切/粘贴文本，主要用于查看文件</li><li>插入(Insert)或编辑模式：主要用于修改文件</li><li>扩展命令(extended command)或命令(末)行模式：保存，退出等</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308272342303.png" alt="img"></p><p>注意：末行模式 -&gt; 普通模式 中的Enter可以用Esc</p><h2 id="文本插入颜色字符"><a href="#文本插入颜色字符" class="headerlink" title="文本插入颜色字符"></a>文本插入颜色字符</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> 切换至插入模式 <br><span class="hljs-attribute">2</span> 按ctrl+v+[ 三个键,显示^[ <br><span class="hljs-attribute">3</span> 后续输入颜色信息,如:^[[<span class="hljs-number">1</span>;<span class="hljs-number">32</span>mhello^[[<span class="hljs-number">0</span>m <br><span class="hljs-attribute">4</span> 切换至扩展命令模式,保存退出 <br><span class="hljs-attribute">5</span> cat 文件可以看到下面显示<br><br><span class="hljs-attribute">echo</span> -e &#x27;\E[<span class="hljs-number">1</span>;<span class="hljs-number">32</span>mhello\E[<span class="hljs-number">0</span>m&#x27;<br></code></pre></td></tr></table></figure><h2 id="扩展命令模式"><a href="#扩展命令模式" class="headerlink" title="扩展命令模式"></a>扩展命令模式</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm">w     保存，但不退出文件<span class="hljs-comment">;写（存）磁盘文件</span><br>wq    保存，并退出文件<span class="hljs-comment">;写入并退出 </span><br><span class="hljs-keyword">x</span>（小写）     写入并退出 <br>X （大写）     加密 <br>q     退出 <br>q！      不存盘退出，即使更改都将丢失<br>r  filename     拷贝（读）指定文件内容到当前文件中 <br>w  filename     将当前文件内容写入另一个文件 <br><span class="hljs-title">!command</span>     不退出vim<span class="hljs-punctuation">,</span>执行命令 <br>r<span class="hljs-title">!command</span>     将命令的运行结果读入当前文件中<br></code></pre></td></tr></table></figure><h3 id="地址定界"><a href="#地址定界" class="headerlink" title="地址定界"></a>地址定界</h3><p><strong>格式</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">:start_pos,end_pos <span class="hljs-keyword">CMD</span><br></code></pre></td></tr></table></figure><p><strong>地址定界格式</strong> </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"># #具体第#行，例如<span class="hljs-number">2</span>表示第<span class="hljs-number">2</span>行 <br>#,# #从左侧#表示起始行，到右侧#表示结尾行<br>#,+# #从左侧#表示的起始行，加上右侧#表示的行数，范例：<span class="hljs-number">2</span>,+<span class="hljs-number">3</span> 表示<span class="hljs-number">2</span>到<span class="hljs-number">5</span>行 <br>.  #当前行 <br>$ #最后一行 <br>.,$<span class="hljs-number">-1</span> #当前行到倒数第二行 <br>% #全文, 相当于<span class="hljs-number">1</span>,$<br></code></pre></td></tr></table></figure><p><strong>地址定界后跟一个编辑命令</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">d    #删除 <br>y     #复制 <br>w file      #将范围内的行另存至指定文件中 <br>r file      #在指定位置插入指定文件中的所有内容<br>t#行号   #将前面指定的行复制到#行后<br>m#行号   #将前面指定的行移动到#行后<br></code></pre></td></tr></table></figure><h3 id="查找并替换"><a href="#查找并替换" class="headerlink" title="查找并替换"></a>查找并替换</h3><p><strong>格式</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">s<span class="hljs-regexp">/要查找的内容/</span>替换为的内容/修饰符<br></code></pre></td></tr></table></figure><p><strong>修饰符</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">i</span>     <span class="hljs-comment">#忽略大小写 </span><br>g     <span class="hljs-comment">#全局替换（贪婪模式），默认情况（懒惰模式）下，每一行只替换第一次出现 </span><br>gc     <span class="hljs-comment">#全局替换，每次替换前询问</span><br></code></pre></td></tr></table></figure><p>注意：贪婪模式、懒惰模式</p><p>查找替代中的分隔符 / 可替换其他字符，如：# @</p><h3 id="定制vim的工作特性"><a href="#定制vim的工作特性" class="headerlink" title="定制vim的工作特性"></a>定制vim的工作特性</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><strong>配置文件</strong></h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>vimrc <span class="hljs-comment">#全局 </span><br>~/.vimrc <span class="hljs-comment">#个人 </span><br></code></pre></td></tr></table></figure><h4 id="行号"><a href="#行号" class="headerlink" title="行号"></a><strong>行号</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">显示：<span class="hljs-built_in">set</span> number，简写 <span class="hljs-built_in">set</span> nu <br>取消显示：<span class="hljs-built_in">set</span> nonumber, 简写 <span class="hljs-built_in">set</span> nonu <br></code></pre></td></tr></table></figure><h4 id="忽略字符的大小写"><a href="#忽略字符的大小写" class="headerlink" title="忽略字符的大小写"></a><strong>忽略字符的大小写</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> ignorecase，简写 <span class="hljs-built_in">set</span> ic <br>不忽略：<span class="hljs-built_in">set</span> noic <br></code></pre></td></tr></table></figure><h4 id="自动缩进"><a href="#自动缩进" class="headerlink" title="自动缩进"></a><strong>自动缩进</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> autoindent，简写 <span class="hljs-built_in">set</span> ai <br>禁用：<span class="hljs-built_in">set</span> noai<br></code></pre></td></tr></table></figure><h4 id="复制保留格式"><a href="#复制保留格式" class="headerlink" title="复制保留格式"></a><strong>复制保留格式</strong></h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">启用：<span class="hljs-keyword">set</span> paste <br>禁用：<span class="hljs-keyword">set</span> <span class="hljs-comment">nopaste</span><br></code></pre></td></tr></table></figure><h4 id="显示Tab-I和换行符-和-显示"><a href="#显示Tab-I和换行符-和-显示" class="headerlink" title="显示Tab ^I和换行符 和$显示"></a><strong>显示Tab ^I和换行符 和$显示</strong></h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">启用：<span class="hljs-keyword">set</span> list <br>禁用：<span class="hljs-keyword">set</span> <span class="hljs-comment">nolist</span> <br>^I 表示<span class="hljs-comment">Tab</span>键        <span class="hljs-comment">$</span> 表示行尾<br></code></pre></td></tr></table></figure><h4 id="高亮搜索"><a href="#高亮搜索" class="headerlink" title="高亮搜索"></a><strong>高亮搜索</strong></h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">启用：<span class="hljs-keyword">set</span> hlsearch <br>禁用：<span class="hljs-keyword">set</span> <span class="hljs-comment">nohlsearch</span> 简写：<span class="hljs-comment">nohl</span> <br></code></pre></td></tr></table></figure><h4 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a><strong>语法高亮</strong></h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">启用：<span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br>禁用：<span class="hljs-keyword">syntax</span> off<br></code></pre></td></tr></table></figure><h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a><strong>文件格式</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用windows格式：<span class="hljs-built_in">set</span> <span class="hljs-attribute">fileformat</span>=dos <br>启用unix格式：<span class="hljs-built_in">set</span> <span class="hljs-attribute">fileformat</span>=unix <br>简写 <span class="hljs-built_in">set</span> <span class="hljs-attribute">ff</span>=dos|unix <br></code></pre></td></tr></table></figure><h4 id="Tab-用空格代替"><a href="#Tab-用空格代替" class="headerlink" title="Tab 用空格代替"></a><strong>Tab 用空格代替</strong></h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">启用：<span class="hljs-keyword">set</span> expandtab  默认为<span class="hljs-comment">8</span>个空格代替<span class="hljs-comment">Tab</span> <br>简写：<span class="hljs-keyword">set</span> <span class="hljs-comment">et</span> <br>禁用：<span class="hljs-keyword">set</span> <span class="hljs-comment">noexpandtab</span> <br></code></pre></td></tr></table></figure><h4 id="Tab用指定空格的个数代替"><a href="#Tab用指定空格的个数代替" class="headerlink" title="Tab用指定空格的个数代替"></a><strong>Tab用指定空格的个数代替</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> <span class="hljs-attribute">tabstop</span>=# 指定#个空格代替Tab <br>简写：<span class="hljs-built_in">set</span> <span class="hljs-attribute">ts</span>=4<br></code></pre></td></tr></table></figure><h4 id="设置缩进宽度"><a href="#设置缩进宽度" class="headerlink" title="设置缩进宽度"></a><strong>设置缩进宽度</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#向右缩进 命令模式 &gt;&gt; </span><br><span class="hljs-comment">#向左缩进 命令模式 &lt;&lt; </span><br><span class="hljs-comment">#默认值为8个字节，设置缩进为4个字符 </span><br><span class="hljs-built_in">set</span> <span class="hljs-attribute">shiftwidth</span>=4<br></code></pre></td></tr></table></figure><h4 id="设置文本宽度"><a href="#设置文本宽度" class="headerlink" title="设置文本宽度"></a><strong>设置文本宽度</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">textwith</span>=65 (vim only)   #从左向右计数<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">wrapmargin</span>=15 #从右往左计数<br></code></pre></td></tr></table></figure><h4 id="设置光标所在行的标识线"><a href="#设置光标所在行的标识线" class="headerlink" title="设置光标所在行的标识线"></a><strong>设置光标所在行的标识线</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用：<span class="hljs-built_in">set</span> cursorline，简写 <span class="hljs-built_in">set</span> cul <br>禁用：<span class="hljs-built_in">set</span> nocursorline <br></code></pre></td></tr></table></figure><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a><strong>加密</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启用： <span class="hljs-built_in">set</span> <span class="hljs-attribute">key</span>=password <br>禁用： <span class="hljs-built_in">set</span> key= <br></code></pre></td></tr></table></figure><h4 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a><strong>了解更多</strong></h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">:help <span class="hljs-keyword">option</span>-list <br>:<span class="hljs-keyword">set</span> <br>:<span class="hljs-keyword">set</span> <span class="hljs-comment">all</span> <br></code></pre></td></tr></table></figure><h2 id="命令模式下的操作"><a href="#命令模式下的操作" class="headerlink" title="命令模式下的操作"></a>命令模式下的操作</h2><h3 id="退出vim"><a href="#退出vim" class="headerlink" title="退出vim"></a><strong>退出vim</strong></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ZZ</span>    保存退出<br>ZQ    不保存退出<br></code></pre></td></tr></table></figure><h3 id="光标跳转"><a href="#光标跳转" class="headerlink" title="光标跳转"></a><strong>光标跳转</strong></h3><h4 id="字符间跳转"><a href="#字符间跳转" class="headerlink" title="字符间跳转"></a>字符间跳转</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">h：左    <br>l：右    <br><span class="hljs-keyword">j：下 </span>   <br>k：上<br></code></pre></td></tr></table></figure><h4 id="单词间跳转"><a href="#单词间跳转" class="headerlink" title="单词间跳转"></a>单词间跳转</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">w：下一个单词的词首 <br>e：当前或下一单词的词尾 <br><span class="hljs-selector-tag">b</span>：当前或前一个单词的词首 <br></code></pre></td></tr></table></figure><h4 id="当前页跳转"><a href="#当前页跳转" class="headerlink" title="当前页跳转"></a>当前页跳转</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">H</span>：页首  <br>M：页中间行<br>L：页底<br>zt：屏幕顶端<br>zz：屏幕中央<br>zb：屏幕低底端<br></code></pre></td></tr></table></figure><h4 id="行首行尾跳转"><a href="#行首行尾跳转" class="headerlink" title="行首行尾跳转"></a>行首行尾跳转</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">^ ：行首的第一个非空白字符 <br><span class="hljs-number">0</span> ：行首 <br><span class="hljs-variable">$ </span>：行尾<br></code></pre></td></tr></table></figure><h4 id="行间移动"><a href="#行间移动" class="headerlink" title="行间移动"></a>行间移动</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">) ：下一句<br>( ：上一句 <br>&#125; ：下一段<br>&#123; ：上一段 <br></code></pre></td></tr></table></figure><h4 id="命令模式翻屏操作"><a href="#命令模式翻屏操作" class="headerlink" title="命令模式翻屏操作"></a>命令模式翻屏操作</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">Ctrl+f ：向文件尾部翻一屏,相当于Pagedown <br>Ctrl+<span class="hljs-selector-tag">b</span>：向文件首部翻一屏,相当于Pageup <br>Ctrl+d：向文件尾部翻半屏 <br>Ctrl+u：向文件首部翻半屏 <br></code></pre></td></tr></table></figure><h3 id="字符编辑"><a href="#字符编辑" class="headerlink" title="字符编辑"></a>字符编辑</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">x</span>     剪切光标处的字符 <br><span class="hljs-comment">#x     剪切光标处起始的#个字符 </span><br>xp     交换光标所在处的字符及其后面字符的位置 <br><span class="hljs-regexp">~     转换大小写</span> <br>J     删除当前行后的换行符<br></code></pre></td></tr></table></figure><h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">r     只替换光标所在处的一个字符 <br>R     切换成<span class="hljs-built_in">REPLACE</span>模式（在末行出现-- <span class="hljs-built_in">REPLACE</span> -- 提示）,按ESC回到命令模式<br></code></pre></td></tr></table></figure><h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crystal">d     删除命令，可结合光标跳转字符，实现范围删除 <br>d<span class="hljs-variable">$ </span>   删除到行尾 <br>d^    删除到非空行首 <br>d0    删除到行首 <br>dw <br>de <br>db <br><span class="hljs-comment">#COMMAND </span><br>dd：  剪切光标所在的行 <br><span class="hljs-comment">#dd   多行删除 </span><br>D：  从当前光标位置一直删除到行尾，等同于d<span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><h3 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crystal">y 复制，行为相似于d命令 <br>y<span class="hljs-variable">$ </span><br>y0 <br>y^ <br>ye <br>yw <br>yb <br><span class="hljs-comment">#COMMAND </span><br>yy：复制行 <br><span class="hljs-comment">#yy 复制多行 </span><br>Y：复制整行<br></code></pre></td></tr></table></figure><h3 id="粘贴命令"><a href="#粘贴命令" class="headerlink" title="粘贴命令"></a>粘贴命令</h3><blockquote><p>p 缓冲区存的如果为整行，则粘贴当前光标所在行的下方；否则，则粘贴至当前光标所在处的后面 </p><p>P 缓冲区存的如果为整行，则粘贴当前光标所在行的上方；否则，则粘贴至当前光标所在处的前面 </p></blockquote><h3 id="改变命令（命令-c-删除后切换成插入模式）"><a href="#改变命令（命令-c-删除后切换成插入模式）" class="headerlink" title="改变命令（命令 c 删除后切换成插入模式）"></a>改变命令（命令 c 删除后切换成插入模式）</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span>$ <br><span class="hljs-keyword">c</span>^ <br><span class="hljs-keyword">c</span><span class="hljs-number">0</span> <br>cb <br>ce <br>cw <br>#COMMAND <br><span class="hljs-keyword">cc</span>      #删除当前行并输入新内容，相当于S <br>#<span class="hljs-keyword">cc</span>  <br>C      #删除当前光标到行尾，并切换成插入模式<span class="hljs-punctuation">,</span>相当于<span class="hljs-keyword">c</span>$<br></code></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">/PATTERN： 从当前光标所在处向文件尾部查找 <br>?PATTERN：从当前光标所在处向文件首部查找 <br><span class="hljs-built_in">n</span>：        与命令同方向 <br><span class="hljs-built_in">N</span>：        与命令反方向<br></code></pre></td></tr></table></figure><h3 id="撤销更改"><a href="#撤销更改" class="headerlink" title="撤销更改"></a>撤销更改</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">u     撤销最近的更改，相当于windows中ctrl+z <br>#u    撤销之前多次更改 <br>U     撤消光标落在这行后所有此行的更改 <br>Ctrl-r  重做最后的“撤消”更改，相当于windows中crtl+y <br>.     重复前一个操作 <br>#.     重复前一个操作#次<br></code></pre></td></tr></table></figure><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">&lt;<span class="hljs-built_in">start</span> position&gt;&lt;command&gt;&lt;<span class="hljs-keyword">end</span> position&gt;<br>常见Command：y复制、d删除、<span class="hljs-built_in">gU</span>变大写、<span class="hljs-built_in">gu</span>变小写<br></code></pre></td></tr></table></figure><p><strong>常见例子</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">di</span><span class="hljs-string">&quot;光标在&quot;</span> <span class="hljs-string">&quot;之间，则删除&quot;</span> <span class="hljs-comment">&quot;之间的内容</span><br>yi( 光标在（）之间，则复制（）之间的内容<br><span class="hljs-keyword">vi</span>[光标在[]之间，则选中[]之间的内容<br>dtx删除字符直到遇见光标之后的第一个<span class="hljs-keyword">x</span>字符<br>ytx复制字符直到遇见光标之后的第一个<span class="hljs-keyword">x</span>字符<br></code></pre></td></tr></table></figure><h2 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h2><p>允许选择的文本块 </p><ul><li>v 面向字符，– VISUAL – </li><li>V 面向整行，– VISUAL LINE – </li><li>ctrl-v 面向块，– VISUAL BLOCK –</li></ul><p><strong>在文件指定行的行首插入#</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>、先将光标移动到指定的第一行的行首 <br><span class="hljs-number">2</span>、输入ctrl+v 进入可视化模式 <br><span class="hljs-number">3</span>、向下移动光标，选中希望操作的每一行的第一个字符 <br><span class="hljs-number">4</span>、输入大写字母 I 切换至插入模式 <br><span class="hljs-number">5</span>、输入 <span class="hljs-meta"># </span><br><span class="hljs-number">6</span>、按 ESC 键 <br></code></pre></td></tr></table></figure><p><strong>在指定的块位置插入相同的内容</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>、光标定位到要操作的地方 <br><span class="hljs-number">2</span>、CTRL+v 进入“可视 块”模式，选取这一列操作多少行 <br><span class="hljs-number">3</span>、SHIFT+<span class="hljs-selector-tag">i</span>(<span class="hljs-selector-tag">I</span>) <br><span class="hljs-number">4</span>、输入要插入的内容 <br><span class="hljs-number">5</span>、按 ESC 键 <br></code></pre></td></tr></table></figure><h2 id="多窗口模式"><a href="#多窗口模式" class="headerlink" title="多窗口模式"></a>多窗口模式</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> FILE1 FILE2 FILE3 ... <br>:<span class="hljs-keyword">next</span> 下一个 <br>:<span class="hljs-keyword">prev</span> 前一个 <br>:<span class="hljs-keyword">first</span> 第一个 <br>:<span class="hljs-keyword">last</span> 最后一个 <br>:<span class="hljs-keyword">wall</span> 保存所有 <br>:<span class="hljs-keyword">qall</span> 不保存退出所有 <br>:<span class="hljs-keyword">wqall</span>保存退出所有<br></code></pre></td></tr></table></figure><h3 id="多文件分割"><a href="#多文件分割" class="headerlink" title="多文件分割"></a>多文件分割</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">vim</span> <span class="hljs-operator">-</span><span class="hljs-variable">o</span><span class="hljs-operator">|-</span><span class="hljs-built_in">O</span> <span class="hljs-variable">FILE1</span> <span class="hljs-variable">FILE2</span> <span class="hljs-operator">...</span> <br><span class="hljs-operator">-</span><span class="hljs-variable">o</span><span class="hljs-operator">:</span> 水平或上下分割 <br><span class="hljs-operator">-</span><span class="hljs-built_in">O</span><span class="hljs-operator">:</span> 垂直或左右分割（<span class="hljs-variable">vim</span> <span class="hljs-variable">only</span>） <br>在窗口间切换：<span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">w</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Arrow</span><br></code></pre></td></tr></table></figure><h3 id="单文件窗口分割"><a href="#单文件窗口分割" class="headerlink" title="单文件窗口分割"></a>单文件窗口分割</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">Ctrl+<span class="hljs-keyword">w</span>,s：<span class="hljs-keyword">split</span>, 水平分割，上下分屏 <br>Ctrl+<span class="hljs-keyword">w</span>,v：<span class="hljs-keyword">vertical</span>, 垂直分割，左右分屏 <br>ctrl+<span class="hljs-keyword">w</span>,q：取消相邻窗口 <br>ctrl+<span class="hljs-keyword">w</span>,<span class="hljs-keyword">o</span>：取消全部窗口<br>：<span class="hljs-keyword">wqall</span> ：退出<br></code></pre></td></tr></table></figure><h2 id="vim帮助"><a href="#vim帮助" class="headerlink" title="vim帮助"></a>vim帮助</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">:help <br>:help topic <br>Use :q to <span class="hljs-keyword">exit</span> help <br><br><span class="hljs-comment">#vimtutor</span><br></code></pre></td></tr></table></figure><h1 id="查看文本文件内容"><a href="#查看文本文件内容" class="headerlink" title="查看文本文件内容"></a><strong>查看文本文件内容</strong></h1><ul><li>cat  [-A &lt;显示所有控制符&gt;] [-b &lt;对所有非空行编号&gt;] [-s &lt;压缩连续空行成一行&gt;] [-n &lt;对所有行编号&gt;]</li><li>nl = cat -b  显示行号</li><li>tac   逆向显示文本内容</li><li>rev   将同一行的内容逆向显示</li></ul><h1 id="查看非文本文件内容"><a href="#查看非文本文件内容" class="headerlink" title="查看非文本文件内容"></a><strong>查看非文本文件内容</strong></h1><ul><li>hexdump</li><li>od</li><li>xxd</li></ul><h1 id="分页查看文件"><a href="#分页查看文件" class="headerlink" title="分页查看文件"></a><strong>分页查看文件</strong></h1><ul><li>more    </li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">-d显示翻页及退出显示<br>在退出前 ctrl+<span class="hljs-keyword">b</span> 可以向前翻页<br></code></pre></td></tr></table></figure><ul><li>less            <strong>常用</strong></li></ul><h1 id="显示文本前或后行内容"><a href="#显示文本前或后行内容" class="headerlink" title="显示文本前或后行内容"></a><strong>显示文本前或后行内容</strong></h1><ul><li>head   </li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">默认显示前十行<br>-n #     若#为正数，显示前#行；若#为负数，显示除了后|#|行的行<br></code></pre></td></tr></table></figure><ul><li>tail</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">默认显示后十行<br></code></pre></td></tr></table></figure><h1 id="按列抽取文本–cut"><a href="#按列抽取文本–cut" class="headerlink" title="按列抽取文本–cut"></a>按列抽取文本–cut</h1><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">cut [option] ... [file] ...<br></code></pre></td></tr></table></figure><p><strong>常用选项</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">-d DELIMITER指明分隔符，默认tab<br>-f FILEDS<br> #第#个字段<br> #，#离散的多个字段<br> #-#连续的多个字段<br>-c按字符切割<br></code></pre></td></tr></table></figure><h1 id="合并多个文件–paste"><a href="#合并多个文件–paste" class="headerlink" title="合并多个文件–paste"></a><strong>合并多个文件–paste</strong></h1><p>合并多个文件同行号的列到一行</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>d <span class="hljs-comment">#指定分隔符为#，默认为Tab</span><br><span class="hljs-literal">-</span>s所有行显示为一行<br></code></pre></td></tr></table></figure><h1 id="分析文本的工具："><a href="#分析文本的工具：" class="headerlink" title="分析文本的工具："></a><strong>分析文本的工具：</strong></h1><ul><li>文本数据统计：wc</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l只计数行数</span><br><span class="hljs-deletion">-w只计数单词总数</span><br><span class="hljs-deletion">-c只计数字节总数</span><br><span class="hljs-deletion">-m只计数字符总数</span><br><span class="hljs-deletion">-L显示文件中最长行的长度</span><br></code></pre></td></tr></table></figure><ul><li>整理文本：sort    </li></ul><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ldif">把整理的文本显示出来，不改变原始文件<br><span class="hljs-literal">-</span>r执行反方向（由上至下）整理<br><span class="hljs-literal">-</span>R随机排序<br><span class="hljs-literal">-</span>n执行按数字大小整理<br><span class="hljs-literal">-</span>h人类可读排序，如：2k 1G<br><span class="hljs-literal">-</span>f选项忽略（fold）字符串中的字符大小写<br><span class="hljs-literal">-</span>u选项（独特，unique），合并重复项，即去重<br><span class="hljs-literal">-</span>t c选项使用c做为字段界定符<br><span class="hljs-literal">-</span>k <span class="hljs-comment">#选项按照使用c字符分割的 # 列出整理能够使用多次</span><br></code></pre></td></tr></table></figure><ul><li>去重：uniq（从输入中删除前后相接的重复的行 ）</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c显示每行重复出现的次数</span><br><span class="hljs-deletion">-d进现实重复过的行</span><br><span class="hljs-deletion">-u进现实不重复的行</span><br></code></pre></td></tr></table></figure><ul><li>比较文件：diff 、patch、vimdiff、cmp</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">diff</span> 命令比较两个文件之间的区别<br>-u选项来输出“统一的（unified）”<span class="hljs-built_in">diff</span>格式文件，最适合补丁文件<br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">path</span> 复制在其他文件中进行的改变（谨慎使用）<br>-<span class="hljs-keyword">b</span>选项来自动备份改变了的文件<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vimdiff</span> 相当于 vid -d<br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">cmp</span> 查看二进制文件的不同之处<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-正则表达式与文本三剑客</title>
    <link href="/2023/08/20/Linux-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    <url>/2023/08/20/Linux-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本正则表达式元字符"><a href="#1-基本正则表达式元字符" class="headerlink" title="1 基本正则表达式元字符"></a><strong>1 基本正则表达式元字符</strong></h1><h2 id="1-1-字符匹配"><a href="#1-1-字符匹配" class="headerlink" title="1.1 字符匹配"></a>1.1 字符匹配</h2><figure class="highlight inform7"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs inform7">.   匹配任意单个字符，可以是一个汉字<br><span class="hljs-comment">[]</span>   匹配指定范围内的任意单个字符，示例：<span class="hljs-comment">[wang]</span>   <span class="hljs-comment">[0-9]</span>   <span class="hljs-comment">[a-z]</span>   <span class="hljs-comment">[a-zA-Z]</span><br><span class="hljs-comment">[^]</span> 排除，匹配指定范围外的任意单个字符,示例：<span class="hljs-comment">[^wang]</span> <br><span class="hljs-comment">[:alnum:]</span> 字母和数字<br><span class="hljs-comment">[:alpha:]</span> 代表任何英文大小写字符，亦即 A-Z, a-z<br><span class="hljs-comment">[:lower:]</span> 小写字母,示例:<span class="hljs-comment">[<span class="hljs-comment">[:lower:]</span>]</span>,相当于<span class="hljs-comment">[a-z]</span><br><span class="hljs-comment">[:upper:]</span> 大写字母<br><span class="hljs-comment">[:blank:]</span> 空白字符（空格和制表符）<br><span class="hljs-comment">[:space:]</span> 包括空格、制表符(水平和垂直)、换行符、回车符等各种类型的空白,比<span class="hljs-comment">[:blank:]</span>包含的范围<br>广<br><span class="hljs-comment">[:cntrl:]</span> 不可打印的控制字符（退格、删除、警铃...）<br><span class="hljs-comment">[:digit:]</span> 十进制数字<br><span class="hljs-comment">[:xdigit:]</span>十六进制数字<br><span class="hljs-comment">[:graph:]</span> 可打印的非空白字符<br><span class="hljs-comment">[:print:]</span> 可打印字符<br><span class="hljs-comment">[:punct:]</span> 标点符号<br>\w #匹配单词构成部分，等价于<span class="hljs-comment">[_<span class="hljs-comment">[:alnum:]</span>]</span><br>\W #匹配非单词构成部分，等价于<span class="hljs-comment">[^_<span class="hljs-comment">[:alnum:]</span>]</span><br>\S      #匹配任何非空白字符。等价于 <span class="hljs-comment">[^ \f\n\r\t\v]</span>。<br>\s     #匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <span class="hljs-comment">[ \f\n\r\t\v]</span>。注意<br>Unicode 正则表达式会匹配全角空格符<br></code></pre></td></tr></table></figure><h2 id="1-2-匹配次数"><a href="#1-2-匹配次数" class="headerlink" title="1.2 匹配次数"></a>1.2 匹配次数</h2><p>用在要指定次数的字符后面，用于指定前面的字符要出现的次数</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">* <span class="hljs-comment">#匹配前面的字符任意次，包括0次，贪婪模式：尽可能长的匹配</span><br>.* <span class="hljs-comment">#任意长度的任意字符</span><br><span class="hljs-string">\?</span> <span class="hljs-comment">#匹配其前面的字符出现0次或1次,即:可有可无</span><br><span class="hljs-string">\+</span> <span class="hljs-comment">#匹配其前面的字符出现最少1次,即:肯定有且 &gt;=1 次</span><br><span class="hljs-string">\&#123;n\&#125;</span> <span class="hljs-comment">#匹配前面的字符n次</span><br><span class="hljs-string">\&#123;m,n\&#125;</span> <span class="hljs-comment">#匹配前面的字符至少m次，至多n次</span><br><span class="hljs-string">\&#123;,n\&#125;</span>  <span class="hljs-comment">#匹配前面的字符至多n次,&lt;=n</span><br><span class="hljs-string">\&#123;n,\&#125;</span>  <span class="hljs-comment">#匹配前面的字符至少n次</span><br></code></pre></td></tr></table></figure><h2 id="1-3-位置锚定"><a href="#1-3-位置锚定" class="headerlink" title="1.3 位置锚定"></a><strong>1.3 位置锚定</strong></h2><p>位置锚定可以用于定位出现的位置</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir">^ <span class="hljs-comment">#行首锚定, 用于模式的最左侧</span><br><span class="hljs-variable">$ </span><span class="hljs-comment">#行尾锚定，用于模式的最右侧</span><br>^<span class="hljs-title class_">PATTERN</span><span class="hljs-variable">$ </span><span class="hljs-comment">#用于模式匹配整行</span><br>^<span class="hljs-variable">$</span> <span class="hljs-comment">#空行</span><br>^[[<span class="hljs-symbol">:space</span><span class="hljs-symbol">:</span>]]*<span class="hljs-variable">$ </span><span class="hljs-comment">#空白行</span><br>\&lt; 或 \b      <span class="hljs-comment">#词首锚定，用于单词模式的左侧</span><br>\&gt; 或 \b        <span class="hljs-comment">#词尾锚定，用于单词模式的右侧</span><br>\&lt;<span class="hljs-title class_">PATTERN</span>\&gt;     <span class="hljs-comment">#匹配整个单词</span><br><br><span class="hljs-comment">#注意: 单词是由字母,数字,下划线组成</span><br></code></pre></td></tr></table></figure><h2 id="1-4-分组其他"><a href="#1-4-分组其他" class="headerlink" title="1.4 分组其他"></a>1.4 分组其他</h2><h3 id="1-4-1-分组"><a href="#1-4-1-分组" class="headerlink" title="1.4.1 分组"></a>1.4.1 分组</h3><p>分组：() 将多个字符捆绑在一起，当作一个整体处理，如：\(root)+</p><p>后向引用：分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命名</p><p>方式为: \1, \2, \3, …</p><p>\1 表示从左侧起第一个左括号以及与之匹配右括号之间的模式所匹配到的字符</p><p>示例：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\(</span>string1<span class="hljs-symbol">\(</span>string2<span class="hljs-symbol">\)</span><span class="hljs-symbol">\)</span><br>\1 ：string1<span class="hljs-symbol">\(</span>string2<span class="hljs-symbol">\)</span><br>\2 ：string2<br></code></pre></td></tr></table></figure><p>注意： 后向引用 引用前面的分组括号中的模式所匹配字符，而非模式本身</p><h3 id="1-4-2-或者"><a href="#1-4-2-或者" class="headerlink" title="1.4.2 或者"></a>1.4.2 或者</h3><p>或者：\|</p><p>示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span>\|<span class="hljs-selector-tag">b</span> <span class="hljs-selector-id">#a</span>或<span class="hljs-selector-tag">b</span>  <br><span class="hljs-selector-tag">C</span>\|<span class="hljs-selector-tag">cat</span> <span class="hljs-selector-id">#C</span>或<span class="hljs-selector-tag">cat</span>   <br>\(C\|c\)<span class="hljs-selector-tag">at</span> <span class="hljs-selector-id">#Cat</span>或<span class="hljs-selector-tag">cat</span><br></code></pre></td></tr></table></figure><h1 id="2-扩展正则表达式元字符"><a href="#2-扩展正则表达式元字符" class="headerlink" title="2 扩展正则表达式元字符"></a><strong>2 扩展正则表达式元字符</strong></h1><p>使用扩展正则表达式时需加入选项 <strong>-E</strong></p><h2 id="2-1-字符匹配"><a href="#2-1-字符匹配" class="headerlink" title="2.1 字符匹配"></a><strong>2.1 字符匹配</strong></h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs less">. 任意单个字符<br><span class="hljs-selector-attr">[wang]</span> 指定范围的字符<br><span class="hljs-selector-attr">[^wang]</span> 不在指定范围的字符<br><span class="hljs-selector-attr">[:alnum:]</span> 字母和数字<br><span class="hljs-selector-attr">[:alpha:]</span> 代表任何英文大小写字符，亦即 <span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">-Z</span>, <span class="hljs-selector-tag">a</span><span class="hljs-selector-tag">-z</span><br><span class="hljs-selector-attr">[:lower:]</span> 小写字母,示例:<span class="hljs-selector-attr">[[:lower:]</span>],相当于<span class="hljs-selector-attr">[a-z]</span><br><span class="hljs-selector-attr">[:upper:]</span> 大写字母<br><span class="hljs-selector-attr">[:blank:]</span> 空白字符（空格和制表符）<br><span class="hljs-selector-attr">[:space:]</span> 水平和垂直的空白字符（比<span class="hljs-selector-attr">[:blank:]</span>包含的范围广）<br><span class="hljs-selector-attr">[:cntrl:]</span> 不可打印的控制字符（退格、删除、警铃...）<br><span class="hljs-selector-attr">[:digit:]</span> 十进制数字<br><span class="hljs-selector-attr">[:xdigit:]</span>十六进制数字<br><span class="hljs-selector-attr">[:graph:]</span> 可打印的非空白字符<br><span class="hljs-selector-attr">[:print:]</span> 可打印字符<br><span class="hljs-selector-attr">[:punct:]</span> 标点符号<br></code></pre></td></tr></table></figure><h2 id="2-2-匹配次数"><a href="#2-2-匹配次数" class="headerlink" title="2.2 匹配次数"></a><strong>2.2 匹配次数</strong></h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel">*   匹配前面字符任意次<br>? <span class="hljs-number">0</span>或<span class="hljs-number">1</span>次<br>+ <span class="hljs-number">1</span>次或多次<br>&#123;<span class="hljs-built_in">n</span>&#125; 匹配<span class="hljs-built_in">n</span>次<br>&#123;m,<span class="hljs-built_in">n</span>&#125; 至少m，至多<span class="hljs-built_in">n</span>次<br></code></pre></td></tr></table></figure><h2 id="2-3-位置锚定"><a href="#2-3-位置锚定" class="headerlink" title="2.3 位置锚定"></a><strong>2.3 位置锚定</strong></h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">^ 行首<br>$ 行尾<br><span class="hljs-string">\&lt;,</span> <span class="hljs-string">\b</span> 语首<br><span class="hljs-string">\&gt;,</span> <span class="hljs-string">\b</span> 语尾<br></code></pre></td></tr></table></figure><h2 id="2-4-分组其它"><a href="#2-4-分组其它" class="headerlink" title="2.4 分组其它"></a><strong>2.4 分组其它</strong></h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coq">() 分组<br>后向引用：\<span class="hljs-number">1</span>, \<span class="hljs-number">2</span>, ...<br>| <span class="hljs-type">或者</span><br><span class="hljs-type">a</span>|<span class="hljs-type">b</span> #a或b<br>C|<span class="hljs-type">cat</span> #C或cat<br>(C|<span class="hljs-type">c</span>)<span class="hljs-built_in">at</span> #Cat或cat<br></code></pre></td></tr></table></figure><h1 id="3-文本处理三剑客"><a href="#3-文本处理三剑客" class="headerlink" title="3 文本处理三剑客"></a><strong>3 文本处理三剑客</strong></h1><ul><li><p>grep 命令主要对文本的（正则表达式）行基于模式进行过滤</p></li><li><p>sed：stream editor，文本编辑工具</p></li><li><p>awk：Linux上的实现gawk，文本报告生成器</p></li></ul><h2 id="3-1-文本处理三剑客之-grep"><a href="#3-1-文本处理三剑客之-grep" class="headerlink" title="3.1 文本处理三剑客之 grep"></a><strong>3.1 文本处理三剑客之</strong> <strong>grep</strong></h2><p>grep: Global search REgular expression and Print out the line</p><p>作用：文本搜索工具，根据用户指定的“模式”对目标文本<strong>逐行进行匹配检查</strong>；打印匹配到的行</p><p>模式：由正则表达式字符及文本字符所编写的过滤条件</p><p><strong>格式：</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> [<span class="hljs-keyword">OPTIONS</span>] PATTERN [<span class="hljs-keyword">FILE</span>...]<br></code></pre></td></tr></table></figure><p><strong>常见选项：</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>color=auto 对匹配到的文本着色显示<br><span class="hljs-literal">-</span>m <span class="hljs-comment">#   匹配#次后停止</span><br><span class="hljs-literal">-</span>v 显示不被pattern匹配到的行,即取反<br><span class="hljs-literal">-</span>i 忽略字符大小写<br><span class="hljs-literal">-</span>n 显示匹配的行号<br><span class="hljs-literal">-</span>c 统计匹配的行数<br><span class="hljs-literal">-</span>o 仅显示匹配到的字符串     <br><span class="hljs-literal">-</span>q 静默模式，不输出任何信息       可以用 echo $? 判断是否找到信息<br><span class="hljs-literal">-</span>A <span class="hljs-comment"># after, 后#行</span><br><span class="hljs-literal">-</span>B <span class="hljs-comment"># before, 前#行</span><br><span class="hljs-literal">-</span>C <span class="hljs-comment"># context, 前后各#行</span><br><span class="hljs-literal">-</span>e 实现多个选项间的逻辑or关系,如：grep –e ‘cat &#x27; -e ‘dog&#x27; file<br><span class="hljs-literal">-</span>w 匹配整个单词<br><span class="hljs-literal">-</span>E 使用ERE，相当于egrep，可以使用扩展的正则表达式<br><span class="hljs-literal">-</span>F 不支持正则表达式，相当于fgrep<br><span class="hljs-literal">-</span>f file 根据模式文件处理<br><span class="hljs-literal">-</span>r  递归目录，但不处理软链接<br><span class="hljs-literal">-</span>R  递归目录，但处理软链接<br></code></pre></td></tr></table></figure><h2 id="3-2-文本处理三剑客之-sed"><a href="#3-2-文本处理三剑客之-sed" class="headerlink" title="3.2 文本处理三剑客之 sed"></a><strong>3.2 文本处理三剑客之</strong> <strong>sed</strong></h2><p>官网:  <a href="http://sed.sourceforge.net/">http://sed.sourceforge.net/</a></p><p>Sed是从文件或管道中<strong>读取一行，处理一行，输出一行</strong>；再读取一行，再处理一行，再输出一行，直到最后一行。每当处理一行时，把当前处理的行存储在临时缓冲区中，称为<strong>模式空间（Pattern Space）</strong>，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。一次处理一行的设计模式使得sed性能很高，sed在读取大文件时,不会出现卡顿的现象。如果使用vi命令打开几十M上百M的文件，明显会出现有卡顿的现象，这是因为vi命令打开文件是一次性将文件加载到内存，然后再打开。Sed就避免了这种情况，一行一行的处理，打开速度非常快，执行速度也很快</p><p>帮助参考网站：<a href="http://www.gnu.org/software/sed/manual/sed.html">http://www.gnu.org/software/sed/manual/sed.html</a></p><h3 id="3-2-1-基本用法"><a href="#3-2-1-基本用法" class="headerlink" title="3.2.1 基本用法"></a><strong>3.2.1 基本用法</strong></h3><p><strong>格式：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sed [option]<span class="hljs-string">...</span> &#x27;script;script;<span class="hljs-string">...</span>&#x27; [inputfile.<span class="hljs-string">..</span>]<br></code></pre></td></tr></table></figure><p><strong>常用选项：</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>n 不输出模式空间内容到屏幕，即不自动打印<br><span class="hljs-literal">-</span>e 多点编辑<br><span class="hljs-literal">-</span>f FILE 从指定文件中读取编辑脚本<br><span class="hljs-literal">-</span>r, -E 使用扩展正则表达式<br><span class="hljs-literal">-</span>i.bak 备份文件并原处编辑<br><span class="hljs-literal">-</span>s          将多个文件视为独立文件，而不是单个连续的长文件流<br><br><span class="hljs-comment">#说明: </span><br><span class="hljs-literal">-</span>ir 不支持<br><span class="hljs-literal">-</span>i -r 支持<br><span class="hljs-literal">-</span>ri   支持<br><span class="hljs-literal">-</span>ni   会清空文件，危险选项<br></code></pre></td></tr></table></figure><p><strong>script格式</strong>：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme"><span class="hljs-symbol">&#x27;地址+命令</span>&#x27;<br></code></pre></td></tr></table></figure><p><strong>地址格式：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>. 不给地址：对全文进行处理<br><span class="hljs-number">2</span>. 单地址：<br>   <span class="hljs-comment">#：指定的行，$：最后一行</span><br>   <span class="hljs-regexp">/pattern/</span>：被此处模式所能够匹配到的每一行<br><span class="hljs-number">3</span>. 地址范围：<br>   <span class="hljs-comment">#,#     #从#行到第#行，3，6 从第3行到第6行</span><br>   <span class="hljs-comment">#,+#   #从#行到+#行，3,+4 表示从3行到第7行</span><br>   <span class="hljs-regexp">/pat1/</span>,<span class="hljs-regexp">/pat2/</span><br>   <span class="hljs-comment">#,/pat/</span><br>   <span class="hljs-regexp">/pat/</span>,<span class="hljs-comment">#</span><br><span class="hljs-number">4</span>. 步进：~<br>     <span class="hljs-number">1</span>~<span class="hljs-number">2</span> 奇数行<br>     <span class="hljs-number">2</span>~<span class="hljs-number">2</span> 偶数行<br></code></pre></td></tr></table></figure><p><strong>命令</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs excel">p 打印当前模式空间内容，追加到默认输出之后<br>Ip 忽略大小写输出<br>d 删除模式空间匹配的行，并立即启用下一轮循环<br>a [\]<span class="hljs-built_in">text</span> 在指定行后面追加文本，支持使用\n实现多行追加<br>i [\]<span class="hljs-built_in">text</span> 在行前面插入文本<br>c [\]<span class="hljs-built_in">text</span> 替换行为单行或多行文本<br>w file 保存模式匹配的行至指定文件<br>r file 读取指定文件的文本至模式空间中匹配到的行后<br>= 为模式空间中的行打印行号<br>! 模式空间中匹配行取反处理<br>q           结束或退出sed<br></code></pre></td></tr></table></figure><p><strong>查找替代</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">s<span class="hljs-regexp">/pattern/</span>string/修饰符 查找替换,支持使用其它分隔符，可以是其它形式：s@@@，s<span class="hljs-comment">###</span><br><br>替换修饰符：<br>g 行内全局替换<br>p 显示替换成功的行<br>w   <span class="hljs-regexp">/PATH/</span>FILE 将替换成功的行保存至文件中<br>I,i   忽略大小写<br></code></pre></td></tr></table></figure><h3 id="3-2-2-高级用法（了解）"><a href="#3-2-2-高级用法（了解）" class="headerlink" title="3.2.2 高级用法（了解）"></a><strong>3.2.2 高级用法（了解）</strong></h3><p>sed 中除了<strong>模式空间</strong>，还另外还支持<strong>保持空间（Hold Space）</strong>,利用此空间，可以将模式空间中的数据，临时保存至保持空间，从而后续接着处理，实现更为强大的功能。</p><p><strong>常见的高级命令</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http">P 打印模式空间开端至\n内容，并追加到默认输出之前<br>h 把模式空间中的内容覆盖至保持空间中<br>H 把模式空间中的内容追加至保持空间中<br>g 从保持空间取出数据覆盖至模式空间<br>G 从保持空间取出内容追加至模式空间<br>x 把模式空间中的内容与保持空间中的内容进行互换<br>n 读取匹配到的行的下一行覆盖至模式空间<br>N 读取匹配到的行的下一行追加至模式空间<br>d 删除模式空间中的行<br>D 如果模式空间包含换行符，则删除直到第一个换行符的模式空间中的文本，并不会读取新的输入行，而使用合成的模式空间重新启动循环。如果模式空间不包含换行符，则会像发出d命令那样启动正常的新循环<br>范例<br></code></pre></td></tr></table></figure><h2 id="3-3-文本处理三剑客之-awk"><a href="#3-3-文本处理三剑客之-awk" class="headerlink" title="3.3 文本处理三剑客之 awk"></a><strong>3.3 文本处理三剑客之</strong> <strong>awk</strong></h2><h3 id="3-3-1-基本工作原理和基本用法"><a href="#3-3-1-基本工作原理和基本用法" class="headerlink" title="3.3.1 基本工作原理和基本用法"></a>3.3.1 基本工作原理和基本用法</h3><p>awk：Aho, Weinberger, Kernighan，报告生成器，格式化文本输出，GNU/Linux发布的AWK目前由自由软件基金会（FSF）进行开发和维护，通常也称它为 GNU AWK</p><p><strong>有多种版本：</strong></p><ul><li>AWK：原先来源于 AT &amp; T 实验室的的AWK</li><li>NAWK：New awk，AT &amp; T 实验室的AWK的升级版</li><li>GAWK：即GNU AWK。所有的GNU/Linux发布版都自带GAWK，它与AWK和NAWK完全兼容</li></ul><p>GNU AWK 用户手册文档：</p><p>​                <a href="https://www.gnu.org/software/gawk/manual/gawk.html">https://www.gnu.org/software/gawk/manual/gawk.html</a></p><p>​                <a href="https://man7.org/linux/man-pages/man1/awk.1p.html">https://man7.org/linux/man-pages/man1/awk.1p.html</a></p><p><strong>gawk：</strong>模式扫描和处理语言，可以实现下面功能</p><ul><li>文本处理</li><li>输出格式化的文本报表</li><li>执行算数运算</li><li>执行字符串操作</li></ul><p><strong>格式：</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">awk [options] <span class="hljs-string">&#x27;program&#x27;</span> <span class="hljs-keyword">var</span>=value <span class="hljs-keyword">file</span>…<br>awk [options] -f programfile <span class="hljs-keyword">var</span>=value <span class="hljs-keyword">file</span>…<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>program通常是被放在单引号中，并可以由三种部分组成</p><ul><li>BEGIN语句块</li><li>模式匹配的通用语句块</li><li>END语句块</li></ul><p><strong>常见选项：</strong></p><ul><li><strong>-F “分隔符”</strong> 指明输入时用到的字段分隔符，默认的分隔符是若干个连续空白符</li><li><strong>-v var=value 变量赋值</strong></li></ul><p><strong>Program格式：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">pattern&#123;action statements<span class="hljs-comment">;..&#125;</span><br></code></pre></td></tr></table></figure><p>pattern：决定动作语句何时触发及触发事件，比如：BEGIN,END,正则表达式等</p><p>action statements：对数据进行处理，放在{}内指明，常见：print, printf</p><p><strong>awk</strong> <strong>工作过程</strong></p><p>第一步：<strong>执行BEGIN{action;… }语句块</strong>中的语句</p><p>第二步：从文件或标准输入(stdin)<strong>读取一行</strong>，然后执行pattern{ action;… }语句块，它<strong>逐行扫描文件</strong>，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。</p><p>第三步：当读至输入流末尾时，<strong>执行END{action;…}语句块</strong></p><p>BEGIN语句块在awk开始从输入流中读取行之前被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中</p><p>END语句块在awk从输入流中读取完所有的行之后即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块</p><p>pattern语句块中的通用命令是最重要的部分，也是可选的。如果没有提供pattern语句块，则默认执行{ print }，即打印每一个读取到的行，awk读取的每一行都会执行该语句块</p><p><strong>分割符、域和记录</strong></p><ul><li>由分隔符分隔的字段（列column,域field）标记$1,$2…$n称为域标识，$0为所有域，注意：和shell中变量$符含义不同</li><li>文件的每一行称为记录record</li><li>如果省略action，则默认执行 print $0 的操作</li></ul><p><strong>常用的action分类</strong></p><ul><li>output statements：print,printf</li><li>Expressions：算术，比较表达式等</li><li>Compound statements：组合语句</li><li>Control statements：if, while等</li><li>input statements</li></ul><p><strong>awk控制语句</strong></p><ul><li>{ statements;… } 组合语句</li><li>if(condition) {statements;…} </li><li>if(condition) {statements;…} else {statements;…}</li><li>while(conditon) {statments;…}</li><li>do {statements;…} while(condition)</li><li>for(expr1;expr2;expr3) {statements;…}</li><li>break</li><li>continue</li><li>exit </li></ul><h3 id="3-3-2-动作-print"><a href="#3-3-2-动作-print" class="headerlink" title="3.3.2 动作 print"></a>3.3.2 动作 print</h3><p><strong>格式</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">print</span></span> item1, item2, ...<br></code></pre></td></tr></table></figure><p><strong>说明</strong></p><ul><li>逗号分隔符</li><li>输出item可以字符串，也可是数值；当前记录的字段、变量或awk的表达式</li><li>如省略item，相当于print $0</li><li>固定字符符需要用“ ” 引起来，而变量和数字不需要</li></ul><h3 id="3-3-3-awk-变量"><a href="#3-3-3-awk-变量" class="headerlink" title="3.3.3 awk 变量"></a><strong>3.3.3 awk</strong> <strong>变量</strong></h3><p>awk中的变量分为：内置和自定义变量</p><h4 id="3-3-3-1-常见的内置变量"><a href="#3-3-3-1-常见的内置变量" class="headerlink" title="3.3.3.1 常见的内置变量"></a><strong>3.3.3.1 常见的内置变量</strong></h4><p><strong>-v</strong></p><ul><li><p><strong>FS：输入字段分隔符，默认为空白字符,功能相当于 -F</strong></p></li><li><p>OFS：输出字段分隔符，默认为空白字符</p></li><li><p>RS：输入记录record分隔符，指定输入时的换行符</p></li><li><p>ORS：输出记录分隔符，输出时用指定符号代替换行符</p></li><li><p><strong>NF：字段数量</strong></p></li><li><p><strong>NR：记录的编号</strong></p></li><li><p>FNR：各文件分别计数，记录的编号  </p></li><li><p>FILENAME：当前文件名</p></li><li><p>ARGC：命令行参数的个数</p></li><li><p>ARGV：数组，保存的是命令行所给定的各参数，每一个参数：ARGV[0]，……</p></li></ul><h4 id="3-3-3-2-自定义变量"><a href="#3-3-3-2-自定义变量" class="headerlink" title="3.3.3.2 自定义变量"></a>3.3.3.2 <strong>自定义变量</strong></h4><p>自定义变量是区分字符大小写的,使用下面方式进行赋值</p><ul><li>-<strong>v var=value</strong> </li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">awk -v <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">M80</span>&quot; &#x27;<span class="hljs-symbol">BEGIN</span>&#123;print <span class="hljs-keyword">class</span>&#125;&#x27;<br></code></pre></td></tr></table></figure><ul><li>在program中直接定义</li></ul><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ocaml">awk <span class="hljs-symbol">&#x27;BEGIN</span>&#123;<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;M80&quot;</span>;print <span class="hljs-keyword">class</span>&#125;<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-4-动作-printf"><a href="#3-3-4-动作-printf" class="headerlink" title="3.3.4 动作 printf"></a>3.3.4 <strong>动作</strong> <strong>printf</strong></h3><p>printf 可以实现格式化输出</p><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> “FORMAT”, item1, item2, <br></code></pre></td></tr></table></figure><p><strong>说明</strong></p><ul><li><strong>必须指定FORMAT</strong></li><li><strong>不会自动换行</strong>，需要显式给出换行控制符 \n</li><li>FORMAT中需要分别为后面每个item指定格式符</li></ul><p><strong>格式符：与item一一对应</strong></p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">s</span></span>：显示字符串<br><span class="hljs-tag">%<span class="hljs-selector-tag">d</span></span>, %i：显示十进制整数<br><span class="hljs-tag">%<span class="hljs-selector-tag">f</span></span>：显示为浮点数<br><span class="hljs-tag">%<span class="hljs-selector-tag">e</span></span>, %E：显示科学计数法数值 <br><span class="hljs-tag">%<span class="hljs-selector-tag">c</span></span>：显示字符的ASCII码<br><span class="hljs-tag">%<span class="hljs-selector-tag">g</span></span>, %G：以科学计数法或浮点形式显示数值<br><span class="hljs-tag">%<span class="hljs-selector-tag">u</span></span>：无符号整数<br><span class="hljs-tag">%</span>%：显示%自身<br></code></pre></td></tr></table></figure><p><strong>修饰符</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#[.#] 第一个数字控制显示的宽度；第二个#表示小数点后精度，如：<span class="hljs-comment">%3.1f</span><br>- 左对齐（默认右对齐） 如：<span class="hljs-comment">%-15s</span><br>+  显示数值的正负符号  如：<span class="hljs-comment">%+d</span><br></code></pre></td></tr></table></figure><h3 id="3-3-5-操作符"><a href="#3-3-5-操作符" class="headerlink" title="3.3.5 操作符"></a>3.3.5 操作符</h3><p><strong>算术操作符</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">x</span>+y<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>-y<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>*y<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>/y<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>^y<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-variable">%y</span><br>-<span class="hljs-keyword">x</span>：转换为负数<br>+<span class="hljs-keyword">x</span>：将字符串转换为数值<br></code></pre></td></tr></table></figure><p><strong>字符串操作符</strong></p><p>没有符号的操作符，字符串连接</p><p><strong>赋值操作符</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=, +=, -=, *=, /=, %=, ^=，++, --<br></code></pre></td></tr></table></figure><p><strong>比较操作符</strong></p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">==, !=, &gt;, &gt;=, &lt;, &lt;=<br></code></pre></td></tr></table></figure><p><strong>模式匹配符</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff">~ 左边是否和右边匹配，包含关系<br><span class="hljs-addition">!~ 是否不匹配</span><br></code></pre></td></tr></table></figure><p><strong>逻辑操作符</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">与：<span class="hljs-meta">&amp;&amp;，并且关系</span><br>或：<span class="hljs-string">||，或者关系</span><br>非：!，取反<br></code></pre></td></tr></table></figure><p><strong>条件表达式（三目表达式）</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">selector</span>?<span class="hljs-keyword">if</span>-<span class="hljs-keyword">true</span>-expression:<span class="hljs-keyword">if</span>-<span class="hljs-keyword">false</span>-expression<br></code></pre></td></tr></table></figure><h3 id="3-3-6-模式PATTERN"><a href="#3-3-6-模式PATTERN" class="headerlink" title="3.3.6 模式PATTERN"></a>3.3.6 <strong>模式PATTERN</strong></h3><p>PATTERN:根据pattern条件，过滤匹配的行，再做处理</p><ul><li><p>如果未指定：空模式，匹配每一行</p></li><li><p>/regular expression/：仅处理能够模式匹配到的行，需要用/ /括起来</p></li><li><p>relational expression: 关系表达式，结果为“真”才会被处理</p><p>真：结果为非0值，非空字符串</p><p>假：结果为空字符串或0值或false</p><p>! 表示取反</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">*奇数打印*<br><span class="hljs-built_in">seq</span> 10 | awk <span class="hljs-string">&#x27;i=!i&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>line ranges：行范围</p><p>  不支持直接用行号，但可以使用<strong>变量NR</strong>间接<strong>指定行号</strong></p><p>  /pat1/,/pat2/ 不支持直接给出数字格式</p></li><li><p>BEGIN/END模式</p><p>  BEGIN{}：仅在开始处理文件中的文本之前执行一次</p><p>  END{}：仅在文本处理完成之后执行一次</p></li></ul><h3 id="3-3-7-条件判断-if-else"><a href="#3-3-7-条件判断-if-else" class="headerlink" title="3.3.7 条件判断 if-else"></a>3.3.7 <strong>条件判断</strong> <strong>if-else</strong></h3><p><strong>语法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">if</span>(condition)&#123;statement;…&#125;<span class="hljs-selector-attr">[else statement]</span><br><span class="hljs-built_in">if</span>(condition1)&#123;statement1&#125;else <span class="hljs-built_in">if</span>(condition2）&#123;statement2&#125;else if(condition3)&#123;statement3&#125;...... else &#123;statementN&#125;<br></code></pre></td></tr></table></figure><p><strong>使用场景</strong>： 对awk取得的整行或某个字段做条件判断</p><h3 id="3-3-8-条件判断-switch"><a href="#3-3-8-条件判断-switch" class="headerlink" title="3.3.8 条件判断 switch"></a>3.3.8 <strong>条件判断</strong> <strong>switch</strong></h3><p><strong>语法</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">switch</span>(expression) &#123;<span class="hljs-keyword">case</span> VALUE1 or <span class="hljs-regexp">/REGEXP/</span>: statement1; <span class="hljs-keyword">case</span> VALUE2 or <span class="hljs-regexp">/REGEXP2/</span>: statement2; ...; <span class="hljs-keyword">default</span>: statementn&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-9-循环-while"><a href="#3-3-9-循环-while" class="headerlink" title="3.3.9 循环 while"></a>3.3.9 <strong>循环</strong> <strong>while</strong></h3><p><strong>语法</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">while</span> (<span class="hljs-keyword">condition</span>) &#123;statement;…&#125;<br></code></pre></td></tr></table></figure><p>条件“真”，进入循环；条件“假”，退出循环</p><p><strong>使用场景</strong></p><p>​        对一行内的多个字段逐一类似处理时使用</p><p>​        对数组中的各元素逐一处理时使用</p><h3 id="3-3-10-循环-do-while"><a href="#3-3-10-循环-do-while" class="headerlink" title="3.3.10 循环 do-while"></a>3.3.10 <strong>循环</strong> <strong>do-while</strong></h3><p><strong>语法</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">do</span> &#123;statement;…&#125;<span class="hljs-keyword">while</span>(<span class="hljs-keyword">condition</span>)<br></code></pre></td></tr></table></figure><p><strong>意义</strong>：无论真假，至少执行一次循环体</p><h3 id="3-3-11-循环-for"><a href="#3-3-11-循环-for" class="headerlink" title="3.3.11 循环 for"></a>3.3.11 <strong>循环</strong> <strong>for</strong></h3><p><strong>语法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">for</span>(expr1;expr2;expr3) &#123;statement;…&#125;<br></code></pre></td></tr></table></figure><p><strong>常见用法</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(variable assignment;condition;iteration process)</span></span> &#123;<span class="hljs-keyword">for</span>-body&#125;<br></code></pre></td></tr></table></figure><p><strong>特殊用法</strong>：能够遍历数组中的元素</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(var in array)</span></span> &#123;<span class="hljs-keyword">for</span>-body&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-12-continue-和-break"><a href="#3-3-12-continue-和-break" class="headerlink" title="3.3.12 continue 和 break"></a>3.3.12 <strong>continue</strong> <strong>和</strong> <strong>break</strong></h3><ul><li>continue 中断本次循环</li><li>break 中断整个循环</li></ul><p><strong>格式</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">continue</span> [n]<br><span class="hljs-keyword">break</span> [n]<br></code></pre></td></tr></table></figure><h3 id="3-3-13-next"><a href="#3-3-13-next" class="headerlink" title="3.3.13 next"></a>3.3.13 <strong>next</strong></h3><p>next 可以提前结束对本行处理而直接进入下一行处理（awk自身循环）</p><h3 id="3-3-14-数组"><a href="#3-3-14-数组" class="headerlink" title="3.3.14  数组"></a>3.3.14  <strong>数组</strong></h3><p>awk的数组为关联数组</p><p><strong>格式</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>_name[index-expression]<br></code></pre></td></tr></table></figure><p><strong>index-expression</strong></p><ul><li>利用数组，实现 k/v 功能</li><li>可使用任意字符串；字符串要使用双引号括起来</li><li>如果某数组元素事先不存在，在引用时，awk会自动创建此元素，并将其值初始化为“空串”</li><li>若要判断数组中是否存在某元素，要使用“index in array”格式进行遍历</li></ul><p><strong>判断数组索引是否存在</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">awk <span class="hljs-symbol">&#x27;BEGIN</span>&#123;<span class="hljs-keyword">array</span>[<span class="hljs-string">&quot;i&quot;</span>]=<span class="hljs-string">&quot;x&quot;</span>;<span class="hljs-keyword">array</span>[<span class="hljs-string">&quot;j&quot;</span>]=<span class="hljs-string">&quot;y&quot;</span> ; print <span class="hljs-string">&quot;i&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">array</span>, <span class="hljs-string">&quot;y&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">array</span>&#125;&#x27;<br></code></pre></td></tr></table></figure><p>若要遍历数组中的每个元素，要使用 for 循环</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(var in array)</span></span> &#123;<span class="hljs-keyword">for</span>-body&#125;<br></code></pre></td></tr></table></figure><p>注意：var会遍历array的每个索引</p><h3 id="3-3-15-awk-函数"><a href="#3-3-15-awk-函数" class="headerlink" title="3.3.15 awk 函数"></a><strong>3.3.15 awk</strong> <strong>函数</strong></h3><p>awk 的函数分为内置和自定义函数</p><p><strong>官方文档</strong> <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Functions">https://www.gnu.org/software/gawk/manual/gawk.html#Functions</a></p><h4 id="3-3-15-1-常见内置函数"><a href="#3-3-15-1-常见内置函数" class="headerlink" title="3.3.15.1 常见内置函数"></a><strong>3.3.15.1 常见内置函数</strong></h4><ul><li>数值处理</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">rand</span>()：返回<span class="hljs-number">0</span>和<span class="hljs-number">1</span>之间一个随机数<br>srand()：配合<span class="hljs-keyword">rand</span>() 函数,生成随机数的种子<br>***<br>awk <span class="hljs-number">&#x27;BE</span>GIN&#123;srand();print <span class="hljs-keyword">rand</span>()&#125;&#x27;<br>***<br><br><span class="hljs-keyword">int</span>()：返回整数<br>***<br>awk <span class="hljs-number">&#x27;BE</span>GIN&#123;srand();print <span class="hljs-keyword">int</span>(<span class="hljs-keyword">rand</span>()*<span class="hljs-number">100</span>)&#125;&#x27;<br>***<br></code></pre></td></tr></table></figure><ul><li>字符串处理</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">length</span>([s])：返回指定字符串的长度<br><span class="hljs-built_in">sub</span>(r,s,[t])：对t字符串搜索r表示模式匹配的内容，并将第一个匹配内容替换为s,*懒惰模式*<br><span class="hljs-built_in">gsub</span>(r,s,[t])：对t字符串进行搜索r表示的模式匹配的内容，并全部替换为s所表示的内容，*贪婪模式*<br><span class="hljs-built_in">split</span>(s,array,[r])：以r为分隔符，切割字符串s，并将切割后的结果保存至array所表示的数组中，第一个索引值为<span class="hljs-number">1</span>,第二个索引值为<span class="hljs-number">2</span>,…<br></code></pre></td></tr></table></figure><ul><li>可以awk中调用shell命令</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">(<span class="hljs-string">&#x27;cmd&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p>空格是awk中的字符串连接符，如果system中需要使用awk中的变量可以使用空格分隔，或者说除了awk的变量外其他一律用””引用起来</p><ul><li>时间函数</li></ul><p>官方文档: 时间函数  <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Time-Functions">https://www.gnu.org/software/gawk/manual/gawk.html#Time-Functions</a></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">systime</span><span class="hljs-params">()</span> 当前时间到1970年1月1日的秒数</span><br><span class="hljs-function"><span class="hljs-title">strftime</span><span class="hljs-params">()</span> 指定时间格式 </span><br><span class="hljs-function">***</span><br><span class="hljs-function"><span class="hljs-title">awk</span> <span class="hljs-title">&#x27;BEGIN</span>&#123;<span class="hljs-title">print</span> <span class="hljs-title">strftime</span><span class="hljs-params">(<span class="hljs-string">&quot;%Y-%m-%d %H:%M&quot;</span>,systime())</span>&#125;<span class="hljs-title">&#x27;</span></span><br><span class="hljs-function">***</span><br></code></pre></td></tr></table></figure><h4 id="3-3-15-2-自定义函数"><a href="#3-3-15-2-自定义函数" class="headerlink" title="3.3.15.2 自定义函数"></a>3.3.15.2 <strong>自定义函数</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">awk -v <span class="hljs-attribute">var1</span>=value1  -v <span class="hljs-attribute">var2</span>=value2... -f awkfile<br></code></pre></td></tr></table></figure><p><strong>自定义函数格式</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span> <span class="hljs-params">( parameter, parameter, <span class="hljs-rest_arg">... ) &#123;</span></span><br><span class="hljs-rest_arg"><span class="hljs-params">   statements</span></span><br><span class="hljs-params">   return expression</span><br><span class="hljs-params">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-16-awk-脚本"><a href="#3-3-16-awk-脚本" class="headerlink" title="3.3.16 awk 脚本"></a>3.3.16 <strong>awk</strong> <strong>脚本</strong></h3><p>将awk程序写成脚本，直接调用或执行</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-meta">#!/bin/awk -f</span><br>#<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a awk script<br>filename<br></code></pre></td></tr></table></figure><p><strong>向awk脚本传递参数</strong></p><p>格式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">awkfile  <span class="hljs-attribute">var</span>=value  <span class="hljs-attribute">var2</span>=value2... Inputfile<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><strong>在BEGIN过程中不可用</strong>。</li><li>直到首行输入完成以后，变量才可用。</li><li>可以通过-v 参数，让awk在执行BEGIN之前得到变量的值。</li><li>命令行中每一个指定的变量都需要一个-v参数</li></ul><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-图论模型</title>
    <link href="/2023/08/16/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E5%9B%BE%E8%AE%BA%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/08/16/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E5%9B%BE%E8%AE%BA%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h1 id="NetworkX"><a href="#NetworkX" class="headerlink" title="NetworkX"></a>NetworkX</h1><h2 id="图的生成"><a href="#图的生成" class="headerlink" title="图的生成"></a>图的生成</h2><p><strong>在NetworkX中，有以下4种基本的图类型：</strong></p><p>Graph：无向图（undirected Graph）；</p><p>DiGraph：有向图（directed Graph）；</p><p>MultiGraph：多重无向图，即两个顶点之间的边数多于一条，也允许存在环；</p><p>MultiDiGraph：多重有向图。</p><p>可以通过以下代码创建上述四种图类型的空对象（默认已导入模块）</p><figure class="highlight ini"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">G</span> = nx.Graph()         <span class="hljs-comment">#创建无向图</span><br><span class="hljs-attr">G</span> = nx.DiGraph()       <span class="hljs-comment">#创建有向图</span><br><span class="hljs-attr">G</span> = nx.MultiGraph()    <span class="hljs-comment">#创建多重无向图</span><br><span class="hljs-attr">G</span> = nx.MultiDigraph()  <span class="hljs-comment">#创建多重有向图</span><br></code></pre></td></tr></table></figure><p>e.g.<strong>画一个8个顶点的3正则图（每个顶点的度都为3）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308162048850.png" alt="image-20230816204652889"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import networkx as nx    <br>import pylab as plt   <br><span class="hljs-comment"># 生成一个3正则图（即每个节点有3个相邻节点）  </span><br>G = nx.cubical_graph() # 生成一个3正则图 <br>***<br>nx.cubical_graph() 生成的立方体图的结构，它有 2^n 个节点，其中 n 是维数。在这个例子中，维数为 3，因此有 2^3 = 8 个节点。<br>***<br><br><span class="hljs-comment"># 在1号子窗口中绘制G  </span><br>plt.subplot(121)       # 激活1号子窗口  <br>***<br>121是一个指示符，表示这个图像应该是1行2列的子图的第1个。<br>***<br><br><span class="hljs-comment"># 在这个子窗口中绘制G，并带有标签  </span><br>nx.draw(G, <span class="hljs-attribute">with_labels</span>=<span class="hljs-literal">True</span>) <br>***<br>nx.draw()函数是一个用于绘制图形的函数，它接受一个图G作为输入，并绘制出这个图的图形表示。<span class="hljs-attribute">with_labels</span>=<span class="hljs-literal">True</span>是一个可选的参数，表示在绘制图形时是否要带有标签。当with_labels=True时，每个节点都会有一个标签，标签的内容是节点的编号。<br>***<br><br><span class="hljs-comment"># 切换到2号子窗口  </span><br>plt.subplot(122)  <br><span class="hljs-comment"># 创建一个列表，包含从&#x27;v1&#x27;到&#x27;v8&#x27;的字符串  </span><br>s = [<span class="hljs-string">&#x27;v&#x27;</span>+str(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,9)]  <br><span class="hljs-comment"># 将这个列表转换为一个字典，其中键是整数（顶点的索引），值是字符串形式的标签  </span><br>s = dict(zip(range(8), s))  #构造顶点标注的字符字典<br><br><span class="hljs-comment"># 在2号子窗口中再次绘制G，使用指定的布局、标签、颜色和形状  </span><br>nx.draw(G,<span class="hljs-attribute">pos</span>=nx.circular_layout(G), <span class="hljs-attribute">labels</span>=s,  <br>        <span class="hljs-attribute">node_color</span>=<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-attribute">node_shape</span>=<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-attribute">edge_color</span>=<span class="hljs-string">&#x27;b&#x27;</span>)  <br>***<br><span class="hljs-attribute">pos</span>=nx.circular_layout(G) 指定了图的节点布局。这里使用的是circular_layout，它会生成一个有向图布局，节点按照循环顺序排列。<br><span class="hljs-attribute">labels</span>=s 表示为每个节点添加标签。s 应该是一个字典，键是节点，值是对应的标签。<br><span class="hljs-attribute">node_color</span>=<span class="hljs-string">&#x27;y&#x27;</span> 和 <span class="hljs-attribute">node_shape</span>=<span class="hljs-string">&#x27;s&#x27;</span> 分别指定了节点的颜色和形状。这里节点的颜色为黄色（<span class="hljs-string">&#x27;y&#x27;</span>），形状为小写字母 <span class="hljs-string">&#x27;s&#x27;</span> 对应的形状（在 NetworkX 中，这个形状类似于一个方形，但有一个小圆点在中心）。<br>最后，<span class="hljs-attribute">edge_color</span>=<span class="hljs-string">&#x27;b&#x27;</span> 指定了边的颜色为蓝色（<span class="hljs-string">&#x27;b&#x27;</span>）。<br>***<br>        <br><span class="hljs-comment"># 显示所有的图形  </span><br>plt.show()<br></code></pre></td></tr></table></figure><p>下面解释一下NetworkX库画图函数draw中的主要参数，draw函数的调用格式如下：</p><p>draw(G, pos=None, ax=None, **kwds)</p><p>其中，G表示要绘制的网络图，pos是表示位置坐标的字典数据，默认为None，其用于建立布局，图形的布局有五种设置：</p><p>circular_layout：顶点在一个圆环上均匀分布；</p><p>random_layout：顶点在一个单位正方形内随机分布；</p><p>shell_layout：  顶点在多个同心圆上分布；</p><p>spring_layout： 用Fruchterman-Reingold算法排列顶点；</p><p>spectral_layout：根据图的拉普拉斯特征向量排列顶点。</p><p>也可以有领接矩阵直接创建无向图和有向图命令如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 由邻接矩阵W创建无像图G</span><br><span class="hljs-attr">G</span> = nx.Graph(W)<br><span class="hljs-comment"># 由邻接矩阵W创建有向图G</span><br><span class="hljs-attr">G</span> = nx.DiGraph(W)<br></code></pre></td></tr></table></figure><h2 id="数据的储存结构"><a href="#数据的储存结构" class="headerlink" title="数据的储存结构"></a><strong>数据的储存结构</strong></h2><p>NetworkX存储网络的相关数据时，使用了Python的3层字典结构，这有利于在存储大规模稀疏网络时提高存取速度。下面举例说明其存储方式。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import networkx as nx<br>import pylab as plt<br><br>G = nx.Graph()<br>G.add_node(1)    #添加标号为1的一个顶点<br>G.add_nodes_from([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>])  #从列表中添加多个顶点<br>G.add_edge(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>)   #添加顶点A和B之间的一条边<br>G.add_edge(1, 2, <span class="hljs-attribute">weight</span>=0.5)   #添加顶点1和2之间权重为0.4的一条边<br>e = [(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,0.3),<br> (<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,0.9),<br> (<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,0.5),<br> (<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,1.2)]<br>G.add_weighted_edges_from(e)  #从列表中添加多条赋权边<br><span class="hljs-built_in">print</span>(G.adj)      #显示图的邻接表的字典数据<br><span class="hljs-built_in">print</span>(list(G.adjacency()))  #显示图的邻接表的列表数据<br><span class="hljs-comment"># 绘制图形</span><br>pos = nx.spring_layout(G)  # 指定节点位置<br>labels = &#123;n: str(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> G.nodes()&#125;  # 添加节点标签<br>nx.draw(G, pos, <span class="hljs-attribute">with_labels</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">edge_color</span>=<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attribute">node_color</span>=<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-attribute">node_size</span>=1500, <span class="hljs-attribute">width</span>=2, <span class="hljs-attribute">font_size</span>=12)<br><br><span class="hljs-comment"># 显示权重</span><br>edges = G.edges()<br><span class="hljs-keyword">for</span> edge <span class="hljs-keyword">in</span> edges:<br>weight = G.get_edge_data(<span class="hljs-number">*ed</span>ge[<span class="hljs-string">&#x27;weight&#x27;</span>]<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;Edge &#123;edge&#125;: weight = &#123;weight&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>画出以下图片的非赋权有向图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308162111622.png" alt="image-20230816211129481"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import networkx as nx<br>import pylab as plt<br><span class="hljs-attribute">G</span>=nx.DiGraph()<br>List=[(1,2),(1,3),(2,3),(3,2),(3,5),(4,2),(4,6),<br>      (5,2),(5,4),(6,5)]<br>G.add_nodes_from(range(1,7))  #必须显式地对顶点赋值<br>G.add_edges_from(List)<br>plt.rc(<span class="hljs-string">&#x27;font&#x27;</span>,<span class="hljs-attribute">size</span>=16)<br><span class="hljs-attribute">pos</span>=nx.shell_layout(G) <br>nx.draw(G,pos,<span class="hljs-attribute">with_labels</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">font_weight</span>=<span class="hljs-string">&#x27;bold&#x27;</span>, <span class="hljs-attribute">node_color</span>=<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308162122383.png" alt="image-20230816212229226"></p><h2 id="图片数据的导出"><a href="#图片数据的导出" class="headerlink" title="图片数据的导出"></a>图片数据的导出</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308162124838.png" alt="image-20230816212404711"></p><p><strong>导出上图所示的赋权图的邻接矩阵和邻接表等数据并重新绘图</strong>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import networkx as nx<br>import pylab as plt<br>import numpy as np<br><br><span class="hljs-attribute">G</span>=nx.Graph()<br>List=[(1, 3, 10), (1, 4, 60), (2, 3, 5),<br>      (2, 4, 20), (3, 4, 1)]<br>G.add_nodes_from(range(1,5))<br>G.add_weighted_edges_from(List)<br>W1 = np.array(list(G.adjacency()))   #从图G导出权重邻接矩阵<br>W2 = nx.get_edge_attributes(G, <span class="hljs-string">&#x27;weight&#x27;</span>)  #导出赋权边的字典数据<br><span class="hljs-attribute">pos</span>=nx.spring_layout(G)<br>nx.draw(G,pos,<span class="hljs-attribute">with_labels</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">font_weight</span>=<span class="hljs-string">&#x27;bold&#x27;</span>)<br>nx.draw_networkx_edge_labels(G,pos, <span class="hljs-attribute">font_size</span>=13, <span class="hljs-attribute">edge_labels</span>=W2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;邻接矩阵为：\n&#x27;</span>, W1); <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;邻接表字典为：\n&#x27;</span>, G.adj)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;邻接表列表为：\n&#x27;</span>, list(G.adjacency()))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;列表字典为：\n&#x27;</span>, nx.to_dict_of_lists(G))<br><br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308162139752.png" alt="image-20230816213945660" style="zoom:50%;" /><h1 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h1><p>最短路径问题是图论中非常经典的问题之一，旨在寻找图中两顶点之间的最短路径。作为一个基本工具，实际应用中的许多优化问题，如管道铺设、线路安排、厂区布局、设备更新等，都可被归结为最短路径问题来解决。</p><p>求最短路的算法有Dijkstra（迪克斯特拉）标号算法和Floyd（弗洛伊德）算法等方法，但Dijkstra标号算法只适用于边权是非负的情形。最短路问题也可以归结为一个 0-1 整数规划模型。</p><h3 id="固定起点的最短路-–-Dijkstra标号算法"><a href="#固定起点的最短路-–-Dijkstra标号算法" class="headerlink" title="固定起点的最短路 – Dijkstra标号算法"></a>固定起点的最短路 – Dijkstra标号算法</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171449853.png" alt="image-20230817144824516"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171449864.png" alt="image-20230817144851654"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171451619.png" alt="image-20230817145109576"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171453726.png" alt="image-20230817145359668"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171456829.png" alt="image-20230817145640782"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import networkx as nx<br><br>G = nx.DiGraph()<br>List = [(1,2,6), (1,3,3), (1,4,1), (2,5,1), (3,2,2), (3,4,2), (4,6,10), (5,4,6),<br>        (5,6,4), (5,7,3), (5,8,6), (6,5,10), (6,7,2), (7,8,4), (9,5,2), (9,8,3)]<br>G.add_nodes_from(range(1,10))<br>G.add_weighted_edges_from(List)<br>path = nx.dijkstra_path(G, 1, 8, <span class="hljs-attribute">weight</span>=<span class="hljs-string">&#x27;weight&#x27;</span>)  #求最短路径<br>d = nx.dijkstra_path_length(G, 1, 8, <span class="hljs-attribute">weight</span>=<span class="hljs-string">&#x27;weight&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最短路径为：&#x27;</span>, path)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最小费用为：&#x27;</span>, d)<br><br><span class="hljs-comment"># 最短路径为： [1, 3, 2, 5, 8]</span><br><span class="hljs-comment"># 最小费用为： 12</span><br><br>W2 = nx.get_edge_attributes(G, <span class="hljs-string">&#x27;weight&#x27;</span>)<br><span class="hljs-attribute">pos</span>=nx.spring_layout(G)<br>nx.draw(G,pos,<span class="hljs-attribute">with_labels</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">font_weight</span>=<span class="hljs-string">&#x27;bold&#x27;</span>)<br>nx.draw_networkx_edge_labels(G,pos, <span class="hljs-attribute">font_size</span>=13, <span class="hljs-attribute">edge_labels</span>=W2)<br>plt.show()<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171516118.png" alt="image-20230817151604068" style="zoom:50%;" /><h3 id="所有顶点之间最短路的Floyd算法"><a href="#所有顶点之间最短路的Floyd算法" class="headerlink" title="所有顶点之间最短路的Floyd算法"></a>所有顶点之间最短路的Floyd算法</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171518744.png" alt="image-20230817151842703"></p><h4 id="求距离矩阵的算法"><a href="#求距离矩阵的算法" class="headerlink" title="求距离矩阵的算法"></a>求距离矩阵的算法</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171520068.png" alt="image-20230817152022013"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171520347.png" alt="image-20230817152037305"></p><h4 id="建立路径矩阵的算法"><a href="#建立路径矩阵的算法" class="headerlink" title="建立路径矩阵的算法"></a>建立路径矩阵的算法</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171521148.png" alt="image-20230817152158106"></p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171522603.png" alt="image-20230817152223547" style="zoom: 50%;" /><h4 id="最短路的路径查找算法"><a href="#最短路的路径查找算法" class="headerlink" title="最短路的路径查找算法"></a>最短路的路径查找算法</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171525986.png" alt="image-20230817152528929"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171525671.png" alt="image-20230817152552617"></p><p><strong>NetworkX 求所有顶点对之间最短路径的函数为</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">shortest_path(G, source=None, target=None, weight=None, <span class="hljs-keyword">method</span>=&#x27;<span class="hljs-title function_">dijkstra</span>&#x27;)<br></code></pre></td></tr></table></figure><ul><li><code>G</code>：一个图。</li><li><code>source</code>：源节点。如果未指定，则默认使用函数中的第一个节点。</li><li><code>target</code>：目标节点。如果未指定，则函数将计算从源节点到所有其他节点的最短路径。</li><li><code>weight</code>：用于衡量路径长度的属性。如果未指定，则使用边的权重作为默认值。</li><li><code>method</code>：指定计算最短路径的方法。目前支持的方法有’dijkstra’、’bellman_ford’和’astar’。如果未指定，则默认使用’dijkstra’方法。①”dijkstra”算法适用于带有正权重的图，它假设所有的权重都是正数。如果图中存在负权重，那么该算法可能无法返回正确的最短路径。②”bellman_ford”算法适用于带有负权重的图，它可以处理权重为负数的情况。但是，该算法要求图中不能存在循环，否则可能无法得到正确的结果。③”astar”算法适用于带有非负权重的图，它是一种启发式搜索算法，可以在加权图中找到最短路径。它使用启发式信息来指导搜索过程，通常可以提供更快的性能。</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">shortest_path_length(G, source=None, target=None, weight=None, <span class="hljs-keyword">method</span>=&#x27;<span class="hljs-title function_">dijkstra</span>&#x27;)<br></code></pre></td></tr></table></figure><p>注意：<code>shortest_path_length</code>与<code>shortest_path</code>函数有些类似，但返回的结果不同。<code>shortest_path</code>返回的是一个包含路径节点的字典，而<code>shortest_path_length</code>返回的是一个包含最短路径长度的字典。</p><p><strong>如果只求所有顶点之间的最短路径</strong>，也可以使用以下函数，<strong>返回值为所有顶点对之间的最短距离矩阵</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">floyd_warshall_numpy(G, <span class="hljs-attribute">nodelist</span>=None, <span class="hljs-attribute">weight</span>=<span class="hljs-string">&#x27;weight&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>G</code>：一个图。</li><li><code>nodelist</code>：节点列表。如果未指定，则使用图的节点列表。</li><li><code>weight</code>：用于衡量路径长度的属性。如果未指定，则使用边的权重作为默认值。</li></ul><p>函数的返回值是一个二维数组，其中第i行第j列的元素表示从节点i到节点j的最短路径长度。Floyd-Warshall算法是一种用于计算加权图中所有节点对之间的最短路径的算法。它适用于带权重的图，可以处理负权重的边。</p><p>e.g.</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171542935.png" alt="image-20230816212404711"></p><p>​    <strong>求图中所示赋权图所有顶点对之间的最短距离和最短路径。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171544875.png" alt="image-20230817154456815"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import networkx as nx<br>import numpy as np<br><br>G = nx<span class="hljs-selector-class">.Graph</span>()<br>List = <span class="hljs-selector-attr">[(1, 3, 10), (1, 4, 60), (2, 3, 5), (2, 4, 20), (3, 4, 1)]</span><br>G<span class="hljs-selector-class">.add_nodes_from</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br>G<span class="hljs-selector-class">.add_weighted_edges_from</span>(List)<br>d = nx<span class="hljs-selector-class">.floyd_warshall_numpy</span>(G)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;最短距离矩阵为：\n&#x27;</span>, d)</span></span><br>path = nx<span class="hljs-selector-class">.shortest_path</span>(G, weight=<span class="hljs-string">&#x27;weight&#x27;</span>, method=<span class="hljs-string">&#x27;bellman-ford&#x27;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(d)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(d)+<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;顶点&#123;&#125;到顶点&#123;&#125;的最短路径为：&#x27;</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">i</span>,j), path<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span>)<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs inform7">最短距离矩阵为：<br> <span class="hljs-comment">[<span class="hljs-comment">[ 0. 15. 10. 11.]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[15.  0.  5.  6.]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[10.  5.  0.  1.]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[11.  6.  1.  0.]</span>]</span><br>顶点1到顶点2的最短路径为： <span class="hljs-comment">[1, 3, 2]</span><br>顶点1到顶点3的最短路径为： <span class="hljs-comment">[1, 3]</span><br>顶点1到顶点4的最短路径为： <span class="hljs-comment">[1, 3, 4]</span><br>顶点2到顶点3的最短路径为： <span class="hljs-comment">[2, 3]</span><br>顶点2到顶点4的最短路径为： <span class="hljs-comment">[2, 3, 4]</span><br>顶点3到顶点4的最短路径为： <span class="hljs-comment">[3, 4]</span><br><br>进程已结束,退出代码0<br></code></pre></td></tr></table></figure><h3 id="应用范例"><a href="#应用范例" class="headerlink" title="应用范例"></a>应用范例</h3><h4 id="设备更新问题"><a href="#设备更新问题" class="headerlink" title="设备更新问题"></a>设备更新问题</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171547925.png" alt="image-20230817154709863"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171548909.png" alt="image-20230817154814867"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171633503.png" alt="image-20230817163302429"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171633064.png" alt="image-20230817163315012"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import numpy as np<br>import networkx as nx<br>import pylab as plt<br><br><span class="hljs-attribute">a</span>=np.zeros((6,6))<br>a[0,1:]=[15,20,27,37,54]<br>a[1,2:]=[15,20,27,37]<br>a[2,3:]=[16,21,28]<br>a[3,4:]=[16,21]<br>a[4,5]=17<br><br><span class="hljs-attribute">G</span>=nx.DiGraph(a)  #构造赋权有向图,顶点编号为0,1,…,5<br><span class="hljs-attribute">p</span>=nx.shortest_path(G,0,5,weight=&#x27;weight&#x27;)<br><span class="hljs-attribute">d</span>=nx.shortest_path_length(G,0,5,weight=&#x27;weight&#x27;)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;path=&#x27;</span>,p); <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d=&#x27;</span>,d)<br>plt.rc(<span class="hljs-string">&#x27;font&#x27;</span>,<span class="hljs-attribute">size</span>=16)<br><span class="hljs-attribute">pos</span>=nx.shell_layout(G)  #设置布局<br><span class="hljs-attribute">w</span>=nx.get_edge_attributes(G,&#x27;weight&#x27;)<br><span class="hljs-attribute">key</span>=range(6); s=[<span class="hljs-string">&#x27;v&#x27;</span>+str(i+1) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key]<br><span class="hljs-attribute">s</span>=dict(zip(key,s)) #构造用于顶点标注的字符字典<br>nx.draw(G, pos, <span class="hljs-attribute">font_weight</span>=<span class="hljs-string">&#x27;bold&#x27;</span>, <span class="hljs-attribute">labels</span>=s, <span class="hljs-attribute">node_color</span>=<span class="hljs-string">&#x27;r&#x27;</span>)<br>nx.draw_networkx_edge_labels(G, pos, <span class="hljs-attribute">edge_labels</span>=w)<br><span class="hljs-attribute">path_edges</span>=list(zip(p, p[1:]))<br>nx.draw_networkx_edges(G, pos, <span class="hljs-attribute">edgelist</span>=path_edges,edge_color=&#x27;r&#x27;, <span class="hljs-attribute">width</span>=3)<br>plt.savefig(<span class="hljs-string">&#x27;fig6_9.png&#x27;</span>, <span class="hljs-attribute">dpi</span>=500); plt.show()<br></code></pre></td></tr></table></figure><h4 id="选址问题"><a href="#选址问题" class="headerlink" title="选址问题"></a>选址问题</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171717149.png" alt="image-20230817171743087"></p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171718898.png" alt="img" style="zoom: 33%;" /><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171718477.png" alt="image-20230817171858423"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171719235.png" alt="image-20230817171912177"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">import</span> networkx as nx<br><br><span class="hljs-attribute">L</span>=[(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">20</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">15</span>), (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">20</span>), (<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">60</span>), (<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">25</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">30</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">18</span>), (<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>)]<br><span class="hljs-attribute">G</span> = nx.Graph()<br><span class="hljs-attribute">G</span>.add_nodes_from(np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>))<br><span class="hljs-attribute">G</span>.add_weighted_edges_from(L)<br><span class="hljs-attribute">d</span> = nx.floyd_warshall_numpy(G)<br><span class="hljs-attribute">d</span> = np.array(d)  #转换为array数组<br><span class="hljs-attribute">md</span> = np.max(d, axis=<span class="hljs-number">1</span>)   #逐行求最大值<br><span class="hljs-attribute">mmd</span> = min(md)          #求最小值<br><span class="hljs-attribute">ind</span> = np.argmin(md)+<span class="hljs-number">1</span>     #求最小值的地址<br><span class="hljs-attribute">print</span>(d); print(<span class="hljs-string">&quot;最小值为：&quot;</span>, mmd)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;最小值的地址为：&quot;</span>, ind)<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[ 0. 20. 33. 63. 15. 30.]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[20.  0. 20. 50. 25. 40.]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[33. 20.  0. 30. 18. 33.]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[63. 50. 30.  0. 48. 63.]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[15. 25. 18. 48.  0. 15.]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[30. 40. 33. 63. 15.  0.]</span>]</span><br>最小值为： 33.0<br>最小值的地址为： 3<br></code></pre></td></tr></table></figure><h4 id="最短路的-0-1-整数规划模型"><a href="#最短路的-0-1-整数规划模型" class="headerlink" title="最短路的 0-1 整数规划模型"></a>最短路的 0-1 整数规划模型</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171952954.png" alt="image-20230817195156857"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171952936.png" alt="image-20230817195215884"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171952330.png" alt="image-20230817195245256"></p><p>e.g.</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171953928.png" alt="image-20230817195323868"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171954292.png" alt="image-20230817195404227"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171954741.png" alt="image-20230817195429684"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308171954451.png" alt="image-20230817195454407"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs subunit">import numpy as np<br>import cvxpy as cp<br><br>L=[(1,2,18),(1,5,15),(2,3,20),(2,4,60),(2,5,12),<br>  (3,4,30),(3,5,18),(4,6,10),(5,6,15)]<br>a=np.ones((6,6))*100000  #邻接矩阵初始化<br>for i in range(len(L)):<br>    a[L[i][0]<span class="hljs-string">-1</span>,L[i][1]<span class="hljs-string">-1</span>]=L[i][2]<br>    a[L[i][1]<span class="hljs-string">-1</span>,L[i][0]<span class="hljs-string">-1</span>]=L[i][2]<br>x=cp.Variable((6,6), integer=True)<br>obj=cp.Minimize(cp.sum(cp.multiply(a, x)))<br>con=[sum(x[1,:])==1, sum(x[:,1])==0,<br>     sum(x[:,3])==1, x&gt;=0, x&lt;=1]<br>for i in set(range(6))-&#123;1,3&#125;:<br>    con.append(sum(x[i,:])==sum(x[:,i]))<br>prob = cp.Problem(obj, con)<br>prob.solve()<br>print(&quot;最优值为:&quot;, prob.value)<br>print(&quot;最优解为：\n&quot;, x.value)<br>i,j=np.nonzero(x.value)<br>print(&quot;最短路径的起点：&quot;, i<span class="hljs-string">+1</span>)<br>print(&quot;最短路径的终点：&quot;, j<span class="hljs-string">+1</span>)<br><br><br>最优值为: 37.0<br>最优解为：<br> [[<span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>.]<br> [<span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>.  1. <span class="hljs-string">-0</span>.]<br> [<span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>.]<br> [<span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>.]<br> [<span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>.  1.]<br> [<span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>.  1. <span class="hljs-string">-0</span>. <span class="hljs-string">-0</span>.]]<br>最短路径的起点： [2 5 6]<br>最短路径的终点： [5 6 4]<br></code></pre></td></tr></table></figure><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p><code>minimum_spanning_tree</code> 是 NetworkX 库中的一个函数，用于计算给定图 G 的最小生成树。函数的参数包括图 G、边的权值属性 weight，以及使用的算法 algorithm。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">T</span>=minimum_spanning_tree(G, <span class="hljs-attribute">weight</span>=<span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attribute">algorithm</span>=<span class="hljs-string">&#x27;kruskal&#x27;</span>)<br></code></pre></td></tr></table></figure><p>其中G为输入的图，algorithm的取值有三种字符串：’kruskal’，’prim’，或’boruvka’，缺省值为’kruskal’；返回值T为所求得的最小生成树的可迭代对象。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308172004700.png" alt="image-20230817200453634"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308172005795.png" alt="image-20230817200532746"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308172005300.png" alt="image-20230817200541254"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> networkx as nx<br><span class="hljs-attribute">import</span> pylab as plt<br><br><span class="hljs-attribute">L</span>=[(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>)]<br><span class="hljs-attribute">G</span>=nx.Graph()<br><span class="hljs-attribute">G</span>.add_weighted_edges_from(L)<br><span class="hljs-attribute">T</span>=nx.minimum_spanning_tree(G)  #返回可迭代对象<br><br><span class="hljs-attribute">pos</span>=nx.circular_layout(G)<br><span class="hljs-attribute">plt</span>.subplot(<span class="hljs-number">121</span>)  #下面画连通图<br><span class="hljs-attribute">nx</span>.draw(G,pos,with_labels=True, font_size=<span class="hljs-number">13</span>)<br><span class="hljs-attribute">w1</span>=nx.get_edge_attributes(G, &#x27;weight&#x27;)<br><span class="hljs-attribute">nx</span>.draw_networkx_edge_labels(G, pos, edge_labels=w1)<br><span class="hljs-attribute">plt</span>.subplot(<span class="hljs-number">122</span>)  #下面画最小生成树<br><span class="hljs-attribute">nx</span>.draw(T, pos, with_labels=True, font_weight=&#x27;bold&#x27;)<br><span class="hljs-attribute">w2</span>=nx.get_edge_attributes(T, &#x27;weight&#x27;)<br><span class="hljs-attribute">nx</span>.draw_networkx_edge_labels(T, pos, edge_labels=w2)<br><span class="hljs-attribute">plt</span>.show()<br></code></pre></td></tr></table></figure><p><strong>模型</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181517158.png" alt="image-20230818151632577"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181517171.png" alt="image-20230818151643703"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181517559.png" alt="image-20230818151719492"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181517331.png" alt="image-20230818151736268"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181517497.png" alt="image-20230818151752422"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs routeros"> import cvxpy as cp  <br>import numpy as np  <br>  <br><span class="hljs-comment"># 定义一个列表L，其中包含了图的边信息，每个元素是一个元组，元组的第一个元素是边的起点，第二个元素是边的终点，第三个元素是边的权重  </span><br>L=[(0,1,2),(0,2,1),(0,3,3),(0,4,4),(0,5,4),(0,6,2),(0,7,5),(0,8,4),  <br>    (1,2,4),(1,8,1),(2,3,1),(3,4,1),(4,5,5),(5,6,2),(6,7,3),(7,8,5)]  <br>  <br><span class="hljs-comment"># 创建一个9x9的二维数组a，所有元素初始值为10000  </span><br><span class="hljs-attribute">a</span>=np.ones((9,9))*10000  <br>  <br><span class="hljs-comment"># 通过循环遍历列表L中的每一个元素，也就是每一个边的信息  </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(L)):  <br>    # 根据边的信息，更新二维数组a的对应位置的元素值，这里可能是某种图的权值表示  <br>    a[L[i][0], L[i][1]]=L[i][2]  <br>    # 注意这里同时也把(L[i][1], L[i][0])的值设为相同的值，这是因为在无向图的情况下，一条边的两个方向是等价的  <br>    a[L[i][1], L[i][0]]=L[i][2]  <br>  <br><span class="hljs-comment"># 在cvxpy中，创建一个9x9的变量x，这个变量的每个元素都为整数  </span><br><span class="hljs-attribute">x</span>=cp.Variable((9,9), <span class="hljs-attribute">integer</span>=<span class="hljs-literal">True</span>)  <br><span class="hljs-comment"># 在cvxpy中，创建一个长度为9的变量u，这个变量的每个元素都为正数  </span><br><span class="hljs-attribute">u</span>=cp.Variable(9, <span class="hljs-attribute">pos</span>=<span class="hljs-literal">True</span>)  <br>  <br><span class="hljs-comment"># 定义优化问题的目标函数，这里是求a与x的乘积的和的最小值  </span><br><span class="hljs-attribute">obj</span>=cp.Minimize(cp.sum(cp.multiply(a,x)))  <br>  <br><span class="hljs-comment"># 定义优化问题的约束条件，这里主要有以下几类：  </span><br><span class="hljs-comment"># 1. x的第一列的和大于等于1  </span><br>con=[cp.sum(x[0,:])&gt;=1, u[0]==0,  <br>     # 2. u的后8个元素大于等于1且小于等于8  <br>     u[1:]&gt;=1, u[1:]&lt;=8, x&gt;=0, x&lt;=1]  <br><span class="hljs-comment"># 3. 对于每一行，只有一列的元素值为1，其余元素值为0  </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,9):  <br>    con.append(sum(x[:,i])==1)  <br><span class="hljs-comment"># 4. 对于每一列，u[i]与u[j]的差值加上9乘以x[i,j]小于等于8  </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(9):  <br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,9):  <br>        con.append(u[i]-u[j]+9*x[i,j]&lt;=8)  <br>  <br><span class="hljs-comment"># 根据目标和约束创建一个优化问题实例  </span><br>prob = cp.Problem(obj, con)  <br>  <br><span class="hljs-comment"># 解决这个优化问题  </span><br>prob.solve()  <br>  <br><span class="hljs-comment"># 找到变量x中所有值为非零的元素的索引，也就是图中的顶点索引  </span><br>i, j = np.nonzero(x.value)  <br>  <br><span class="hljs-comment"># 输出最优值和最优解  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优值为:&quot;</span>,prob.value)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优解为：\n&quot;</span>,x.value)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;i=&#x27;</span>, i); <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;j=&#x27;</span>, j)<br></code></pre></td></tr></table></figure><h1 id="角色问题"><a href="#角色问题" class="headerlink" title="角色问题"></a>角色问题</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181601530.png" alt="image-20230818155757773"></p><p>  e.g.<strong>会议安排</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181728117.png" alt="image-20230818172817064"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181730196.png" alt="image-20230818173016129"></p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181730342.png" alt="image-20230818173032296" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cvxpy <span class="hljs-keyword">as</span> cp<br><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>L = [&#123;<span class="hljs-string">&#x27;张&#x27;</span>,<span class="hljs-string">&#x27;李&#x27;</span>,<span class="hljs-string">&#x27;王&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;李&#x27;</span>,<span class="hljs-string">&#x27;赵&#x27;</span>,<span class="hljs-string">&#x27;刘&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;张&#x27;</span>,<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;王&#x27;</span>&#125;,<br>     &#123;<span class="hljs-string">&#x27;赵&#x27;</span>,<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;孙&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;张&#x27;</span>,<span class="hljs-string">&#x27;王&#x27;</span>,<span class="hljs-string">&#x27;孙&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;李&#x27;</span>,<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;王&#x27;</span>&#125;]<br>w = np.zeros((<span class="hljs-number">6</span>,<span class="hljs-number">6</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-number">6</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(L[i] &amp; L[j])&gt;=<span class="hljs-number">1</span>:<br>            w[i,j] = <span class="hljs-number">1</span>  <span class="hljs-comment">#构造邻接矩阵的上三角元素</span><br>ni, nj = np.nonzero(w)  <span class="hljs-comment">#边的端点编号</span><br>w = w + w.T   <span class="hljs-comment">#构造完整的邻接矩阵</span><br>deg = w.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)  <span class="hljs-comment">#求各个顶点的度</span><br>K = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">max</span>(deg))  <span class="hljs-comment">#顶点的最大度</span><br>n = <span class="hljs-built_in">len</span>(w)  <span class="hljs-comment">#顶点的个数</span><br>x = cp.Variable((n, K+<span class="hljs-number">1</span>), integer=<span class="hljs-literal">True</span>)<br>y = cp.Variable()  <span class="hljs-comment">#定义一个变量</span><br>obj = cp.Minimize(y)<br>con = [cp.<span class="hljs-built_in">sum</span>(x, axis=<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>, x&gt;=<span class="hljs-number">0</span>, x&lt;=<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    con.append(y&gt;=<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,K+<span class="hljs-number">2</span>)@x[i,:])<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(K+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ni)):<br>        con.append(x[ni[i],k]+x[nj[i],k]&lt;=<span class="hljs-number">1</span>)<br>prob = cp.Problem(obj, con)<br>prob.solve()<br>i, k = np.nonzero(x.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优值为:&quot;</span>,prob.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优解为：\n&quot;</span>,x.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;顶点和颜色的对应关系如下：&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;i=&#x27;</span>, i+<span class="hljs-number">1</span>); <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k=&#x27;</span>, k+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="最大流与最小费用流问题"><a href="#最大流与最小费用流问题" class="headerlink" title="最大流与最小费用流问题"></a>最大流与最小费用流问题</h1><h2 id="最大流问题"><a href="#最大流问题" class="headerlink" title="最大流问题"></a>最大流问题</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181735351.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181735479.png" alt="image-20230818173535424"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181736214.png" alt="image-20230818173627151"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs routeros"> import networkx as nx    <br>import numpy as np  <br>import matplotlib.pyplot as plt  <br>  <br><span class="hljs-comment"># 创建一个有向图 G  </span><br><span class="hljs-attribute">G</span>=nx.DiGraph()  <br>  <br><span class="hljs-comment"># 添加节点到图 G，节点编号从1到8  </span><br>G.add_nodes_from(range(1,9))  <br>  <br><span class="hljs-comment"># 添加带权重的边到图 G，边的权重设置为&#x27;capacity&#x27;  </span><br>G.add_weighted_edges_from(L,<span class="hljs-attribute">weight</span>=<span class="hljs-string">&#x27;capacity&#x27;</span>)  # 这里 L 是未定义的变量，需要具体定义  <br>  <br><span class="hljs-comment"># 使用 networkx 的 maximum_flow 函数计算从节点1到节点8的最大流，返回流量值和每个边的流量值  </span><br>value, flow_dict= nx.maximum_flow(G, 1, 8)  <br>  <br><span class="hljs-comment"># 打印最大流的流量值  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最大流的流量为：&quot;</span>,value)  <br>  <br><span class="hljs-comment"># 打印最大流每个边的流量值  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最大流为：&quot;</span>, flow_dict)  <br>  <br><span class="hljs-comment"># 获取最大流邻接矩阵的大小  </span><br>n = len(flow_dict)  <br>  <br><span class="hljs-comment"># 创建一个 n*n 的全零数组 adj_mat，用于存储最大流的邻接矩阵  </span><br>adj_mat = np.zeros((n, n), <span class="hljs-attribute">dtype</span>=int)  <br>  <br><span class="hljs-comment"># 遍历每个边的流量值，将流量值对应到邻接矩阵的相应位置  </span><br><span class="hljs-keyword">for</span> i, adj <span class="hljs-keyword">in</span> flow_dict.items():  <br>    <span class="hljs-keyword">for</span> j, weight <span class="hljs-keyword">in</span> adj.items():  <br>        adj_mat[i-1,j-1] = weight  <br>  <br><span class="hljs-comment"># 打印最大流的邻接矩阵  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最大流的邻接矩阵为：\n&quot;</span>,adj_mat)  <br>  <br><span class="hljs-comment"># 获取邻接矩阵非零元素的位置（即最大流中的边的两端点）  </span><br>ni,<span class="hljs-attribute">nj</span>=np.nonzero(adj_mat)  #非零弧的两端点编号  <br>  <br><span class="hljs-comment"># 设置 matplotlib 的字体大小为16  </span><br>plt.rc(<span class="hljs-string">&#x27;font&#x27;</span>,<span class="hljs-attribute">size</span>=16)  <br>  <br><span class="hljs-comment"># 使用 networkx 的 shell_layout 函数设置图的布局（这里未使用）  </span><br><span class="hljs-attribute">pos</span>=nx.shell_layout(G)  #设置布局  <br>  <br><span class="hljs-comment"># 获取边的容量属性，用于绘制标签（这里未使用）  </span><br><span class="hljs-attribute">w</span>=nx.get_edge_attributes(G,&#x27;capacity&#x27;)  <br>  <br><span class="hljs-comment"># 绘制图 G，节点加粗，带标签，颜色为黄色  </span><br>nx.draw(G,pos,<span class="hljs-attribute">font_weight</span>=<span class="hljs-string">&#x27;bold&#x27;</span>,with_labels=True,node_color=&#x27;y&#x27;)  <br>  <br><span class="hljs-comment"># 绘制图的边标签，标签为边的容量值（这里未使用）  </span><br>nx.draw_networkx_edge_labels(G,pos,<span class="hljs-attribute">edge_labels</span>=w)  <br>  <br><span class="hljs-comment"># 将非零元素的位置转化为边的编号（即最大流中的路径）  </span><br><span class="hljs-attribute">path_edges</span>=list(zip(ni+1,nj+1))  <br>  <br><span class="hljs-comment"># 绘制最大流路径的边，颜色为红色，宽度为3  </span><br>nx.draw_networkx_edges(G,pos,<span class="hljs-attribute">edgelist</span>=path_edges,edge_color=&#x27;r&#x27;,width=3)  <br>  <br><span class="hljs-comment"># 显示绘制的图  </span><br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308181738512.png" alt="image-20230818173845439"></p><h3 id="解法一-图论"><a href="#解法一-图论" class="headerlink" title="解法一 图论"></a>解法一 图论</h3><p><img src="image-20230820004106878.png" alt="image-20230820004106878"></p><p><img src="image-20230820003341836.png" alt="image-20230820003341836"></p><p><strong>代码如下</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import numpy as np<br>import networkx as nx<br>node=[<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;2b&#x27;</span>,<span class="hljs-string">&#x27;3b&#x27;</span>,<span class="hljs-string">&#x27;4b&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>]<br><span class="hljs-attribute">n</span>=len(node); <span class="hljs-attribute">G</span>=nx.DiGraph(); G.add_nodes_from(node)<br>L=[(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,4),(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,3),(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,3),(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,2),(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,4),(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;2b&#x27;</span>,1),<br>   (<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,1),(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;3b&#x27;</span>,1),(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;4b&#x27;</span>,1),(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;2b&#x27;</span>,1),(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,1),(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,1),<br>   (<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;4b&#x27;</span>,1),(<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,1),(<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,1),(<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,1),(<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;4b&#x27;</span>,1),(<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,1),<br>   (<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,1),(<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;3b&#x27;</span>,1),(<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;4b&#x27;</span>,1),(<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;2b&#x27;</span>,1),(<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,1),(<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,1),<br>   (<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,1),(<span class="hljs-string">&#x27;2b&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,2),(<span class="hljs-string">&#x27;3b&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,1),(<span class="hljs-string">&#x27;4b&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,2),(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,5),(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,4),<br>   (<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,4),(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,3)]<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(len(L)):<br>    G.add_edge(L[k][0],L[k][1],<span class="hljs-attribute">capacity</span>=L[k][2])<br>value, flow_dict= nx.maximum_flow(G, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>)<br><span class="hljs-built_in">print</span>(value); <span class="hljs-built_in">print</span>(flow_dict)<br><span class="hljs-attribute">A</span>=np.zeros((n,n),dtype=int)<br><span class="hljs-keyword">for</span> i,adj <span class="hljs-keyword">in</span> flow_dict.items():<br>    <span class="hljs-keyword">for</span> j,f <span class="hljs-keyword">in</span> adj.items():<br>        A[node.index(i), node.index(j)]=f<br><span class="hljs-built_in">print</span>(A)<br></code></pre></td></tr></table></figure><h3 id="解法二-0-1规划"><a href="#解法二-0-1规划" class="headerlink" title="解法二  0-1规划"></a>解法二  0-1规划</h3><p><img src="image-20230820004449616.png" alt="image-20230820004449457"></p><img src="C:/Users/86187/AppData/Roaming/Typora/typora-user-images/image-20230820004548166.png" alt="image-20230820004548166" style="zoom: 50%;" /><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import numpy as np<br>import cvxpy as cp<br><span class="hljs-attribute">a</span>=np.array([4, 3, 3, 2, 4])<br><span class="hljs-attribute">x</span>=cp.Variable((4,5), <span class="hljs-attribute">integer</span>=<span class="hljs-literal">True</span>)<br>obj = cp.Maximize(cp.sum(x))<br>con= [cp.sum(x, <span class="hljs-attribute">axis</span>=0) &lt;= a, <br>  x[1,0]+x[1,1]+x[1,4] &lt;= 2,<br>      x[2,0]+x[2,3] &lt;= 1, <br>      sum(x[3,:-1]) &lt;= 2, <br>      x&gt;=0, x&lt;=1]<br>prob = cp.Problem(obj, con); prob.solve()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优值为:&quot;</span>,prob.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优解为：\n&quot;</span>,x.value)<br></code></pre></td></tr></table></figure><h2 id="最小费用流问题"><a href="#最小费用流问题" class="headerlink" title="最小费用流问题"></a>最小费用流问题</h2><p><img src="image-20230820005647995.png" alt="image-20230820005647995"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import numpy as np<br>import networkx as nx<br>L=[(<span class="hljs-string">&#x27;vs&#x27;</span>,<span class="hljs-string">&#x27;v2&#x27;</span>,5,3),(<span class="hljs-string">&#x27;vs&#x27;</span>,<span class="hljs-string">&#x27;v3&#x27;</span>,3,6),(<span class="hljs-string">&#x27;v2&#x27;</span>,<span class="hljs-string">&#x27;v4&#x27;</span>,2,8),(<span class="hljs-string">&#x27;v3&#x27;</span>,<span class="hljs-string">&#x27;v2&#x27;</span>,1,2),(<span class="hljs-string">&#x27;v3&#x27;</span>,<span class="hljs-string">&#x27;v5&#x27;</span>,4,2),<br>   (<span class="hljs-string">&#x27;v4&#x27;</span>,<span class="hljs-string">&#x27;v3&#x27;</span>,1,1),(<span class="hljs-string">&#x27;v4&#x27;</span>,<span class="hljs-string">&#x27;v5&#x27;</span>,3,4),(<span class="hljs-string">&#x27;v4&#x27;</span>,<span class="hljs-string">&#x27;vt&#x27;</span>,2,10),(<span class="hljs-string">&#x27;v5&#x27;</span>,<span class="hljs-string">&#x27;vt&#x27;</span>,5,2)]<br><span class="hljs-attribute">G</span>=nx.DiGraph()<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(len(L)):<br>    G.add_edge(L[k][0], L[k][1], <span class="hljs-attribute">capacity</span>=L[k][2], <span class="hljs-attribute">weight</span>=L[k][3])<br><span class="hljs-attribute">maxFlow</span>=nx.max_flow_min_cost(G,&#x27;vs&#x27;,&#x27;vt&#x27;)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;所求最大流为：&quot;</span>,maxFlow)<br><span class="hljs-attribute">mincost</span>=nx.cost_of_flow(G, maxFlow)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最小费用为：&quot;</span>, mincost)<br>node = list(G.nodes())  #导出顶点列表<br><span class="hljs-attribute">n</span>=len(node); <span class="hljs-attribute">flow_mat</span>=np.zeros((n,n))<br><span class="hljs-keyword">for</span> i,adj <span class="hljs-keyword">in</span> maxFlow.items():<br>    <span class="hljs-keyword">for</span> j,f <span class="hljs-keyword">in</span> adj.items():<br>        flow_mat[node.index(i),node.index(j)]=f<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最大流的流量为：&quot;</span>, sum(flow_mat[:,-1]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最小费用最大流的邻接矩阵为：\n&quot;</span>,flow_mat)<br></code></pre></td></tr></table></figure><h1 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h1><h2 id="计划网络图"><a href="#计划网络图" class="headerlink" title="计划网络图"></a>计划网络图</h2><p><img src="image-20230820010430223.png" alt="image-20230820010430223"></p><p><img src="image-20230820010542515.png" alt="image-20230820010542515"></p><p><strong>建立计划网络图</strong></p><img src="C:/Users/86187/AppData/Roaming/Typora/typora-user-images/image-20230820013104221.png" alt="image-20230820013104221" style="zoom:80%;" /><p><img src="image-20230820013143068.png" alt="image-20230820013143068"></p><img src="C:/Users/86187/AppData/Roaming/Typora/typora-user-images/image-20230820013230385.png" alt="image-20230820013230385" style="zoom:80%;" /><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">import numpy as np<br>import cvxpy as cp<br><br>x = cp.<span class="hljs-symbol">Variable</span>(<span class="hljs-number">8</span>, pos=<span class="hljs-symbol">True</span>)<br><span class="hljs-symbol">L</span> = [(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>), (<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>),<br>     (<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">21</span>), (<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">25</span>), (<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">35</span>), (<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">20</span>), (<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>)]<br>obj = cp.<span class="hljs-symbol">Minimize</span>(sum(x)); con = []<br>for k in range(len(<span class="hljs-symbol">L</span>)):<br>    con.append(x[<span class="hljs-symbol">L</span>[k][<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>] &gt;= x[<span class="hljs-symbol">L</span>[k][<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>] + <span class="hljs-symbol">L</span>[k][<span class="hljs-number">2</span>])<br>prob = cp.<span class="hljs-symbol">Problem</span>(obj, con); prob.solve()<br>print(<span class="hljs-string">&#x27;最优值为&#x27;</span>, prob.value); print(<span class="hljs-string">&#x27;最优解为：&#x27;</span>, x.value)<br></code></pre></td></tr></table></figure><p><strong>求每个作业的最早开工时间、最迟开工时间和作业的关键路径</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs prolog">import numpy as np<br>import cvxpy as cp<br><br>n =<span class="hljs-number">8</span>; x = cp.<span class="hljs-symbol">Variable</span>(n, pos=<span class="hljs-symbol">True</span>); z = np.zeros(n)<br><span class="hljs-symbol">L</span> = [(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>), (<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>),<br>     (<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">21</span>), (<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">25</span>), (<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">35</span>), (<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">20</span>), (<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>)]<br>obj = cp.<span class="hljs-symbol">Minimize</span>(sum(x)); con = []<br>for k in range(len(<span class="hljs-symbol">L</span>)):<br>    con.append(x[<span class="hljs-symbol">L</span>[k][<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>] &gt;= x[<span class="hljs-symbol">L</span>[k][<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>] + <span class="hljs-symbol">L</span>[k][<span class="hljs-number">2</span>])<br>prob = cp.<span class="hljs-symbol">Problem</span>(obj, con); prob.solve()<br>print(<span class="hljs-string">&#x27;最优值为&#x27;</span>, prob.value); print(<span class="hljs-string">&#x27;最优解为：&#x27;</span>, x.value)<br>xx = x.value; z[<span class="hljs-number">-1</span>] = xx[<span class="hljs-number">-1</span>]<br>for k in range(n<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):<br>    z[k<span class="hljs-number">-1</span>]=min([z[a[<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>]-a[<span class="hljs-number">2</span>] for a in <span class="hljs-symbol">L</span> if a[<span class="hljs-number">0</span>]==k])<br>print(<span class="hljs-string">&#x27;z:&#x27;</span>, z); es=[]; lf=[]; ls=[]; ef=[]<br>for i in range(len(<span class="hljs-symbol">L</span>)):<br>    es.append([<span class="hljs-symbol">L</span>[i][<span class="hljs-number">0</span>], <span class="hljs-symbol">L</span>[i][<span class="hljs-number">1</span>], xx[<span class="hljs-symbol">L</span>[i][<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>]])<br>    lf.append([<span class="hljs-symbol">L</span>[i][<span class="hljs-number">0</span>], <span class="hljs-symbol">L</span>[i][<span class="hljs-number">1</span>], z[<span class="hljs-symbol">L</span>[i][<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>]])<br>    ls.append([<span class="hljs-symbol">L</span>[i][<span class="hljs-number">0</span>], <span class="hljs-symbol">L</span>[i][<span class="hljs-number">1</span>], z[<span class="hljs-symbol">L</span>[i][<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>]-<span class="hljs-symbol">L</span>[i][<span class="hljs-number">2</span>]])<br>    ef.append([<span class="hljs-symbol">L</span>[i][<span class="hljs-number">0</span>], <span class="hljs-symbol">L</span>[i][<span class="hljs-number">1</span>], xx[<span class="hljs-symbol">L</span>[i][<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>]+<span class="hljs-symbol">L</span>[i][<span class="hljs-number">2</span>]])<br>print(<span class="hljs-string">&#x27;作业最早开工时间如下：&#x27;</span>); print(es)<br>print(<span class="hljs-string">&#x27;作业最晚开工时间如下：&#x27;</span>); print(ls)<br></code></pre></td></tr></table></figure><p><strong>将关键路线看成最长路</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs prolog">import numpy as np<br>import cvxpy as cp<br><br><span class="hljs-symbol">L</span> = [(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>), (<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>),<br>     (<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">21</span>), (<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">25</span>), (<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">35</span>), (<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">20</span>), (<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>)]<br>x = cp.<span class="hljs-symbol">Variable</span>((<span class="hljs-number">8</span>,<span class="hljs-number">8</span>), integer=<span class="hljs-symbol">True</span>); fun = <span class="hljs-number">0</span><br>for i in range(len(<span class="hljs-symbol">L</span>)):<br>    fun = fun + x[<span class="hljs-symbol">L</span>[i][<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>,<span class="hljs-symbol">L</span>[i][<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>] * <span class="hljs-symbol">L</span>[i][<span class="hljs-number">2</span>]<br>obj = cp.<span class="hljs-symbol">Maximize</span>(fun); con =[ x&gt;=<span class="hljs-number">0</span>, x&lt;=<span class="hljs-number">1</span>]<br>out = [a[<span class="hljs-number">1</span>]<span class="hljs-number">-1</span> for a in <span class="hljs-symbol">L</span> if a[<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>]  #起点相邻顶点的编号<br>con.append(sum(x[<span class="hljs-number">0</span>,out])==<span class="hljs-number">1</span>)   #起点发出弧的约束<br>ind = [a[<span class="hljs-number">0</span>]<span class="hljs-number">-1</span> for a in <span class="hljs-symbol">L</span> if a[<span class="hljs-number">1</span>]==<span class="hljs-number">8</span>]  #终点相邻顶点的编号<br>con.append(sum(x[ind,<span class="hljs-number">7</span>])==<span class="hljs-number">1</span>)   #终点进入弧的约束<br>for k in range(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>):<br>    out = [a[<span class="hljs-number">1</span>]<span class="hljs-number">-1</span> for a in <span class="hljs-symbol">L</span> if a[<span class="hljs-number">0</span>]==k]  #k的出弧的相邻顶点<br>    ind = [a[<span class="hljs-number">0</span>]<span class="hljs-number">-1</span> for a in <span class="hljs-symbol">L</span> if a[<span class="hljs-number">1</span>]==k]  #k的入弧的相邻顶点<br>    con.append(sum(x[k<span class="hljs-number">-1</span>,out])==sum(x[ind,k<span class="hljs-number">-1</span>]))<br>prob = cp.<span class="hljs-symbol">Problem</span>(obj, con); prob.solve()<br>print(<span class="hljs-string">&#x27;最优值为&#x27;</span>, prob.value); print(<span class="hljs-string">&#x27;最优解为：\n&#x27;</span>, x.value)<br>ni, nj = np.nonzero(x.value)<br>print(<span class="hljs-string">&#x27;关键路径的端点为:&#x27;</span>); print(ni+<span class="hljs-number">1</span>); print(nj+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-启动和内核管理</title>
    <link href="/2023/08/13/Linux-%E5%90%AF%E5%8A%A8%E5%92%8C%E5%86%85%E6%A0%B8%E7%AE%A1%E7%90%86/"/>
    <url>/2023/08/13/Linux-%E5%90%AF%E5%8A%A8%E5%92%8C%E5%86%85%E6%A0%B8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS-6-启动管理"><a href="#CentOS-6-启动管理" class="headerlink" title="CentOS 6 启动管理"></a>CentOS 6 启动管理</h1><h2 id="Linux组成"><a href="#Linux组成" class="headerlink" title="Linux组成"></a>Linux组成</h2><ul><li><p>kernel （内核）实现进程管理、内存管理、网络管理、驱动程序、文件系统、安全功能等功能。</p></li><li><p>rootfs 包括程序和 glibc 库</p><p>  ​    程序：二进制执行文件</p><p>  ​    库：函数集合，function，调用接口（头文件负责描述）</p></li></ul><h2 id="内核设计流派"><a href="#内核设计流派" class="headerlink" title="内核设计流派"></a>内核设计流派</h2><p>宏内核（单内核/强内核）：Unix，Linux</p><p>微内核：Windows、Solaris、HarmonyOS</p><h2 id="CentOS-6-启动流程"><a href="#CentOS-6-启动流程" class="headerlink" title="CentOS 6 启动流程"></a>CentOS 6 启动流程</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>POST：加电自检     -&gt;    MBR引导    -&gt;    GRUB    -&gt;    加载内核</strong></p><h3 id="1-硬件启动-POST"><a href="#1-硬件启动-POST" class="headerlink" title="1.硬件启动 POST"></a>1.硬件启动 POST</h3><p>POST：Power-On-Self-Test，加电自检，是BIOS（基本输入输出系统）功能的一个主要部分。负责对CPU、主板、内存、硬件子系统、显示子系统、串并行接口、键盘等硬件情况检测。</p><p>主板的ROM（只读）：BIOS（硬件厂商设置），Basic Input and Output System，保存着有关计算机系统最重要的基本输入输出程序，系统信息设置、开机加电自检程序和系统启动自举程序等。</p><p>主板的RAM（可写）：CMOS，保存各项参数的设定，按次序查找引导设备，第一个有引导程序的设备为本次启动设备。</p><h3 id="2-启动加载器-bootloader"><a href="#2-启动加载器-bootloader" class="headerlink" title="2.启动加载器 bootloader"></a>2.启动加载器 bootloader</h3><h4 id="grub-功能和组成"><a href="#grub-功能和组成" class="headerlink" title="grub 功能和组成"></a>grub 功能和组成</h4><p>bootloader 引导加载器，引导程序</p><ul><li>Windows：ntloader</li><li>Linux：LILO（淘汰）、GRUB</li></ul><p><strong>GRUB 启动阶段</strong></p><ul><li><strong>primary boot loader</strong> </li></ul><p>​    1st stage :：MBR 的前446个字节</p><p>​    1.5 stage ：MBR 之后的扇区，让stage1中的 bootloader 能识别stage2所在的分区上的文件系统</p><ul><li> secondary boot loader ：2nd stage ，分区文件／ boot / grub</li></ul><h4 id="CentOS-6-grub-安装"><a href="#CentOS-6-grub-安装" class="headerlink" title="CentOS 6 grub 安装"></a>CentOS 6 grub 安装</h4><p>安装grub的两种方法：</p><p>(1) grub - install 安装 grub stage1和和 stage1_5到 /dev/DISK 磁盘上,井复制 GRUB 相关文件到 DIR/boot 目录下<strong>（优选这个）</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">grub-install --root-directory=DIR <span class="hljs-regexp">/dev/</span>DISK<br></code></pre></td></tr></table></figure><p>(2) grub 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">grub</span><br><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">root (hd<span class="hljs-comment">#,#)</span></span><br><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">setup (hd<span class="hljs-comment">#)</span></span><br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-云上安全防护</title>
    <link href="/2023/08/05/ACA-%E4%BA%91%E4%B8%8A%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/"/>
    <url>/2023/08/05/ACA-%E4%BA%91%E4%B8%8A%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="云平台安全概述"><a href="#云平台安全概述" class="headerlink" title="云平台安全概述"></a>云平台安全概述</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101623652.png" alt="image-20230810162328611"></p><h2 id="什么是云计算平台"><a href="#什么是云计算平台" class="headerlink" title="什么是云计算平台"></a>什么是云计算平台</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101627620.png" alt="image-20230810162726572"></p><h2 id="云安全基础概括"><a href="#云安全基础概括" class="headerlink" title="云安全基础概括"></a>云安全基础概括</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101627950.png" alt="image-20230810162748911"></p><h2 id="云安全与传统安全的区别"><a href="#云安全与传统安全的区别" class="headerlink" title="云安全与传统安全的区别"></a>云安全与传统安全的区别</h2><h3 id="传统安全"><a href="#传统安全" class="headerlink" title="传统安全"></a>传统安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101628329.png" alt="image-20230810162822284"></p><h3 id="云安全"><a href="#云安全" class="headerlink" title="云安全"></a>云安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101628223.png" alt="image-20230810162856186"></p><h3 id="云安全与传统安全的区别-1"><a href="#云安全与传统安全的区别-1" class="headerlink" title="云安全与传统安全的区别"></a>云安全与传统安全的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101629266.png" alt="image-20230810162922192"></p><h2 id="云平台安全的特点总结"><a href="#云平台安全的特点总结" class="headerlink" title="云平台安全的特点总结"></a>云平台安全的特点总结</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101630222.png" alt="image-20230810163029154"></p><h2 id="云计算平台安全风险分析"><a href="#云计算平台安全风险分析" class="headerlink" title="云计算平台安全风险分析"></a>云计算平台安全风险分析</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101630661.png" alt="image-20230810163041624"></p><h2 id="云计算平台安全问题与挑战"><a href="#云计算平台安全问题与挑战" class="headerlink" title="云计算平台安全问题与挑战"></a>云计算平台安全问题与挑战</h2><h3 id="云计算平台安全问题"><a href="#云计算平台安全问题" class="headerlink" title="云计算平台安全问题"></a>云计算平台安全问题</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101631304.png" alt="image-20230810163116225"></p><h3 id="云计算挑战"><a href="#云计算挑战" class="headerlink" title="云计算挑战"></a>云计算挑战</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101632520.png" alt="image-20230810163207422"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="云计算与传统安全有哪些区别？"><a href="#云计算与传统安全有哪些区别？" class="headerlink" title="云计算与传统安全有哪些区别？"></a>云计算与传统安全有哪些区别？</h3><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="云计算安全的风险分析"><a href="#云计算安全的风险分析" class="headerlink" title="云计算安全的风险分析"></a>云计算安全的风险分析</h1><h2 id="重大安全事件回顾"><a href="#重大安全事件回顾" class="headerlink" title="重大安全事件回顾"></a>重大安全事件回顾</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101635651.png" alt="image-20230810163509583"></p><h2 id="云计算安全风险的主要来源"><a href="#云计算安全风险的主要来源" class="headerlink" title="云计算安全风险的主要来源"></a>云计算安全风险的主要来源</h2><h3 id="IT风险及IT系统风控"><a href="#IT风险及IT系统风控" class="headerlink" title="IT风险及IT系统风控"></a>IT风险及IT系统风控</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101636984.png" alt="image-20230810163618923"></p><h3 id="主要来源"><a href="#主要来源" class="headerlink" title="主要来源"></a>主要来源</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101636154.png" alt="image-20230810163645080"></p><h2 id="云计算面临的主要安全威胁"><a href="#云计算面临的主要安全威胁" class="headerlink" title="云计算面临的主要安全威胁"></a>云计算面临的主要安全威胁</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101637841.png" alt="image-20230810163709788"></p><h2 id="云计算存在的安全问题"><a href="#云计算存在的安全问题" class="headerlink" title="云计算存在的安全问题"></a>云计算存在的安全问题</h2><h3 id="虚拟化安全"><a href="#虚拟化安全" class="headerlink" title="虚拟化安全"></a>虚拟化安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101637540.png" alt="image-20230810163748473"></p><h3 id="用户隐私安全"><a href="#用户隐私安全" class="headerlink" title="用户隐私安全"></a>用户隐私安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101638615.png" alt="image-20230810163821538"></p><h3 id="数据储存的安全"><a href="#数据储存的安全" class="headerlink" title="数据储存的安全"></a>数据储存的安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101638869.png" alt="image-20230810163850776"></p><h2 id="云平台的稳定性的抗攻击能力"><a href="#云平台的稳定性的抗攻击能力" class="headerlink" title="云平台的稳定性的抗攻击能力"></a>云平台的稳定性的抗攻击能力</h2><h3 id="网络稳定性"><a href="#网络稳定性" class="headerlink" title="网络稳定性"></a>网络稳定性</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101639314.png" alt="image-20230810163931250"></p><h3 id="云平台稳定性"><a href="#云平台稳定性" class="headerlink" title="云平台稳定性"></a>云平台稳定性</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101639903.png" alt="image-20230810163953818"></p><h3 id="云平台的抗攻击能力"><a href="#云平台的抗攻击能力" class="headerlink" title="云平台的抗攻击能力"></a>云平台的抗攻击能力</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101640675.png" alt="image-20230810164022605"></p><h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><h3 id="云计算平台面临的主要安全威胁是什么？"><a href="#云计算平台面临的主要安全威胁是什么？" class="headerlink" title="云计算平台面临的主要安全威胁是什么？"></a>云计算平台面临的主要安全威胁是什么？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="云计算安全技术的发展"><a href="#云计算安全技术的发展" class="headerlink" title="云计算安全技术的发展"></a>云计算安全技术的发展</h1><h2 id="云安全架构体系概述"><a href="#云安全架构体系概述" class="headerlink" title="云安全架构体系概述"></a>云安全架构体系概述</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101644717.png" alt="image-20230810164435650"></p><h2 id="云服务域安全"><a href="#云服务域安全" class="headerlink" title="云服务域安全"></a>云服务域安全</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101644791.png" alt="image-20230810164454723"></p><h3 id="IaaS安全-虚假机防护机制"><a href="#IaaS安全-虚假机防护机制" class="headerlink" title="IaaS安全 - 虚假机防护机制"></a>IaaS安全 - 虚假机防护机制</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101645637.png" alt="image-20230810164546552"></p><h3 id="NaaS安全-统一接入机制"><a href="#NaaS安全-统一接入机制" class="headerlink" title="NaaS安全 - 统一接入机制"></a>NaaS安全 - 统一接入机制</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101646662.png" alt="image-20230810164658567"></p><h3 id="PaaS安全-虚拟机防护机制"><a href="#PaaS安全-虚拟机防护机制" class="headerlink" title="PaaS安全 - 虚拟机防护机制"></a>PaaS安全 - 虚拟机防护机制</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101647612.png" alt="image-20230810164755538"></p><h3 id="SaaS安全-虚拟机防护机制"><a href="#SaaS安全-虚拟机防护机制" class="headerlink" title="SaaS安全 - 虚拟机防护机制"></a>SaaS安全 - 虚拟机防护机制</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101648605.png" alt="image-20230810164838531"></p><h2 id="云用户域安全"><a href="#云用户域安全" class="headerlink" title="云用户域安全"></a>云用户域安全</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101648726.png" alt="image-20230810164850657"></p><h2 id="云监管域安全"><a href="#云监管域安全" class="headerlink" title="云监管域安全"></a>云监管域安全</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101649882.png" alt="image-20230810164910782"></p><h2 id="云计算安全技术发展展望"><a href="#云计算安全技术发展展望" class="headerlink" title="云计算安全技术发展展望"></a>云计算安全技术发展展望</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101649798.png" alt="image-20230810164925728"></p><hr><h1 id="云计算安全防护的关键点"><a href="#云计算安全防护的关键点" class="headerlink" title="云计算安全防护的关键点"></a>云计算安全防护的关键点</h1><h2 id="云计算安全防护建设原则"><a href="#云计算安全防护建设原则" class="headerlink" title="云计算安全防护建设原则"></a>云计算安全防护建设原则</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101651862.png" alt="image-20230810165145786"></p><h2 id="云计算安全架构"><a href="#云计算安全架构" class="headerlink" title="云计算安全架构"></a>云计算安全架构</h2><h3 id="云计算安全总体架构"><a href="#云计算安全总体架构" class="headerlink" title="云计算安全总体架构"></a>云计算安全总体架构</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101652756.png" alt="image-20230810165202663"></p><h3 id="云计算安全标准及政策法规"><a href="#云计算安全标准及政策法规" class="headerlink" title="云计算安全标准及政策法规"></a>云计算安全标准及政策法规</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101653000.png" alt="image-20230810165315930"></p><h3 id="云计算安全技术"><a href="#云计算安全技术" class="headerlink" title="云计算安全技术"></a>云计算安全技术</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101654789.png" alt="image-20230810165400694"></p><h3 id="云计算安全管理"><a href="#云计算安全管理" class="headerlink" title="云计算安全管理"></a>云计算安全管理</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101654885.png" alt="image-20230810165450816"></p><h2 id="云计算安全部署"><a href="#云计算安全部署" class="headerlink" title="云计算安全部署"></a>云计算安全部署</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101655825.png" alt="image-20230810165511735"></p><h3 id="角色管理部署"><a href="#角色管理部署" class="headerlink" title="角色管理部署"></a>角色管理部署</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101655613.png" alt="image-20230810165538550"></p><h3 id="安全防护部署"><a href="#安全防护部署" class="headerlink" title="安全防护部署"></a>安全防护部署</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101656872.png" alt="image-20230810165600791"></p><h2 id="云计算安全防护的关键点总结"><a href="#云计算安全防护的关键点总结" class="headerlink" title="云计算安全防护的关键点总结"></a>云计算安全防护的关键点总结</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101656948.png" alt="image-20230810165620872"></p><h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h2><h3 id="云安全防护系统应该从哪些方面进行设计？"><a href="#云安全防护系统应该从哪些方面进行设计？" class="headerlink" title="云安全防护系统应该从哪些方面进行设计？"></a>云安全防护系统应该从哪些方面进行设计？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="阿里云安全体系介绍"><a href="#阿里云安全体系介绍" class="headerlink" title="阿里云安全体系介绍"></a>阿里云安全体系介绍</h1><h2 id="阿里云安全责任"><a href="#阿里云安全责任" class="headerlink" title="阿里云安全责任"></a>阿里云安全责任</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101658500.png" alt="image-20230810165848440"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101659162.png" alt="image-20230810165906102"></p><p><strong>阿里云保障云平台自身安全</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101700207.png" alt="image-20230810170003130"></p><p><strong>为客户提供保护云端信息系统的技术手段</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101701763.png" alt="image-20230810170108689"></p><p><strong>客户安全责任</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101701033.png" alt="image-20230810170146942"></p><h2 id="阿里云安全合规"><a href="#阿里云安全合规" class="headerlink" title="阿里云安全合规"></a>阿里云安全合规</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101702400.png" alt="image-20230810170208298"></p><h2 id="阿里云安全架构"><a href="#阿里云安全架构" class="headerlink" title="阿里云安全架构"></a>阿里云安全架构</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101702988.png" alt="image-20230810170221906"></p><h3 id="云平台安全"><a href="#云平台安全" class="headerlink" title="云平台安全"></a>云平台安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101702977.png" alt="image-20230810170249894"></p><h3 id="用户基础安全"><a href="#用户基础安全" class="headerlink" title="用户基础安全"></a>用户基础安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101703389.png"></p><h3 id="用户数据安全"><a href="#用户数据安全" class="headerlink" title="用户数据安全"></a>用户数据安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101703504.png" alt="image-20230810170355408"></p><h3 id="用户应用安全"><a href="#用户应用安全" class="headerlink" title="用户应用安全"></a>用户应用安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101704734.png" alt="image-20230810170416637"></p><h3 id="用户业务安全"><a href="#用户业务安全" class="headerlink" title="用户业务安全"></a>用户业务安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101704250.png" alt="image-20230810170452159"></p><h3 id="用户账户安全"><a href="#用户账户安全" class="headerlink" title="用户账户安全"></a>用户账户安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101705801.png" alt="image-20230810170519717"></p><h3 id="用户安全监控和运营"><a href="#用户安全监控和运营" class="headerlink" title="用户安全监控和运营"></a>用户安全监控和运营</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101705624.png" alt="image-20230810170552522"></p><h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><h3 id="安全责任如何由双方承担？"><a href="#安全责任如何由双方承担？" class="headerlink" title="安全责任如何由双方承担？"></a>安全责任如何由双方承担？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="阿里云安全中心如何实现用户安全？"><a href="#阿里云安全中心如何实现用户安全？" class="headerlink" title="阿里云安全中心如何实现用户安全？"></a>阿里云安全中心如何实现用户安全？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="阿里云云安全中心介绍"><a href="#阿里云云安全中心介绍" class="headerlink" title="阿里云云安全中心介绍"></a>阿里云云安全中心介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101801545.png" alt="image-20230810180147487"></p><h2 id="什么是云安全中心"><a href="#什么是云安全中心" class="headerlink" title="什么是云安全中心"></a>什么是云安全中心</h2><h3 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102103699.png" alt="image-20230810210156584"></p><h3 id="云安全中心"><a href="#云安全中心" class="headerlink" title="云安全中心"></a>云安全中心</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102103478.png" alt="image-20230810210233752"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102103766.png" alt="image-20230810210343451"></p><h2 id="功能特性与优势"><a href="#功能特性与优势" class="headerlink" title="功能特性与优势"></a>功能特性与优势</h2><h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102104861.png" alt="image-20230810210420745"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102104564.png" alt="image-20230810210447364"></p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102105926.png" alt="image-20230810210514796"></p><h2 id="场景应用"><a href="#场景应用" class="headerlink" title="场景应用"></a>场景应用</h2><h3 id="等保合规场景"><a href="#等保合规场景" class="headerlink" title="等保合规场景"></a>等保合规场景</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102105049.png" alt="image-20230810210546743"></p><h3 id="混合云主机安全场景"><a href="#混合云主机安全场景" class="headerlink" title="混合云主机安全场景"></a>混合云主机安全场景</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102106718.png" alt="image-20230810210606536"></p><h3 id="容器安全场景"><a href="#容器安全场景" class="headerlink" title="容器安全场景"></a>容器安全场景</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102107954.png" alt="image-20230810210703736"></p><h2 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h2><h3 id="什么是云安全中心？"><a href="#什么是云安全中心？" class="headerlink" title="什么是云安全中心？"></a>什么是云安全中心？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="云安全中心有哪些应用场景？"><a href="#云安全中心有哪些应用场景？" class="headerlink" title="云安全中心有哪些应用场景？"></a>云安全中心有哪些应用场景？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="阿里云云安全产品与服务"><a href="#阿里云云安全产品与服务" class="headerlink" title="阿里云云安全产品与服务"></a>阿里云云安全产品与服务</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102108751.png" alt="image-20230810210810649"></p><h2 id="DDoS防护"><a href="#DDoS防护" class="headerlink" title="DDoS防护"></a>DDoS防护</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102111586.png" alt="image-20230810211121348"></p><h3 id="DDoS攻击原理"><a href="#DDoS攻击原理" class="headerlink" title="DDoS攻击原理"></a>DDoS攻击原理</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102111760.png"></p><h3 id="部署商用版DDoS防御方案"><a href="#部署商用版DDoS防御方案" class="headerlink" title="部署商用版DDoS防御方案"></a>部署商用版DDoS防御方案</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102112929.png" alt="image-20230810211200755"></p><h2 id="Web应用防火墙"><a href="#Web应用防火墙" class="headerlink" title="Web应用防火墙"></a>Web应用防火墙</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102113919.png" alt="image-20230810211312716"></p><h2 id="云防火墙"><a href="#云防火墙" class="headerlink" title="云防火墙"></a>云防火墙</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102140876.png" alt="image-20230810214002696"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102140298.png" alt="image-20230810214030095"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102140214.png" alt="image-20230810214041110"></p><h2 id="云安全中心（态势感知）"><a href="#云安全中心（态势感知）" class="headerlink" title="云安全中心（态势感知）"></a>云安全中心（态势感知）</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102140013.png" alt="image-20230810214050884"></p><h2 id="运维安全中心（堡垒机）"><a href="#运维安全中心（堡垒机）" class="headerlink" title="运维安全中心（堡垒机）"></a>运维安全中心（堡垒机）</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102141276.png" alt="image-20230810214105146"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102141510.png" alt="image-20230810214123394"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102146775.png" alt="image-20230810214651584"></p><h2 id="办公安全平台（SASE）"><a href="#办公安全平台（SASE）" class="headerlink" title="办公安全平台（SASE）"></a>办公安全平台（SASE）</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102147700.png" alt="image-20230810214736503"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102147324.png" alt="image-20230810214751192"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102148212.png" alt="image-20230810214818067"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102148722.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102148591.png" alt="image-20230810214848516"></p><h2 id="思考-5"><a href="#思考-5" class="headerlink" title="思考"></a>思考</h2><h3 id="如何应用云安全产品与服务？"><a href="#如何应用云安全产品与服务？" class="headerlink" title="如何应用云安全产品与服务？"></a>如何应用云安全产品与服务？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="如何搭建阿里云办公安全实战场景？"><a href="#如何搭建阿里云办公安全实战场景？" class="headerlink" title="如何搭建阿里云办公安全实战场景？"></a>如何搭建阿里云办公安全实战场景？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="云安全监控概述"><a href="#云安全监控概述" class="headerlink" title="云安全监控概述"></a>云安全监控概述</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102150399.png" alt="image-20230810215024297"></p><h2 id="监控系统概述"><a href="#监控系统概述" class="headerlink" title="监控系统概述"></a>监控系统概述</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102151471.png" alt="image-20230810215155324"></p><h2 id="监控的核心目标"><a href="#监控的核心目标" class="headerlink" title="监控的核心目标"></a>监控的核心目标</h2><h3 id="监控的核心"><a href="#监控的核心" class="headerlink" title="监控的核心"></a>监控的核心</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102152483.png" alt="image-20230810215259381"></p><h3 id="监控的目标"><a href="#监控的目标" class="headerlink" title="监控的目标"></a>监控的目标</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102153394.png" alt="image-20230810215338193"></p><h2 id="监控的方法"><a href="#监控的方法" class="headerlink" title="监控的方法"></a>监控的方法</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102153510.png" alt="image-20230810215355360"></p><h2 id="思考-6"><a href="#思考-6" class="headerlink" title="思考"></a>思考</h2><h3 id="云端监控的核心目标是什么？"><a href="#云端监控的核心目标是什么？" class="headerlink" title="云端监控的核心目标是什么？"></a>云端监控的核心目标是什么？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="常见的监控工具介绍"><a href="#常见的监控工具介绍" class="headerlink" title="常见的监控工具介绍"></a>常见的监控工具介绍</h1><h2 id="开源监控工具介绍"><a href="#开源监控工具介绍" class="headerlink" title="开源监控工具介绍"></a>开源监控工具介绍</h2><h3 id="Cacti"><a href="#Cacti" class="headerlink" title="Cacti"></a>Cacti</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102156111.png" alt="image-20230810215654953"></p><h3 id="Nagios"><a href="#Nagios" class="headerlink" title="Nagios"></a>Nagios</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102157537.png" alt="image-20230810215757320"></p><h3 id="Zabbix"><a href="#Zabbix" class="headerlink" title="Zabbix"></a>Zabbix</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102158416.png" alt="image-20230810215843314"></p><h3 id="Open-Falcon"><a href="#Open-Falcon" class="headerlink" title="Open-Falcon"></a>Open-Falcon</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102203722.png" alt="image-20230810220329507"></p><h3 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102204200.png" alt="image-20230810220407989"></p><h2 id="商用监控系统介绍"><a href="#商用监控系统介绍" class="headerlink" title="商用监控系统介绍"></a>商用监控系统介绍</h2><h3 id="监控室"><a href="#监控室" class="headerlink" title="监控室"></a>监控室</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102204572.png" alt="image-20230810220433379"></p><h3 id="阿里云监控"><a href="#阿里云监控" class="headerlink" title="阿里云监控"></a>阿里云监控</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102205338.png" alt="image-20230810220519191"></p><h2 id="思考-7"><a href="#思考-7" class="headerlink" title="思考"></a>思考</h2><h3 id="开源监控工具与商业化监控产品有什么区别？"><a href="#开源监控工具与商业化监控产品有什么区别？" class="headerlink" title="开源监控工具与商业化监控产品有什么区别？"></a>开源监控工具与商业化监控产品有什么区别？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="阿里云云监控服务"><a href="#阿里云云监控服务" class="headerlink" title="阿里云云监控服务"></a>阿里云云监控服务</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102206717.png" alt="image-20230810220620554"></p><h2 id="阿里云云监控生态"><a href="#阿里云云监控生态" class="headerlink" title="阿里云云监控生态"></a>阿里云云监控生态</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102207769.png" alt="image-20230810220737590"></p><h3 id="阿里云云监控-产品功能"><a href="#阿里云云监控-产品功能" class="headerlink" title="阿里云云监控 - 产品功能"></a>阿里云云监控 - 产品功能</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102208990.png" alt="image-20230810220836795"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102208372.png" alt="image-20230810220858133"></p><h3 id="应用实时监控服务ARMS"><a href="#应用实时监控服务ARMS" class="headerlink" title="应用实时监控服务ARMS"></a>应用实时监控服务ARMS</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102209029.png" alt="image-20230810220938877"></p><h4 id="产品架构"><a href="#产品架构" class="headerlink" title="产品架构"></a>产品架构</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102210656.png" alt="image-20230810221031434"></p><h2 id="阿里云日志服务接入及告警试验"><a href="#阿里云日志服务接入及告警试验" class="headerlink" title="阿里云日志服务接入及告警试验"></a>阿里云日志服务接入及告警试验</h2><h3 id="日志监控服务SLS"><a href="#日志监控服务SLS" class="headerlink" title="日志监控服务SLS"></a>日志监控服务SLS</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102211343.png" alt="image-20230810221101115"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308102211082.png" alt="image-20230810221112923"></p><h2 id="思考-8"><a href="#思考-8" class="headerlink" title="思考"></a>思考</h2><h3 id="阿里云云监控生态架构。"><a href="#阿里云云监控生态架构。" class="headerlink" title="阿里云云监控生态架构。"></a>阿里云云监控生态架构。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="阿里云云监控的告警配置。"><a href="#阿里云云监控的告警配置。" class="headerlink" title="阿里云云监控的告警配置。"></a>阿里云云监控的告警配置。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-云网络</title>
    <link href="/2023/08/05/ACA-%E4%BA%91%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/08/05/ACA-%E4%BA%91%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="云网络概述"><a href="#云网络概述" class="headerlink" title="云网络概述"></a>云网络概述</h1><h2 id="阿里云网络概述"><a href="#阿里云网络概述" class="headerlink" title="阿里云网络概述"></a>阿里云网络概述</h2><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101522004.png" alt="image-20230810152245954" style="zoom:150%;" /><h2 id="阿里云上网络基础"><a href="#阿里云上网络基础" class="headerlink" title="阿里云上网络基础"></a>阿里云上网络基础</h2><h3 id="阿里云网络概述-1"><a href="#阿里云网络概述-1" class="headerlink" title="阿里云网络概述"></a>阿里云网络概述</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101526070.png" alt="image-20230810152606002"></p><h3 id="专于网络逻辑架构"><a href="#专于网络逻辑架构" class="headerlink" title="专于网络逻辑架构"></a><strong>专于网络逻辑架构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101527905.png" alt="image-20230810152701804"></p><p><strong>相关概念3</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101527637.png" alt="image-20230810152754494"></p><h2 id="阿里云网络连接分类"><a href="#阿里云网络连接分类" class="headerlink" title="阿里云网络连接分类##"></a>阿里云网络连接分类##</h2><p>在企业业务上云后，除了定义云上网络之外，阿里云网络连接一般分为三种连接：</p><h3 id="1-公网访问"><a href="#1-公网访问" class="headerlink" title="1.公网访问"></a>1.公网访问</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101530334.png" alt="image-20230810153042302"></p><h3 id="2-跨地域互连"><a href="#2-跨地域互连" class="headerlink" title="2.跨地域互连"></a>2.跨地域互连</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101531695.png" alt="image-20230810153123640"></p><h3 id="3-混合云网络"><a href="#3-混合云网络" class="headerlink" title="3.混合云网络"></a>3.混合云网络</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101532392.png" alt="image-20230810153203329"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="阿里云网络整体架构是什么样的？"><a href="#阿里云网络整体架构是什么样的？" class="headerlink" title="阿里云网络整体架构是什么样的？"></a>阿里云网络整体架构是什么样的？</h3><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="基于阿里云搭建云上专有网络"><a href="#基于阿里云搭建云上专有网络" class="headerlink" title="基于阿里云搭建云上专有网络"></a>基于阿里云搭建云上专有网络</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101534192.png" alt="image-20230810153404139"></p><h2 id="专有网络VPC的组成"><a href="#专有网络VPC的组成" class="headerlink" title="专有网络VPC的组成"></a>专有网络VPC的组成</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101535816.png" alt="image-20230810153557741"></p><h2 id="专有网络VPC的网络规划"><a href="#专有网络VPC的网络规划" class="headerlink" title="专有网络VPC的网络规划"></a>专有网络VPC的网络规划</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101536240.png" alt="image-20230810153619171"></p><h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><h3 id="思考专有网络VPC之间可以直接互通吗？"><a href="#思考专有网络VPC之间可以直接互通吗？" class="headerlink" title="思考专有网络VPC之间可以直接互通吗？"></a>思考专有网络VPC之间可以直接互通吗？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="在专有网络VPC下如何创建多个交换机？"><a href="#在专有网络VPC下如何创建多个交换机？" class="headerlink" title="在专有网络VPC下如何创建多个交换机？"></a>在专有网络VPC下如何创建多个交换机？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="负载均衡概述"><a href="#负载均衡概述" class="headerlink" title="负载均衡概述"></a>负载均衡概述</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101538047.png" alt="image-20230810153844012"></p><h2 id="负载均衡简介"><a href="#负载均衡简介" class="headerlink" title="负载均衡简介"></a>负载均衡简介</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101540707.png" alt="image-20230810154024657"></p><h2 id="负载均衡的分类"><a href="#负载均衡的分类" class="headerlink" title="负载均衡的分类"></a>负载均衡的分类</h2><h3 id="硬件负载均衡"><a href="#硬件负载均衡" class="headerlink" title="硬件负载均衡"></a>硬件负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101542890.png" alt="image-20230810154228822"></p><h3 id="软件负载均衡"><a href="#软件负载均衡" class="headerlink" title="软件负载均衡"></a>软件负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101543033.png" alt="image-20230810154302964"></p><h2 id="负载均衡通信分类"><a href="#负载均衡通信分类" class="headerlink" title="负载均衡通信分类"></a><strong>负载均衡通信分类</strong></h2><h3 id="七层负载均衡"><a href="#七层负载均衡" class="headerlink" title="七层负载均衡"></a><strong>七层负载均衡</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101545761.png" alt="image-20230810154510036"></p><h3 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101546434.png" alt="image-20230810154613407"></p><h2 id="主流负载均衡软件的使用"><a href="#主流负载均衡软件的使用" class="headerlink" title="主流负载均衡软件的使用"></a>主流负载均衡软件的使用</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101546938.png" alt="image-20230810154645870"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101547830.png" alt="image-20230810154747781"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101548809.png" alt="image-20230810154810757"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101548308.png" alt="image-20230810154836257"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101548676.png" alt="image-20230810154857614"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101549897.png" alt="image-20230810154923843"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101549413.png" alt="image-20230810154944372"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101550568.png" alt="image-20230810155029509"></p><h3 id="HAProxy"><a href="#HAProxy" class="headerlink" title="HAProxy"></a>HAProxy</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101550870.png" alt="image-20230810155046837"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101550828.png" alt="image-20230810155057804"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101551521.png" alt="image-20230810155124467"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101551339.png" alt="image-20230810155143304"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101551921.png" alt="image-20230810155150881"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101552602.png" alt="image-20230810155215572"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101552015.png" alt="image-20230810155251974"></p><h3 id="Lvs"><a href="#Lvs" class="headerlink" title="Lvs"></a>Lvs</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101553708.png" alt="image-20230810155314672"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101553544.png" alt="image-20230810155305517"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101553781.png" alt="image-20230810155352729"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101554160.png" alt="image-20230810155409124"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101554309.png" alt="image-20230810155417276"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101554170.png" alt="image-20230810155444105"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101555029.png" alt="image-20230810155500972"></p><h2 id="阿里云负载均衡应用"><a href="#阿里云负载均衡应用" class="headerlink" title="阿里云负载均衡应用"></a>阿里云负载均衡应用</h2><h3 id="产品介绍-–-ALB-、NLB-、CLB"><a href="#产品介绍-–-ALB-、NLB-、CLB" class="headerlink" title="产品介绍 – ALB 、NLB 、CLB"></a>产品介绍 – ALB 、NLB 、CLB</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101557049.png" alt="image-20230810155745996"></p><h3 id="传统型负载均衡CLB"><a href="#传统型负载均衡CLB" class="headerlink" title="传统型负载均衡CLB"></a>传统型负载均衡CLB</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101559178.png" alt="image-20230810155907119"></p><h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h2><h3 id="思考主流软件负载均衡的应用场景。"><a href="#思考主流软件负载均衡的应用场景。" class="headerlink" title="思考主流软件负载均衡的应用场景。"></a>思考主流软件负载均衡的应用场景。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="如何搭建安装nginx作为负载均衡？"><a href="#如何搭建安装nginx作为负载均衡？" class="headerlink" title="如何搭建安装nginx作为负载均衡？"></a>如何搭建安装nginx作为负载均衡？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="CDN内容分发网络"><a href="#CDN内容分发网络" class="headerlink" title="CDN内容分发网络"></a>CDN内容分发网络</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101600907.png" alt="image-20230810160048862"></p><h2 id="阿里云CDN基本概念"><a href="#阿里云CDN基本概念" class="headerlink" title="阿里云CDN基本概念"></a>阿里云CDN基本概念</h2><h3 id="什么是阿里云CDN"><a href="#什么是阿里云CDN" class="headerlink" title="什么是阿里云CDN"></a>什么是阿里云CDN</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101603362.png" alt="image-20230810160311314"></p><h3 id="源站"><a href="#源站" class="headerlink" title="源站"></a>源站</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101604657.png" alt="image-20230810160404616"></p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101604855.png" alt="image-20230810160412831"></p><h3 id="加速域名"><a href="#加速域名" class="headerlink" title="加速域名"></a>加速域名</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101604870.png" alt="image-20230810160419836"></p><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101604288.png" alt="image-20230810160429254"></p><h2 id="阿里云CDN产品架构"><a href="#阿里云CDN产品架构" class="headerlink" title="阿里云CDN产品架构"></a>阿里云CDN产品架构</h2><p>阿里云CDN产品架构，由<strong>调度系统</strong>、<strong>链路质量系统</strong>、<strong>缓存系统</strong>和<strong>支撑系统</strong>这四大系统组成。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101606878.png" alt="image-20230810160633824"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101606377.png" alt="image-20230810160653311"></p><h2 id="阿里云CDN应用场景"><a href="#阿里云CDN应用场景" class="headerlink" title="阿里云CDN应用场景"></a>阿里云CDN应用场景</h2><h3 id="图片小文件"><a href="#图片小文件" class="headerlink" title="图片小文件"></a>图片小文件</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101608533.png" alt="image-20230810160830486"></p><h3 id="大文件下载"><a href="#大文件下载" class="headerlink" title="大文件下载"></a>大文件下载</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101608599.png" alt="image-20230810160845554"></p><h3 id="视音频点播"><a href="#视音频点播" class="headerlink" title="视音频点播"></a>视音频点播</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101609333.png" alt="image-20230810160901296"></p><h2 id="阿里云CDN竞争优势"><a href="#阿里云CDN竞争优势" class="headerlink" title="阿里云CDN竞争优势"></a>阿里云CDN竞争优势</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101609369.png" alt="image-20230810160918305"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101609707.png" alt="image-20230810160943650"></p><h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><h3 id="如何操作阿里云CDN？"><a href="#如何操作阿里云CDN？" class="headerlink" title="如何操作阿里云CDN？"></a>如何操作阿里云CDN？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="阿里云CDN在功能上有那些限制？"><a href="#阿里云CDN在功能上有那些限制？" class="headerlink" title="阿里云CDN在功能上有那些限制？"></a>阿里云CDN在功能上有那些限制？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="CDN内容分发网络案例解析"><a href="#CDN内容分发网络案例解析" class="headerlink" title="CDN内容分发网络案例解析"></a>CDN内容分发网络案例解析</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101612982.png" alt="image-20230810161214932"></p><h2 id="CDN内容分发网络案例背景目标"><a href="#CDN内容分发网络案例背景目标" class="headerlink" title="CDN内容分发网络案例背景目标"></a>CDN内容分发网络案例背景目标</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101614210.png" alt="image-20230810161417163"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101614021.png" alt="image-20230810161433981"></p><p><strong>数据迁移目标</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101614694.png" alt="image-20230810161455639"></p><h2 id="CDN内容分发网络案例架构改造设计"><a href="#CDN内容分发网络案例架构改造设计" class="headerlink" title="CDN内容分发网络案例架构改造设计"></a>CDN内容分发网络案例架构改造设计</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101615718.png" alt="image-20230810161524658"></p><h2 id="CDN内容分发网络案例架构特点"><a href="#CDN内容分发网络案例架构特点" class="headerlink" title="CDN内容分发网络案例架构特点"></a>CDN内容分发网络案例架构特点</h2><p><strong>改造后的CDN建构能力</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101616770.png" alt="image-20230810161610710"></p><p><strong>阿里云CDN产品机构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308101616031.png" alt="image-20230810161648983"></p><h2 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h2><h3 id="如何配置阿里云CDN？"><a href="#如何配置阿里云CDN？" class="headerlink" title="如何配置阿里云CDN？"></a>如何配置阿里云CDN？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-云数据库</title>
    <link href="/2023/08/05/ACA-%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2023/08/05/ACA-%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="云数据库概述"><a href="#云数据库概述" class="headerlink" title="云数据库概述"></a>云数据库概述</h1><p>​    <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091659547.png" alt="image-20230809165931515" style="zoom: 200%;" /></p><h1 id="云数据库优势"><a href="#云数据库优势" class="headerlink" title="云数据库优势"></a>云数据库优势</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091700253.png" alt="image-20230809170012191"></p><h1 id="阿里云云数据库产品介绍"><a href="#阿里云云数据库产品介绍" class="headerlink" title="阿里云云数据库产品介绍"></a>阿里云云数据库产品介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091700749.png" alt="image-20230809170043696"></p><h2 id="RDS产品系列"><a href="#RDS产品系列" class="headerlink" title="RDS产品系列"></a>RDS产品系列</h2><h3 id="RDS产品系列及基础架构"><a href="#RDS产品系列及基础架构" class="headerlink" title="RDS产品系列及基础架构"></a>RDS产品系列及基础架构</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091701989.png" alt="image-20230809170121939"></p><h3 id="RDS实例规格族"><a href="#RDS实例规格族" class="headerlink" title="RDS实例规格族"></a>RDS实例规格族</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091702442.png" alt="image-20230809170208389"></p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091702581.png" alt="image-20230809170245533"></p><h2 id="云原生关系型数据库PolarDB"><a href="#云原生关系型数据库PolarDB" class="headerlink" title="云原生关系型数据库PolarDB"></a>云原生关系型数据库PolarDB</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091703118.png" alt="image-20230809170335067"></p><h2 id="阿里云非关系型数据库"><a href="#阿里云非关系型数据库" class="headerlink" title="阿里云非关系型数据库"></a>阿里云非关系型数据库</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091704781.png" alt="image-20230809170425725"></p><h1 id="其他云数据库产品介绍"><a href="#其他云数据库产品介绍" class="headerlink" title="其他云数据库产品介绍"></a>其他云数据库产品介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091705901.png" alt="image-20230809170557850"></p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><h3 id="思考云数据库与传统数据库对比的优势在哪里？"><a href="#思考云数据库与传统数据库对比的优势在哪里？" class="headerlink" title="思考云数据库与传统数据库对比的优势在哪里？"></a>思考云数据库与传统数据库对比的优势在哪里？</h3><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-存储服务</title>
    <link href="/2023/08/05/ACA-%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/08/05/ACA-%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="云存储概述"><a href="#云存储概述" class="headerlink" title="云存储概述"></a>云存储概述</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091648618.png" alt="image-20230809164825574"></p><p><strong>阿里云存储概述</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091649334.png" alt="image-20230809164900279"></p><h1 id="阿里云块存储产品介绍"><a href="#阿里云块存储产品介绍" class="headerlink" title="阿里云块存储产品介绍"></a>阿里云块存储产品介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091649760.png" alt="image-20230809164918706"></p><h2 id="块存储优势"><a href="#块存储优势" class="headerlink" title="块存储优势"></a>块存储优势</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091649143.png" alt="image-20230809164944095"></p><h2 id="块存储产品对比"><a href="#块存储产品对比" class="headerlink" title="块存储产品对比"></a>块存储产品对比</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091650883.png" alt="image-20230809165036819"></p><h1 id="阿里云文件存储介绍"><a href="#阿里云文件存储介绍" class="headerlink" title="阿里云文件存储介绍"></a>阿里云文件存储介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091651392.png" alt="image-20230809165106326"></p><h1 id="阿里云对象存储介绍"><a href="#阿里云对象存储介绍" class="headerlink" title="阿里云对象存储介绍"></a>阿里云对象存储介绍</h1><h2 id="对象存储OSS基本概念"><a href="#对象存储OSS基本概念" class="headerlink" title="对象存储OSS基本概念"></a>对象存储OSS基本概念</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091651045.png" alt="image-20230809165125985"></p><h2 id="对象存储数据储存结构"><a href="#对象存储数据储存结构" class="headerlink" title="对象存储数据储存结构"></a>对象存储数据储存结构</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091651409.png" alt="image-20230809165148362"></p><h2 id="对象存储OSS优势"><a href="#对象存储OSS优势" class="headerlink" title="对象存储OSS优势"></a>对象存储OSS优势</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091652520.png" alt="image-20230809165253460"></p><h2 id="对象存储OSS存储类型"><a href="#对象存储OSS存储类型" class="headerlink" title="对象存储OSS存储类型"></a>对象存储OSS存储类型</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091655570.png" alt="image-20230809165536508"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="阿里云存储下常见存储产品都有哪些？"><a href="#阿里云存储下常见存储产品都有哪些？" class="headerlink" title="阿里云存储下常见存储产品都有哪些？"></a>阿里云存储下常见存储产品都有哪些？</h3><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-容器服务</title>
    <link href="/2023/08/05/ACA-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/08/05/ACA-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="容器的概念"><a href="#容器的概念" class="headerlink" title="容器的概念"></a>容器的概念</h1><p>容器技术:有效的将单个<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192?fromModule=lemma_inlink">操作系统</a>的资源划分到孤立的组中，以便更好的在孤立的组之间平衡有冲突的资源使用需求，这种技术就是容器技术。</p><h2 id="容器诞生的背景"><a href="#容器诞生的背景" class="headerlink" title="容器诞生的背景"></a>容器诞生的背景</h2><p>电子计算机刚出现时硬件配置成本较高，大家尝试寻找多租户共享云计算服务器的方法去利用资源，控制成本。20世纪90年代中后期,X86系统架构的硬件虚拟化技术获得了进一步发展，可以在同一系统中分离出来多个操作系统实例，因而具备很多优秀特点，现在大部分数据中心使用了硬件虚拟化技术。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191710980.png"></p><p>尽管硬件虚拟化带来了防护网络资源功能的便利，但使用虚拟机隔离应用程序通常会减少高效率。必须要在部署应用程序以前在每一个虚拟机中下载或拷贝操作系统实例。因而，为了方便面对应用的管理，更加需要较轻量的计划方案——操作系统虚拟化。<strong>操作系统虚拟化</strong>指的是<strong>在操作系统中创建虚拟的环境，便于应用程序感知不到其他应用</strong>。如同独立占有全部服务器资源一样，能够实现应用分离出来。这种方法不用虚拟机，且应用程序共享同一操作系统实例，因而比虚拟机更节约资源。<strong>操作系统虚拟化</strong>在很多场合中被称为<strong>容器</strong>。</p><p>操作系统虚拟化技术初次出现于2000年，FreeBSD 4.0发布Jail。Jail提高并优化了用于系统文件隔离的chroot环境。2004年，Sun发布Solaris 10容器，包括Zones和Resource management两部分。Zones实现了名称空间隔离与安全密钥管理，Resource management实现了资源管理配置。2007年，Control Groups进到Linux内核，限制和隔离进程组应用资源（CPU、运行内存、I/O、网络等）。</p><p>2013年，Docker上线了Docker开源新项目，带来了应用容器简单的工具链。不夸张的说，Docker点燃了容器技术的火苗，拉开了云原生应用发展的序幕。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191719604.png"></p><h2 id="容器发展的历史"><a href="#容器发展的历史" class="headerlink" title="容器发展的历史"></a>容器发展的历史</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091114317.png"></p><h2 id="容器的概念-1"><a href="#容器的概念-1" class="headerlink" title="容器的概念"></a>容器的概念</h2><p>容器是视图隔离、资源限制和单独系统文件进程的结合。隔离视图表示拥有独立的主机名以及能看到部分进程；资源限制对CPU的使用个数以及内存的大小进行限制。容器就是一个进程集合，它将系统的其他资源隔离开来，且具有自己独立的资源视图。</p><h3 id="容器的核心组成"><a href="#容器的核心组成" class="headerlink" title="容器的核心组成"></a>容器的核心组成</h3><p>容器的核心技术主要包括：<strong>Namespace</strong>、<strong>Cgroup</strong>、<strong>rootfs</strong>、<strong>容器引擎</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091118017.png"></p><h2 id="容器解决了什么问题"><a href="#容器解决了什么问题" class="headerlink" title="容器解决了什么问题"></a>容器解决了什么问题</h2><p>容器技术的出现消除了传统的软件部署当中<strong>环境一致性</strong>、<strong>项目打包</strong>、<strong>项目部署</strong>等问题。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091121982.png"></p><h3 id="环境一致性问题"><a href="#环境一致性问题" class="headerlink" title="环境一致性问题"></a>环境一致性问题</h3><p>开发工作人员通常在Mac、Windows系统上开发项，功能上线合并代码到版本仓库，由测试部门进行测试，测试后通过之后由运维团队发布到生产环境中。现阶段，大部分互联网企业都是在实行这种步骤。问题来了，在测适合生产环境中，项目很有可能不能正常工作，为何？因为电脑操作系统、软件版本、依赖程序包、忘掉修改配置等，项目很有可能！</p><p><strong>解决方案：</strong></p><p>容器清除线上环境差别，保证应用软件生命周期环境的一致性和规范化，开发工作人员应用镜像系统搭建规范开发环境，开发结束后执行封装项目和有关环境。测试和运维人员可以用此镜像系统直接从全部节点容器内进行测试和发布，持续交付测试和发布大大简化。</p><h3 id="项目打包问题"><a href="#项目打包问题" class="headerlink" title="项目打包问题"></a>项目打包问题</h3><p>公司有这样一项业务：有一个产品可以整套部署到客户那里，以往都是派一名实施工程师到客户现场部署，花费人工成本高。</p><p><strong>解决方案：</strong></p><p>容器可以将整项目封装打包起来，通过容器编排工作实现一键部署，分分钟搞定，就不需要再派人过去了。</p><h3 id="微服务问题"><a href="#微服务问题" class="headerlink" title="微服务问题"></a>微服务问题</h3><p>微服务架构是现在最流行的业务架构开发方式之一。主要目的是将庞大的业务系统分解成多个微服务。微服务只负责执行特定的功能，例如电商网站为微服务购物车、付款后台管理、客户后台管理、消息等基本功能。每一个微服务都是个拥有自己业务的模型，一些微服务器将API公开给其他微服务器及客户端使用。</p><p><strong>解决方案：</strong></p><p>容器的流行推动了微服务的发展，从SOA架构演变到微服务架构，甚至serverless架构。</p><h2 id="容器典型产品-——-Docker"><a href="#容器典型产品-——-Docker" class="headerlink" title="容器典型产品 —— Docker"></a>容器典型产品 —— Docker</h2><p>容器是一种规范的软件单元，用以打包代码以及所有依赖项，使应用能够快速稳定的从一个计算机环境运送到另一个计算机环境。Docker容器镜像系统是一个轻量、可单独执行的程序包，包括执行应用所需要的全部内容，包含代码、运行时、系统软件、系统库和设置。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="容器和虚拟机有什么区别？"><a href="#容器和虚拟机有什么区别？" class="headerlink" title="容器和虚拟机有什么区别？"></a>容器和虚拟机有什么区别？</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs actionscript">容器和虚拟机在多个方面存在显著差异：<br><span class="hljs-number">1.</span>实现技术：容器的核心是<span class="hljs-keyword">namespace</span>和cgroup（资源限制），而虚拟机的核心是模拟器。<br><span class="hljs-number">2.</span>宿主机要求：容器的宿主机必须要有操作系统，而虚拟机的宿主机可以不需要操作系统。<br><span class="hljs-number">3.</span>隔离性：虚拟机具有更好的隔离性，而容器只能实现进程级隔离。<br><span class="hljs-number">4.</span>资源占用：容器实例小，镜像的创建更加容易，集群规模大；虚拟机创建过程相对复杂，需要创建操作系统和应用，实例大，集群规模小。<br><span class="hljs-number">5.</span>开发与运行：容器使应用和基础设施解耦，开发和运行相分离；虚拟机则支持多段构建，对镜像要求较高，过程耦合度高。<br><span class="hljs-number">6.</span>运行环境：容器在本地或外网运行的一致性较高；虚拟机则可在几乎所有操作系统上运行。<br>总的来说，容器和虚拟机各有优势，选择哪种技术取决于具体需求和环境。如需更多信息，建议请教计算机领域专业人士。<br></code></pre></td></tr></table></figure><hr><h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091528201.png" /><h2 id="Docker的起源"><a href="#Docker的起源" class="headerlink" title="Docker的起源"></a>Docker的起源</h2><p>在Dockor未出现之前，不同的平台架构之间运行一个相同的环境就会出问题。</p><p>比如:</p><p>在Windows Server上搭建了一个服务，放到Linux上未必能正常运行，这取决于它的底层平台、平台架构和软件版本很多因素，业界很难解决软件<strong>迁移性</strong>的问题。</p><p>Docker使用了谷歌公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace以及OverlayFS类的Union FS等技术，对进程进行封装隔离。</p><p>Docker属于<strong>操作系统层面的虚拟化技术</strong>。</p><h2 id="Docker的发展"><a href="#Docker的发展" class="headerlink" title="Docker的发展"></a>Docker的发展</h2><p>Docker自开源后抽到了广泛的关注和讨论，至今其GitHub项目已超过55000多个星标和1万多个fork；</p><p>Docker最初是在Ubuntu 12.04上开发实现的；</p><p>Red Hat则从RHEL 6.5开始对Docker进行支持；</p><p>谷歌Google也在其PaaS产品上广泛应Docker。</p><h2 id="Docker的架构"><a href="#Docker的架构" class="headerlink" title="Docker的架构"></a>Docker的架构</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091536002.png"></p><h2 id="Docker的优势"><a href="#Docker的优势" class="headerlink" title="Docker的优势"></a>Docker的优势</h2><ul><li>更快速的交付和部署</li><li>更高效的虚拟化</li><li>更轻松的迁移和扩展</li><li>更简单的管理</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091537705.png"></p><p>Docker在容器的基础上进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大地简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。</p><p>这个下面的图片比较了Docker和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整的操作系统，在该系统上再运行所需要的应用进程；而容器内的应用进程直接运行与宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p><img src="C:/Users/86187/AppData/Roaming/Typora/typora-user-images/image-20240119175054066.png"></p><h3 id="Docker对比传统虚拟机"><a href="#Docker对比传统虚拟机" class="headerlink" title="Docker对比传统虚拟机"></a>Docker对比传统虚拟机</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091539377.png"></p><h2 id="Docker的基本概念"><a href="#Docker的基本概念" class="headerlink" title="Docker的基本概念"></a>Docker的基本概念</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091540711.png"></p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>Docker镜像（Image）就是一个Linux的文件系统（Root FileSystem），这个文件系统里包含可以运行在Linux内核的程序以及相应的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191753810.png"></p><h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091543173.png"></p><h3 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h3><p>Docker仓库（Repository）是集中存储镜像的地方。公共仓库一般是指Docker Hub，可以从Docker Hub获取镜像，也可以将自己构建的镜像存放到从Docker Hub。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191755840.png"></p><h2 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h2><h3 id="Docker-与-DevOps"><a href="#Docker-与-DevOps" class="headerlink" title="Docker 与 DevOps"></a>Docker 与 DevOps</h3><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091546545.png" /><h3 id="Docker与微服务"><a href="#Docker与微服务" class="headerlink" title="Docker与微服务"></a>Docker与微服务</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091548409.png"></p><h3 id="Docker与负载均衡"><a href="#Docker与负载均衡" class="headerlink" title="Docker与负载均衡"></a>Docker与负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091549176.png"></p><h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><h3 id="Docker相对与传统虚拟机有什么优势？"><a href="#Docker相对与传统虚拟机有什么优势？" class="headerlink" title="Docker相对与传统虚拟机有什么优势？"></a>Docker相对与传统虚拟机有什么优势？</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091537705.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整的操作系统，在该系统上再运行所需要的应用进程；而容器内的应用进程直接运行与宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。<br></code></pre></td></tr></table></figure><h3 id="如何安装Docker容器？"><a href="#如何安装Docker容器？" class="headerlink" title="如何安装Docker容器？"></a>如何安装Docker容器？</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">安装Docker容器的步骤如下：<br><span class="hljs-number">1</span>.确保Linux服务器安装的Centos的系统内核不能低于<span class="hljs-number">3.10</span>，否则安装不成功。可以通过uname -r命令查看系统内核。<br><span class="hljs-number">2</span>.使用root权限登录Centos。<br><span class="hljs-number">3</span>.确保yum包更新到最新。使用命令sudo yum <span class="hljs-keyword">update</span>。<br><span class="hljs-number">4</span>.安装需要的软件包，包括yum-utils、device-mapper-persistent-data和lvm2。使用命令sudo yum install -<span class="hljs-keyword">y</span> yum-utils device-mapper-persistent-datalvm2。<br><span class="hljs-number">5</span>.设置yum源。使用命令sudo yum-config-manager --<span class="hljs-built_in">add</span>-repo https://download.docker.<span class="hljs-keyword">com</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo。<br><span class="hljs-number">6</span>.安装Docker CE。使用命令sudo yum install docker-<span class="hljs-keyword">ce</span>。<br><span class="hljs-number">7</span>.启动Docker进程。使用命令sudo systemctl start docker。<br><span class="hljs-number">8</span>.验证Docker是否安装成功。运行命令sudo docker run hello-world和sudo docker <span class="hljs-keyword">ps</span>。如果一切正常，应该能看到容器的运行状态和相关信息。<br></code></pre></td></tr></table></figure><h3 id="Docker容器的相关命令有哪些？"><a href="#Docker容器的相关命令有哪些？" class="headerlink" title="Docker容器的相关命令有哪些？"></a>Docker容器的相关命令有哪些？</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">创建容器：docker run -d -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> <span class="hljs-comment">--restart=always --privileged=true --name=registry-agan -v/date/volume/registry:/var/lib/registry registry</span><br>查看正在运行的容器：docker ps<br>查看所有的容器：docker ps -<span class="hljs-keyword">a</span><br>停止容器：docker <span class="hljs-built_in">stop</span> 容器ID<br>强制停止容器：docker <span class="hljs-built_in">kill</span> 容器ID<br>启动容器：docker <span class="hljs-built_in">start</span> 容器ID<br>重启容器：docker restart 容器ID<br>删除已经停止的容器：docker rm 容器ID<br>删除正在运行容器：docker rm -f 容器ID<br>查看仓库镜像：docker search 镜像名字<br>拉取镜像：docker pull 镜像名字<br>查看镜像：docker images 镜像名字:版本号(不指定版本号,代表拉取最新版)<br>创建容器：docker <span class="hljs-built_in">create</span> <span class="hljs-comment">--name 容器名字 镜像</span><br>启动容器：docker <span class="hljs-built_in">start</span> 容器名字<br>创建并启动容器：docker run <span class="hljs-comment">--name 容器名字 镜像</span><br>查看所有容器：docker container ls -<span class="hljs-keyword">a</span> docker ps -<span class="hljs-keyword">a</span><br>停止容器：docker <span class="hljs-built_in">stop</span> 容器名<br>删除容器(必须先停止容器,再删除容器)：docker <span class="hljs-built_in">stop</span> 容器名，然后 docker rm 容器名<br>删除镜像：docker rmi 镜像<br></code></pre></td></tr></table></figure><hr><h1 id="容器编排工具"><a href="#容器编排工具" class="headerlink" title="容器编排工具"></a>容器编排工具</h1><h2 id="什么是容器编排"><a href="#什么是容器编排" class="headerlink" title="什么是容器编排"></a>什么是容器编排</h2><p>Docker的最佳实践建议：<strong>一个容器只运行一个进程</strong></p><p>而实际的应用会有多个组件构成，要运行多个组件，就需要运行多个容器，这就需要对这多个容器进行编排。</p><p><strong>编排（orchestration）：</strong></p><p>主要就是多个容器的<strong>自动配置</strong>、<strong>协作</strong>和<strong>管理服务</strong>的过程。</p><p>编排大概描述动作和管理服务的过程。对容器而言，编排来描述一组时间过程，这个过程会管理运行在多个容器里的引用。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191805723.png"></p><h2 id="容器编排的作用"><a href="#容器编排的作用" class="headerlink" title="容器编排的作用"></a>容器编排的作用</h2><ul><li>容器编排可以在使用容器的任何环境中使用</li><li>这个可以在不同环境中部署相同的应用，而无需重新设计</li><li>通过将微服务放入容器，就能更加轻松的编排各种服务</li><li><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191806840.png"></li></ul><h2 id="容器编排的实例"><a href="#容器编排的实例" class="headerlink" title="容器编排的实例"></a>容器编排的实例</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091556392.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091557794.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091558195.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091559946.png"></p><h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h2><h3 id="容器编排的含义和作用？"><a href="#容器编排的含义和作用？" class="headerlink" title="容器编排的含义和作用？"></a>容器编排的含义和作用？</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">编排（<span class="hljs-keyword">orchestration）含义：</span><br><span class="hljs-keyword"></span>主要就是多个容器的自动配置、协作和管理服务的过程。<br>编排大概描述动作和管理服务的过程。对容器而言，编排来描述一组时间过程，这个过程会管理运行在多个容器里的引用。<br><br>作用：<br><span class="hljs-number">1</span>.容器编排可以在使用容器的任何环境中使用<br><span class="hljs-number">2</span>.这个可以在不同环境中部署相同的应用，而无需重新设计<br><span class="hljs-number">3</span>.通过将微服务放入容器，就能更加轻松的编排各种服务<br></code></pre></td></tr></table></figure><h3 id="如何使用Docker-compose-进行容器编排？"><a href="#如何使用Docker-compose-进行容器编排？" class="headerlink" title="如何使用Docker compose 进行容器编排？"></a>如何使用Docker compose 进行容器编排？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="阿里云容器服务ACK概述"><a href="#阿里云容器服务ACK概述" class="headerlink" title="阿里云容器服务ACK概述"></a>阿里云容器服务ACK概述</h1><h2 id="阿里云ACK概述"><a href="#阿里云ACK概述" class="headerlink" title="阿里云ACK概述"></a>阿里云ACK概述</h2><p>容器服务K8S版（简称ACK）提供高性能可伸缩的容器应用管理能力，支持企业级容器化的全生命周期管理。整合阿里云虚拟化、存储、网络和安全能力，打造云端最佳容器化应用环境。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091604227.png"></p><h2 id="阿里云ACK的功能"><a href="#阿里云ACK的功能" class="headerlink" title="阿里云ACK的功能"></a>阿里云ACK的功能</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091605206.png" alt="image-20230809160517145"></p><h2 id="阿里云ACK的产品形态"><a href="#阿里云ACK的产品形态" class="headerlink" title="阿里云ACK的产品形态"></a>阿里云ACK的产品形态</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091605438.png" alt="image-20230809160554369"></p><h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><h3 id="阿里云ACK的架构组件"><a href="#阿里云ACK的架构组件" class="headerlink" title="阿里云ACK的架构组件"></a>阿里云ACK的架构组件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">阿里云ACK（容器服务）的架构组件主要包括<br>容器集群<br>容器编排<br>容器镜像仓库<br>容器网络等。<br>其中，容器集群是整个架构的核心，负责管理和调度容器；容器编排负责对容器进行编排和调度，实现容器服务的自动化部署和管理；容器镜像仓库存储容器镜像，为容器提供可复用的镜像；容器网络则负责容器的网络通信，保障容器间的网络互通。这些组件共同协作，实现了容器服务的稳定、高效和安全运行。<br></code></pre></td></tr></table></figure><hr><h1 id="阿里云容器服务ACK功能优势"><a href="#阿里云容器服务ACK功能优势" class="headerlink" title="阿里云容器服务ACK功能优势"></a>阿里云容器服务ACK功能优势</h1><h2 id="阿里云ACK与自建Kubernetes的区别"><a href="#阿里云ACK与自建Kubernetes的区别" class="headerlink" title="阿里云ACK与自建Kubernetes的区别"></a>阿里云ACK与自建Kubernetes的区别</h2><p>​    <img src="C:/Users/86187/AppData/Roaming/Typora/typora-user-images/image-20230809160936214.png" alt="image-20230809160936214" style="zoom: 200%;" /></p><h2 id="阿里云ACK核心功能"><a href="#阿里云ACK核心功能" class="headerlink" title="阿里云ACK核心功能"></a>阿里云ACK核心功能</h2><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><ul><li>三种集群形态：专业版K8S集群、托管版k8S集群、Serverless K8S集群</li><li>托管版K8S集群的控节点默认为三个可用区的高可用部署不行</li><li>单集群支持千量级ECS节点</li><li>支持跨可用区集群以及注册外部集群</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401191814240.png"></p><h3 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091611725.png"></p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091612683.png"></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091612727.png"></p><h3 id="可观测性体系"><a href="#可观测性体系" class="headerlink" title="可观测性体系"></a>可观测性体系</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091613657.png"></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091613954.png"></p><h2 id="阿里云ACK集群类型"><a href="#阿里云ACK集群类型" class="headerlink" title="阿里云ACK集群类型"></a>阿里云ACK集群类型</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091614171.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091614115.png"></p><p><strong>ACK Pro版 - 可靠性强化集群</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091616479.png"></p><p><strong>ACK Pro版 - 安全增强KMS加密</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091617784.png"></p><p><strong>ACK Pro版 - 调度算法加强</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091618969.png"></p><h2 id="阿里云ACK应用场景"><a href="#阿里云ACK应用场景" class="headerlink" title="阿里云ACK应用场景"></a>阿里云ACK应用场景</h2><h3 id="DevOvs"><a href="#DevOvs" class="headerlink" title="DevOvs"></a>DevOvs</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091619240.png"></p><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091620790.png"></p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091621704.png"></p><h3 id="混合云"><a href="#混合云" class="headerlink" title="混合云"></a>混合云</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091621216.png"></p><h3 id="弹性伸缩-1"><a href="#弹性伸缩-1" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091621296.png"></p><h2 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h2><h3 id="阿里云ACK有哪些功能优势？"><a href="#阿里云ACK有哪些功能优势？" class="headerlink" title="阿里云ACK有哪些功能优势？"></a>阿里云ACK有哪些功能优势？</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.安全可靠：阿里云ACK的架构组件经过了严格的安全防护和性能优化，可以保障容器服务的稳定和安全运行。<br><span class="hljs-number">2</span>.高性能调度：ACK具备高性能的容器调度能力，能够快速响应容器创建和扩容，保障容器服务的可用性和性能。<br><span class="hljs-number">3</span>.容器编排：ACK支持多种容器编排技术，如Kubernetes、Docker <span class="hljs-keyword">Swarm等，可以根据业务需求选择合适的编排技术，实现容器的自动化部署和管理。</span><br><span class="hljs-keyword"></span><span class="hljs-number">4</span>.容器镜像仓库：ACK提供容器镜像仓库服务，可以存储和管理容器镜像，为容器提供可复用的镜像。<br><span class="hljs-number">5</span>.容器网络：ACK支持多种容器网络解决方案，如Flannel、Calico等，可以根据业务需求选择合适的网络解决方案，保障容器间的网络互通。<br><span class="hljs-number">6</span>.日志和监控：ACK提供日志和监控功能，可以实时监控容器的运行状态和日志信息，帮助用户及时发现和解决问题。<br><span class="hljs-number">7</span>.弹性伸缩：ACK可以根据业务需求实现容器的弹性伸缩，自动调整容器数量和资源配比，保障容器服务的可用性和性能。<br><span class="hljs-number">8</span>.多租户隔离：ACK支持多租户隔离功能，可以实现不同用户之间的资源隔离和访问控制，保障用户数据的隐私和安全。<br><span class="hljs-number">9</span>.集成与开放：阿里云ACK可以与其他阿里云服务集成，如SLS、ARMS等，也可以与第三方服务集成，实现数据的共享和互通。<br><span class="hljs-number">10</span>.丰富的应用生态：阿里云ACK与众多应用生态合作伙伴紧密合作，提供丰富的应用支持和解决方案，帮助用户快速构建和管理容器化应用。<br></code></pre></td></tr></table></figure><h3 id="阿里云ACK有哪几个应用场景？"><a href="#阿里云ACK有哪几个应用场景？" class="headerlink" title="阿里云ACK有哪几个应用场景？"></a>阿里云ACK有哪几个应用场景？</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">DevOvs</span><br>机器学习<br>微服务架构<br>混合云<br>弹性伸缩<br></code></pre></td></tr></table></figure><hr><h1 id="阿里云容器服务ACK架构方案"><a href="#阿里云容器服务ACK架构方案" class="headerlink" title="阿里云容器服务ACK架构方案"></a>阿里云容器服务ACK架构方案</h1><h2 id="极致弹性的云原生架构解决方案"><a href="#极致弹性的云原生架构解决方案" class="headerlink" title="极致弹性的云原生架构解决方案"></a>极致弹性的云原生架构解决方案</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091625577.png" alt="image-20230809162528489"></p><h2 id="ACK集群低成本价高弹性架构"><a href="#ACK集群低成本价高弹性架构" class="headerlink" title="ACK集群低成本价高弹性架构"></a>ACK集群低成本价高弹性架构</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091626196.png" alt="image-20230809162619103"></p><h2 id="基于ECI的ACK集群高弹性架构"><a href="#基于ECI的ACK集群高弹性架构" class="headerlink" title="基于ECI的ACK集群高弹性架构"></a>基于ECI的ACK集群高弹性架构</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091627111.png" alt="image-20230809162753019"></p><h2 id="容器跨可用区高可用"><a href="#容器跨可用区高可用" class="headerlink" title="容器跨可用区高可用"></a>容器跨可用区高可用</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091629579.png" alt="image-20230809162910482"></p><h2 id="混合云部署ACK集群"><a href="#混合云部署ACK集群" class="headerlink" title="混合云部署ACK集群"></a>混合云部署ACK集群</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091629519.png" alt="image-20230809162944417"></p><h2 id="思考-5"><a href="#思考-5" class="headerlink" title="思考"></a>思考</h2><h3 id="理解ACK集群基于ECI的ACK集群高弹性架构方案。"><a href="#理解ACK集群基于ECI的ACK集群高弹性架构方案。" class="headerlink" title="理解ACK集群基于ECI的ACK集群高弹性架构方案。"></a>理解ACK集群基于ECI的ACK集群高弹性架构方案。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="理解ACK跨区域、混合云的架构方案。"><a href="#理解ACK跨区域、混合云的架构方案。" class="headerlink" title="理解ACK跨区域、混合云的架构方案。"></a>理解ACK跨区域、混合云的架构方案。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="阿里云容器服务ACK快速入门"><a href="#阿里云容器服务ACK快速入门" class="headerlink" title="阿里云容器服务ACK快速入门"></a>阿里云容器服务ACK快速入门</h1><h2 id="ACk产品家族"><a href="#ACk产品家族" class="headerlink" title="ACk产品家族"></a>ACk产品家族</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091635640.png" alt="image-20230809163528551"></p><h2 id="ACK使用流程"><a href="#ACK使用流程" class="headerlink" title="ACK使用流程"></a>ACK使用流程</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091635165.png" alt="image-20230809163544079"></p><h2 id="ACK与原生K8S名词对照"><a href="#ACK与原生K8S名词对照" class="headerlink" title="ACK与原生K8S名词对照"></a>ACK与原生K8S名词对照</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091636677.png" alt="image-20230809163605583"></p><h2 id="Kubectl命令常用参数示例"><a href="#Kubectl命令常用参数示例" class="headerlink" title="Kubectl命令常用参数示例"></a>Kubectl命令常用参数示例</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091636357.png" alt="image-20230809163630249"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308091636037.png" alt="image-20230809163657971"></p><h2 id="思考-6"><a href="#思考-6" class="headerlink" title="思考"></a>思考</h2><h3 id="理解ACK的使用流程？"><a href="#理解ACK的使用流程？" class="headerlink" title="理解ACK的使用流程？"></a>理解ACK的使用流程？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="如何通过Kubectl使用ACK？"><a href="#如何通过Kubectl使用ACK？" class="headerlink" title="如何通过Kubectl使用ACK？"></a>如何通过Kubectl使用ACK？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-弹性计算</title>
    <link href="/2023/08/05/ACA-%E5%BC%B9%E6%80%A7%E8%AE%A1%E7%AE%97/"/>
    <url>/2023/08/05/ACA-%E5%BC%B9%E6%80%A7%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="1-虚拟化技术概述"><a href="#1-虚拟化技术概述" class="headerlink" title="1 虚拟化技术概述"></a>1 虚拟化技术概述</h1><h2 id="1-1-虚拟化"><a href="#1-1-虚拟化" class="headerlink" title="1.1 虚拟化"></a>1.1 虚拟化</h2><p>在计算机领域，虚拟化指创建某事物的虚拟版本，包括虚拟机的硬件平台、存储设备源、以及计算机网络资源。</p><p>可见，虚拟化是一种资源管理技术。他将计算机的各种实体资源（CPU、内存、存储、网络等）予以抽象和转化出来，并提供分割、重组，以达到最大化物理资源的目的。</p><h2 id="1-2-虚拟化技术"><a href="#1-2-虚拟化技术" class="headerlink" title="1.2 虚拟化技术"></a>1.2 虚拟化技术</h2><p>简单说，<strong>虚拟化技术就是将物理资源虚拟化</strong>。在传统架构当中，一个物理主机只能支持一个操作系及上层应用。但是有了虚拟化技术，一个物理主机可以被分割成多个虚拟机，向上支撑多个操作系统及应用程序。</p><h2 id="1-3-虚拟化执行层面分类"><a href="#1-3-虚拟化执行层面分类" class="headerlink" title="1.3 虚拟化执行层面分类"></a>1.3 虚拟化执行层面分类</h2><p>从<strong>实现的方式</strong>上划分：<strong>硬件虚拟化</strong>、<strong>软件虚拟化</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071834455.png"></p><p>从<strong>虚拟化的程度</strong>上划分：<strong>半虚拟化</strong>、<strong>全虚拟化</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071834053.png"></p><h2 id="1-4-虚拟化技术层面分类"><a href="#1-4-虚拟化技术层面分类" class="headerlink" title="1.4 虚拟化技术层面分类"></a>1.4 虚拟化技术层面分类</h2><p>虚拟化是云计算的入门技术，从<strong>云计算资源的角度</strong>，可以将虚拟划分为：<strong>计算虚拟化</strong>、<strong>存储虚拟化</strong>、<strong>网络虚拟化。</strong></p><h3 id="1-4-1-计算虚拟化"><a href="#1-4-1-计算虚拟化" class="headerlink" title="1.4.1 计算虚拟化"></a>1.4.1 计算虚拟化</h3><p>计算虚拟化主要包括<strong>CPU虚拟化</strong>、<strong>内存虚拟化</strong>、<strong>I/O虚拟化</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071838768.png"></p><h3 id="1-4-2-存储虚拟化"><a href="#1-4-2-存储虚拟化" class="headerlink" title="1.4.2 存储虚拟化"></a>1.4.2 存储虚拟化</h3><p>存储虚拟化主要涉及<strong>RAID</strong>、<strong>分布式存储</strong>、<strong>分布式文件系统</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071846296.png"></p><h3 id="1-4-3-网络虚拟化"><a href="#1-4-3-网络虚拟化" class="headerlink" title="1.4.3 网络虚拟化"></a>1.4.3 网络虚拟化</h3><p>网络虚拟化主要包含了<strong>网络虚拟化</strong>和<strong>软件定义网络</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071847040.png"></p><h2 id="1-5-虚拟化管理工具-–-VMM"><a href="#1-5-虚拟化管理工具-–-VMM" class="headerlink" title="1.5 虚拟化管理工具 – VMM"></a>1.5 虚拟化管理工具 – VMM</h2><p>VMM，虚拟机监控器，也称Hypervidor，为了达到虚拟化而引入的一个软件层。VMM向下能够掌握实际的各种护理资源，向上可以给虚拟机划分逻辑资源，实现虚拟机独享物理资源的假象。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071849489.png"></p><h2 id="1-6-虚拟化技术优势"><a href="#1-6-虚拟化技术优势" class="headerlink" title="1.6 虚拟化技术优势"></a>1.6 虚拟化技术优势</h2><ul><li>性价比高</li><li>灵活性强</li><li>稳定性强</li><li>利用率高</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071849380.png"></p><h2 id="1-7-思考"><a href="#1-7-思考" class="headerlink" title="1.7 思考"></a>1.7 思考</h2><h3 id="1-7-1-虚拟化技术未来发展趋势？"><a href="#1-7-1-虚拟化技术未来发展趋势？" class="headerlink" title="1.7.1 虚拟化技术未来发展趋势？"></a>1.7.1 虚拟化技术未来发展趋势？</h3><figure class="highlight llvm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>.更高效的资源管理<br>随着数据中心规模的扩大和计算需求的增长，更高效的资源管理变得尤为重要。虚拟化技术将进一步优化资源调度，提高利用率，降低能耗，使得计算资源能够更好地适应各种应用需求。<br><br><span class="hljs-number">2</span>.容器化技术的普及<br>容器化技术如Docker和Kubernetes已经成为现代化应用部署的主流方式。随着容器技术的成熟和生态系统的完善，更多的企业和组织将采用容器化方式进行应用部署和管理，进一步简化应用的部署和运维。<br><br><span class="hljs-number">3</span>.增强现实与虚拟现实的融合<br>增强现实（AR）和虚拟现实（VR）技术的发展将促进现实世界与虚拟世界的进一步融合。通过虚拟化技术，可以实现更为逼真的虚拟环境，为AR/VR应用提供更好的用户体验。<br><br><span class="hljs-number">4</span>.安全性增强<br>随着虚拟化技术的广泛应用，安全问题也日益突出。未来的虚拟化技术将更加注重安全性，通过加密、隔离、访问控制等手段提高虚拟化环境的安全性，保护用户数据和隐私。<br><br><span class="hljs-number">5</span>.智能化的管理<br>人工智能和机器学习技术的发展将为虚拟化技术提供新的管理手段。通过机器学习和人工智能技术，可以实现智能化的资源调度、故障诊断和预测性维护，提高虚拟化环境的稳定性和可用性。<br><br><span class="hljs-number">6</span>.开源技术的进一步发展<br>开源技术已经成为现代软件发展的重要趋势。未来，随着更多企业和组织参与开源社区，虚拟化技术将得到更广泛的开发和改进，推动虚拟化技术的快速发展。<br><br><span class="hljs-number">7</span>.边缘计算的兴起<br>随着物联网和<span class="hljs-number">5</span>G技术的发展，数据处理和分析的需求将更多地转移到边缘设备上。虚拟化技术将与边缘计算相结合，为物联网设备提供更高效、更安全的数据处理和管理能力。<br><br><span class="hljs-number">8</span>.硬件辅助虚拟化技术的进步<br>硬件辅助虚拟化技术如Intel VT-<span class="hljs-keyword">x</span>和AMD-V已经得到了广泛应用。未来，随着硬件技术的进步，硬件辅助虚拟化技术将进一步提高虚拟机的性能和安全性。<br><br><span class="hljs-number">9</span>.云原生应用的普及<br>云原生应用是现代化应用的重要组成部分，它能够更好地适应云计算环境，提高应用的可用性和可维护性。随着云原生技术的成熟和普及，更多的企业将采用云原生架构构建应用，进一步简化应用的部署和管理。<br><br><span class="hljs-number">10</span>.区块链技术的应用<br>区块链技术为数据的安全和可信提供了新的解决方案。未来，虚拟化技术将与区块链技术相结合，实现更为安全、可信的计算环境，保护用户数据和隐私。<br><br>总之，虚拟化技术的未来发展将呈现出更加多元化、智能化和安全化的趋势。它将为云计算、容器化、AR/VR、物联网等新兴技术的发展提供有力支持，促进计算技术的进一步革新和发展。<br></code></pre></td></tr></table></figure><hr><h1 id="2-虚拟化技术产品介绍"><a href="#2-虚拟化技术产品介绍" class="headerlink" title="2 虚拟化技术产品介绍"></a>2 虚拟化技术产品介绍</h1><h2 id="2-1-KVM虚拟化解决方案"><a href="#2-1-KVM虚拟化解决方案" class="headerlink" title="2.1 KVM虚拟化解决方案"></a>2.1 KVM虚拟化解决方案</h2><p>KVM全称是Kernel-based Virtual Machine，基于内核的虚拟机,KVM是采用<strong>硬件虚拟化</strong>技术的<strong>全虚拟化</strong>解决方案。</p><ul><li>包含在Linux内核当中</li><li>它需要支持虚拟化拓展的CPU</li><li>完全开源</li></ul><h2 id="2-2-KVM功能概述"><a href="#2-2-KVM功能概述" class="headerlink" title="2.2 KVM功能概述"></a>2.2 KVM功能概述</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080155555.png"></p><p><strong>KVM功能特性</strong></p><ul><li>内存管理</li><li>存储和客户机镜像格式</li><li>实时迁移</li><li>性能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080155543.png"></p><h2 id="2-3-KVM发展状况及未来趋势"><a href="#2-3-KVM发展状况及未来趋势" class="headerlink" title="2.3 KVM发展状况及未来趋势"></a>2.3 KVM发展状况及未来趋势</h2><p><strong>KVM现状</strong></p><p>KVM已经成为Openstack用户主流的Hypervisor选择。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080203519.png"></p><p><strong>KVM未来发展趋势</strong></p><ul><li>大规模部署有挑战</li><li>实时性方面受到的挑战</li><li>安全性有进一步加强空间</li><li>性能调优</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080204029.png"></p><h2 id="2-4-其他虚拟化解决方案"><a href="#2-4-其他虚拟化解决方案" class="headerlink" title="2.4 其他虚拟化解决方案"></a>2.4 其他虚拟化解决方案</h2><p><strong>XEN</strong>、<strong>VMware</strong>、<strong>HyperV</strong>、<strong>Container</strong></p><h3 id="2-4-1-XEN"><a href="#2-4-1-XEN" class="headerlink" title="2.4.1 XEN"></a>2.4.1 XEN</h3><p>Xen早于KVM，可以追溯到20世纪90年代。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080217717.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080218081.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080219910.png"></p><p><strong>半虚拟化</strong></p><p>半虚拟化被称作”超虚拟化”（PV），是一种以Xen为主导的虚拟化技术。此项技术是虚拟机操作系统可以辨别在三个Xen虚拟机管理程序上运行，而不是在硬件运行的虚拟机，并鉴别在同样环境里运行的多个虚拟机。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080219684.png"></p><p><strong>全虚拟化</strong></p><p>完全虚拟化，又称“硬件虚拟化”（HVM），运行在虚拟环境里的虚拟机总是感觉自己运行在硬件上，并且感知不到在相同环境下运行着其他虚拟技术。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080220013.png"></p><h3 id="2-4-2-VMware"><a href="#2-4-2-VMware" class="headerlink" title="2.4.2 VMware"></a>2.4.2 VMware</h3><p>VMware产品非常齐全，。既有PaaS产品，也有IaaS产品；既有运行与Linux平台上的产品，也有Windows和Mac平台上的产品。</p><p><strong>代表产品：</strong>VMware Workstation （桌面级虚拟化产品）          VMware ESXi（服务器级的虚拟化软件）</p><h3 id="2-4-3-HyperV"><a href="#2-4-3-HyperV" class="headerlink" title="2.4.3 HyperV"></a>2.4.3 HyperV</h3><p>微软公司的服务器虚拟化产品</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080223388.png"></p><p><strong>架构</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080224613.png"></p><h3 id="2-4-4-Container"><a href="#2-4-4-Container" class="headerlink" title="2.4.4 Container"></a>2.4.4 Container</h3><p>容器严格来说与虚拟化软件并不是一个大类，容器不是某个虚拟化软件，而是某类软件的统称，包括Doctor和LXC等。另外，容器不是硬件平台级的虚拟化技术，而是软件运行环境的虚拟化，是一种操作系统级的虚拟化技术。</p><p>Linux Container容器技术的诞生（2008年）就解决了IT世界里“集装箱运输”的问题。<strong>Linux Container（LXC）</strong>它是一种内核轻量级的<strong>操作系统层虚拟化技术</strong>。Linux Container主要由<strong>Namespace</strong>和<strong>Cgroup</strong>两大机制。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080226010.png"></p><p><strong>技术特点</strong></p><ul><li>极其轻量</li><li>秒级部署</li><li>易于移植</li><li>弹性伸缩</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080227280.png"></p><h2 id="2-5-思考"><a href="#2-5-思考" class="headerlink" title="2.5 思考"></a>2.5 思考</h2><h3 id="2-5-1-你认为哪个虚拟化产品更好用？"><a href="#2-5-1-你认为哪个虚拟化产品更好用？" class="headerlink" title="2.5.1 你认为哪个虚拟化产品更好用？"></a>2.5.1 你认为哪个虚拟化产品更好用？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><hr><h1 id="3-阿里云云服务器ECS实战"><a href="#3-阿里云云服务器ECS实战" class="headerlink" title="3 阿里云云服务器ECS实战"></a>3 阿里云云服务器ECS实战</h1><h2 id="3-1-阿里云ECS"><a href="#3-1-阿里云ECS" class="headerlink" title="3.1 阿里云ECS"></a>3.1 阿里云ECS</h2><p>云服务器ECS（Elastic Compute Service）是阿里云提供的性能卓越、稳定可靠、弹性扩展的IaaS（Infrastructure as a Service）级别云计算服务。云服务器ECS免去了采购IT硬件的前期准备，可以想使用水、电、天然气等公共资源一样，便捷高效的使用服务器，实现计算资源的即开即用和弹性伸缩。</p><h2 id="3-2阿里云ECS原理和架构"><a href="#3-2阿里云ECS原理和架构" class="headerlink" title="3.2阿里云ECS原理和架构"></a>3.2阿里云ECS原理和架构</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080238951.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401182357171.png"></p><h2 id="3-3-如何购买使用ECS"><a href="#3-3-如何购买使用ECS" class="headerlink" title="3.3 如何购买使用ECS"></a>3.3 如何购买使用ECS</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080241772.png"></p><h2 id="3-4-如何管理和配置ECS"><a href="#3-4-如何管理和配置ECS" class="headerlink" title="3.4 如何管理和配置ECS"></a>3.4 如何管理和配置ECS</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308080242344.png"></p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308081450025.png" style="zoom:80%;" /><h2 id="3-5-思考"><a href="#3-5-思考" class="headerlink" title="3.5 思考"></a>3.5 思考</h2><h3 id="3-5-1-阿里云ECS实例包含哪些组件？"><a href="#3-5-1-阿里云ECS实例包含哪些组件？" class="headerlink" title="3.5.1 阿里云ECS实例包含哪些组件？"></a>3.5.1 阿里云ECS实例包含哪些组件？</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">1</span>.实例<br>等同于一台虚拟服务器，内含<span class="hljs-meta">CPU</span>、内存、操作系统、网络配置、磁盘等基础的计算组件。用户可以选择不同的实例规格，例如计算能力、内存、存储和网络带宽等，以适应不同应用场景的需求。<br><br><span class="hljs-number">2</span>.镜像<br>提供实例的操作系统、初始化应用数据及预装的软件。操作系统支持多种Linux发行版和多种Windows Server版本。用户也可以创建自己的镜像，以满足特定业务需求。<br><br><span class="hljs-number">3</span>.块存储<br>块设备类型产品，具备高性能和低时延的特性。提供基于分布式存储架构的云盘、共享块存储以及基于物理机本地存储的本地盘。<br><br><span class="hljs-number">4</span>.安全组<br>一种虚拟防火墙，用于控制实例的入口和出口流量。用户可以设置安全组规则，允许或拒绝特定的<span class="hljs-built_in">IP</span>地址或端口访问实例。<br><br><span class="hljs-number">5</span>.快照<br>对磁盘数据的定期备份，用户可以创建、管理和恢复快照。快照可以用于数据备份、灾难恢复和数据迁移等场景。<br><br><span class="hljs-number">6</span>.网络<br>主要是专有网络VPC，在逻辑上可彻底隔离的云上私有网络。<br><br><span class="hljs-number">7</span>.弹性<span class="hljs-built_in">IP</span><br>一种公网<span class="hljs-built_in">IP</span>地址，可以与实例关联，并且在实例的生命周期内保持不变。用户可以将弹性<span class="hljs-built_in">IP</span>分配给实例，实现与外部网络的通信。<br></code></pre></td></tr></table></figure><h3 id="3-5-2-阿里云ECS释放支持按量付费？"><a href="#3-5-2-阿里云ECS释放支持按量付费？" class="headerlink" title="3.5.2 阿里云ECS释放支持按量付费？"></a>3.5.2 阿里云ECS释放支持按量付费？</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">阿里云ECS释放支持按量付费，即用户可以根据实际需求按需开通和释放资源，无需提前购买大量资源。<br>按量付费是一种先使用后付费的计费方式，成本比传统主机降低<span class="hljs-number">30</span><span class="hljs-meta">%</span>~<span class="hljs-number">80</span><span class="hljs-meta">%</span>。阿里云ECS的按量付费资源包括计算资源（<span class="hljs-attr">vCPU和内存）、镜像、云盘、公网带宽（按固定带宽）和快照等。用户可以根据具体配置汇总出一定时间内应扣除的总费用。在开通按量付费实例时，用户可以设置使用时限，到时间点后会自动释放。</span><br><span class="hljs-attr">此外，用户可以通过手动释放实例来结束计费。对于专有网络按量付费实例，如果没有启用实例停机不收费功能，只有释放实例才会结束实例计费。在控制台上停止实例不会停止实例计费。欠费后，即使已经设置自动释放时间，按量付费的ECS实例也不会遵循设置的时间释放。自欠费日起15</span>天后，ECS实例及相关数据（包括系统盘、随实例同时释放的数据盘和快照）都将被永久删除，数据无法找回。如果设置了自动释放，计费结束时间以系统实际释放时间为准（精确到秒）。<br></code></pre></td></tr></table></figure><hr><h1 id="4-弹性伸缩概述"><a href="#4-弹性伸缩概述" class="headerlink" title="4 弹性伸缩概述"></a>4 弹性伸缩概述</h1><p>弹性伸缩（Auto Scaling）是根据业务需求和策略自动调整计算能力（即实例数量）的服务。</p><h2 id="4-1-弹性伸缩基本概念"><a href="#4-1-弹性伸缩基本概念" class="headerlink" title="4.1 弹性伸缩基本概念"></a>4.1 弹性伸缩基本概念</h2><ul><li><p><strong>弹性伸缩</strong></p><p>  ​    是根据要求和策略<strong>自动调整计算能力（即实例数量）</strong>的服务。可以指定实例的类型，即ECS实例或RCI实例。在业务需求增长时，弹性伸缩自动增加指定类型的实例，来<strong>保证计算能力</strong>；在业务需求下降时，弹性伸缩自动减少指定类型的实例，来<strong>节约成本</strong>。弹性伸缩不仅适合业务量不断波动的应用程序，同时也适合业务量稳定的应用程序。</p></li><li><p><strong>伸缩组</strong></p><p>  ​    <strong>是具有相同应用场景、相同实例类型的实例集合。</strong>伸缩组定义了组内可容纳实例数的最大最小值、关联负载均衡实力、关联RDS实例等属性。</p></li><li><p><strong>伸缩模式</strong></p><p>  ​    对应不同的增加、减少实例的操作，包括<strong>定时模式</strong>、<strong>动态模式</strong>、<strong>固定数量模式</strong>、<strong>自定义模式</strong>、<strong>健康模式</strong>、<strong>多模式并行</strong>。</p></li><li><p><strong>组内实例配置信息来源</strong></p><p>  ​    弹性伸缩从您选择的组内实例配置信息来源获取实例配置信息，并使用这些配置信息创建实例。组内实例配置信息来源支持<strong>伸缩配置</strong>和<strong>实例启动模板</strong>。</p></li><li><p><strong>伸缩配置</strong></p><p>  ​    是一种组内实例配置信息来源，包含了<strong>实例的配置信息</strong>。</p></li><li><p><strong>伸缩规则</strong></p><p>  ​    (1)<strong>步进规则、目标追踪规则、偷单规则</strong>：用于在触发伸缩活动时控制增加、减少实例的数量。</p><p>  ​    (2**)预测规则**：基于历史监控数据预测未来的指标值，并智能设置伸缩组边界值。</p></li><li><p><strong>自动触发任务</strong></p><p>  ​    分为定时任务和报警任务</p><p>  (1)<strong>定时任务</strong>可以在指定的时间扩缩容。</p><p>  (2)<strong>报警任务</strong>基于指定的监控指标动态扩缩容。</p></li><li><p><strong>伸缩活动</strong></p><p>  ​    用于<strong>记录伸缩组内</strong>实例数、伸缩组边界值、期望实例数等<strong>数量的变化情况</strong>。执行伸缩规则、修改伸缩组边界值、修改期望实例数等操作均会触发伸缩活动。</p></li><li><p><strong>期望实例数</strong></p><p>  ​    为伸缩组开启期望实例数功能后，伸缩组会自动将实例数量维持在期望实例数，无须人工千预。</p></li><li><p><strong>并行伸缩活动</strong>——通过以下方式触发的伸缩活动为并行伸缩活动</p><p>  (1)手动执行伸缩规则、通过定时任务执行伸缩规则</p><p>  (2)手动添加ECS实例、手动移出ECS实例</p><p>  (3)期望实例数检查任务、实例健康检查任务、最大最小值检查任务</p><p>  (4)如果有执行中的并行伸缩活动，可以再触发其它并行伸缩活动</p></li><li><p><strong>非并行伸缩活动</strong></p><p>  ​    并行伸缩活动以外的伸缩活动均属于非并行伸缩活动。如果有执行中的非并行伸缩活动，不能再触发其它伸缩活动。</p></li><li><p><strong>稳态实例</strong></p><p>  ​    指伸缩组中处于<strong>服务中、保护中和备用中</strong>状态的ECS实例。</p></li><li><p><strong>伸缩组流程</strong></p><p>  ​    指您可以手动暂停、恢复的流程，包括<strong>扩容流程、缩容流程、健康检查、定时任务、报警任务</strong>，用于更精细地控制仲缩组流程级别的动作。</p></li><li><p><strong>伸缩组内实例的生命周期</strong>——伸缩组内ECS实例或ECI实例从创建开始到释放结束的过程，ECS实例或ECI实例的生命周期管理方式和创建类型有关</p><p>  (1)弹性伸缩自动创建的ECS实例或ECI实例：由伸缩组管理。</p><p>  (2)您手动创建的ECS实例或ECI实例：如果已托管给伸缩组，由伸缩组管理。如果未托管给伸缩组，由您自行管理。</p></li><li><p><strong>生命周期挂钩</strong></p><p>  ​    用于挂起加入或移出中的ECS实例成ECl实例，您可以在挂起期间对ECS实例或EC|实例进行自定义操作。例如，在创建ECS实例或EC实例后延迟一段时间，满试展务正常后两挂载到负数均有实例接收流量，</p></li><li><p><strong>冷却时间</strong></p><p>  ​    是指同一伸缩组内成功完成一个伸缩活动后的一段<strong>锁定时间</strong>。在冷却时间内，伸缩组会拒绝云监控报警任务触发伸缩活动的请求，避免因监控指标值波动导致频繁触发伸缩活动。</p></li></ul><h2 id="4-2-弹性伸缩产品优势"><a href="#4-2-弹性伸缩产品优势" class="headerlink" title="4.2 弹性伸缩产品优势"></a>4.2 弹性伸缩产品优势</h2><p>弹性伸缩具有<strong>自动化</strong>、<strong>降成本</strong>、<strong>高可用</strong>、<strong>灵活智能</strong>以及<strong>易审计</strong>等优势。</p><p><strong>1、自动化</strong></p><p>根据预设的配置信息，弹性伸缩能够自动化实现以下功能，<strong>无需您人工干预，避免因手动操作而可能引入的低错。</strong></p><ul><li><p>弹性扩张时：</p><ul><li><p>自动创建指定数量、指定类型的实例(即ECS实例或ECI实例),确保伸缩内所有实例的计算能力能满足业务需求。</p></li><li><p>如果伸缩组关联了负载均衡，自动为创建的ECS实例或ECl实例关联负载均衡。负载均衡按需将访问请求分发给该ECS实例或ECI实例。</p></li><li><p>如果伸缩组关联了RDS数据库，自动将创建的ECS实例或ECl实例的IP添加到RDS访问白名单。该ECS实例或ECl实例可以将应用数据保存到RDS数据库。</p></li></ul></li><li><p>弹性收缩时：</p><ul><li><p>自动移出指定数量、指定类型的实例(即ECS实例或ECI实例),确保冗余的资源及时得到释放。</p></li><li><p>如果伸缩组关联了负载均衡，自动为移出的ECS实例或ECl实例取消关联负载均衡。负载均衡不再给该ECS实例或ECI实例分发访问请求。</p></li><li><p>如果伸缩组关联了RDS数据库，自动从RDS访问白名单中移出ECS实例或ECl实例的IP。该ECS实例或ECl实例不再保存应用数据到RDS数据库。</p></li></ul></li></ul><p><strong>2、降成本</strong></p><p>弹性伸缩按需取用，自动释放，提高资源的利用率，有效降低成本。</p><ul><li>无需提前准备冗余的ECS实例或ECl实例，来防止业务高峰期受到影响；无需担心不能及时<strong>释放冗余资源</strong>，造成成本浪费。弹性伸缩能够适时调整计算能力，降低了资源的拥有成本。</li><li>无需投入大量人力来调整计算资源，<strong>节约了人力成本和时间成本</strong>。</li></ul><p><strong>3、易审计</strong></p><p>弹性伸缩自动记录每一个伸缩活动的详细信息，有助于您<strong>快速定位问题根源，降低了排查难度</strong>。弹性伸缩还提供伸缩组监控功能，可以通过云监控查看伸缩组内的实运行状态。您无需多次查看多台ECS实例或ECI实例的运行状态，有助于您<strong>快速了解整体的业务供给能力</strong>。</p><p><strong>4、高可用</strong></p><p>弹性伸缩支持监测ECS实例或ECI实例的健康状况（即运行状况）。如果发现一台ECS实例或ECl实例未处于运行中状态，则弹性伸缩判定为该ECS实例或ECl实例不健康，并及时自动增加ECS实例替换不健康的ECS实例，或者及时自动增加EC1实例替换不健康的ECI实例，来确保业务的高可用。弹性伸缩可以有效道免因不能及时发现ECS实例或ECl实例的不健康状态，而导致业务连续性受到影响的情况</p><p><strong>5、灵活智能</strong></p><p>弹性伸缩的功能丰富、灵活智能、高可用，可以有效<strong>降低手动配置的复杂度，提高操作效率</strong>。</p><ul><li><p>伸缩模式：支持多模式兼容，可同时配置固定数量、健康、定时、动态、自定义模式。其中，动态模式支持对接云监控服务，可以通过API对接外部的监控系统。</p></li><li><p>实例配置来源(实例使用的模板》:</p><ul><li><p>支持多种配置方式。例如，从已有实例创建伸缩配置，或者新建伸缩配置。如果是ECS实例使用的模板，还支持指定启动模板。</p></li><li><p>支持匹配多个ECS实例或EC实例规格，有效增加模板的灵活性，提高扩容的成功率。比如，ECS实例的模板支持配置多实例规格、多础盘类型等；EC1实例模板支持指定VCPU和内存来匹配多个实例规格。</p></li></ul></li><li><p>弹性伸缩策略：如果伸缩组是ECS类型，弹性伸缩支持丰富的扩缩容策略。如果伸缩组是ECl类型，伸缩策略是默认的。</p><ul><li><p>优先级策略：弹性伸缩会在优先级高的可用区扩缩容。如果无法扩缩容，则自动在下一优先级的可用区进行扩缩容。</p></li><li><p>均衡分布策略：弹性伸缩在多个可用区均衡分布ECS实例，提高可用性。</p></li><li><p>成本优化策略：当您在组内实例来源中指定了多实例规格时，优先创建VCPU单价最低的ECS实例，优先移出伸缩组内vCPU单价最高的ECS实例。</p></li><li><p>实例移出策略：您可以选择移出最早伸缩配置对应的实例，或者最早、最新创建的ECS实例。</p></li><li><p>实例回收模式：移出ECS实例时，您可以直接释放ECS实例，也可以保留部分资源，节省付费。</p></li></ul></li></ul><h2 id="4-3-弹性伸缩应用场景"><a href="#4-3-弹性伸缩应用场景" class="headerlink" title="4.3 弹性伸缩应用场景"></a>4.3 弹性伸缩应用场景</h2><h3 id="4-3-1-无规律的业务量波动"><a href="#4-3-1-无规律的业务量波动" class="headerlink" title="4.3.1 无规律的业务量波动"></a>4.3.1 无规律的业务量波动</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308081624857.png" alt="image-20230808162428788"></p><h3 id="4-3-2-有规律的业务量波动"><a href="#4-3-2-有规律的业务量波动" class="headerlink" title="4.3.2 有规律的业务量波动"></a>4.3.2 有规律的业务量波动</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308081624487.png"></p><h3 id="4-3-3-无明显的业务量波动"><a href="#4-3-3-无明显的业务量波动" class="headerlink" title="4.3.3 无明显的业务量波动"></a>4.3.3 无明显的业务量波动</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308081625936.png"></p><h3 id="4-3-4-混合型的业务波动"><a href="#4-3-4-混合型的业务波动" class="headerlink" title="4.3.4 混合型的业务波动"></a>4.3.4 混合型的业务波动</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308081627336.png"></p><h2 id="4-4-弹性伸缩工作原理"><a href="#4-4-弹性伸缩工作原理" class="headerlink" title="4.4 弹性伸缩工作原理"></a>4.4 弹性伸缩工作原理</h2><p><strong>工作原理</strong></p><p>弹性伸缩增加ECS实例的工作流程如下所示，如果某Web应用使用ECS实例处理业务请求，系统架构分为三层(如上图右侧虚线框所示)。其中，最上层的负载均衡负责将客户端的请求转发给伸缩组内的ECS实例，中间层的伸缩组内的ECS实例负责处理客户端请求，最下层的RDS数据库负责存储来自ECS实例的业务数据。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308081629562.png"></p><p><strong>伸缩模式的配置</strong></p><p>弹性伸缩会自动根据配置适时触发伸缩活动，增加或移出伸缩组内的ECS实例。如果需要弹性伸缩通过某个伸缩模式触发伸缩活动，可以选择其对应的配置方式来实现。</p><p><strong>弹性伸缩示愿图</strong></p><p>弹性伸缩支持为伸缩组关联负载均衡和RDS实例。当您从终端(例如移动端或PC端)发起请求时，负载均衡负责将您的请求转发给伸缩组内的某台ECS实例，ECS实例接收并处理请求，并将应用数据保存在云数据库RDS实例上。弹性伸缩根据业务需求和配置方式自动调整伸缩组内的ECS实例数量，以下分别是扩容、缩容和弹性自愈(即健康检查)场景下弹性伸缩的示意图。</p><p>弹性<strong>扩容</strong>示意图</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190154838.png"></p><p>弹性<strong>缩容</strong>示意图</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190153102.png"></p><p>弹性<strong>自愈</strong>示意图</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190155812.png"></p><h2 id="4-5-弹性伸缩分为两个维度"><a href="#4-5-弹性伸缩分为两个维度" class="headerlink" title="4.5 弹性伸缩分为两个维度"></a><strong>4.5 弹性伸缩分为两个维度</strong></h2><ul><li><p><strong>调度层弹性</strong></p><p>  主要是负责修改负载的调度容量变化。例如，HPA是典型的调度层弹性组件，通过HPA可以调整应用的副本数，调整的副本数会改变当前负载占用的调度容量，从而实现调度层的伸缩。</p></li><li><p><strong>资源层弹性</strong></p><p>  主要是集群的容量规划不能满足集群调度容量时，会通过弹出ECS或ECl等资源的方式进行调度容量的补充。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202401190200869.png"></p><h2 id="4-6-思考"><a href="#4-6-思考" class="headerlink" title="4.6 思考"></a>4.6 思考</h2><h3 id="4-6-1-是否可以尝试手动基与弹性伸缩搭建相关服务？"><a href="#4-6-1-是否可以尝试手动基与弹性伸缩搭建相关服务？" class="headerlink" title="4.6.1 是否可以尝试手动基与弹性伸缩搭建相关服务？"></a>4.6.1 是否可以尝试手动基与弹性伸缩搭建相关服务？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="4-6-2-弹性伸缩在功能上有哪些限制？"><a href="#4-6-2-弹性伸缩在功能上有哪些限制？" class="headerlink" title="4.6.2 弹性伸缩在功能上有哪些限制？"></a>4.6.2 弹性伸缩在功能上有哪些限制？</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">使用弹性伸缩时具有以下功能限制：<br><br><span class="hljs-number">1.</span>弹性伸缩只支持自动增加或减少伸缩组内ECS实例的数量，不支持自动提升或降低单台ECS实例的vCPU、内存、带宽等配置。<br><span class="hljs-number">2.</span>部署在伸缩组内ECS实例或ECI实例上的应用必须是无状态并且可横向扩展的。<br><span class="hljs-number">3.</span>伸缩组内ECS实例或ECI实例可能会被自动释放，因此不适合保存会话记录、应用数据、日志等信息。如有需要，可以将会话记录等状态信息保存到独立的状态服务器，将应用数据保存到云数据库RDS，将日志存储到日志服务。<br><span class="hljs-number">4.</span>弹性伸缩不支持自动将ECS实例或ECI实例添加到Memcache实例的访问白名单，需要自行添加。<br><span class="hljs-number">5.</span>如果某个伸缩组关联的RDS实例、ALB服务器组、<span class="hljs-built_in">CLB</span>实例或者<span class="hljs-built_in">CLB</span>实例的后端服务器组被删除，则伸缩组自动解除与该资源的关联。<br><span class="hljs-number">6.</span>如果某个伸缩组内自动触发的伸缩活动连续失败超过<span class="hljs-number">30</span>天，弹性伸缩系统巡检会暂停该伸缩组自动触发伸缩活动的功能，并通过短信或者邮件向用户发送通知。<br><span class="hljs-number">7.</span>弹性伸缩服务的功能项存在以下数量限制：同一个账号一个地域下最多创建<span class="hljs-number">50</span>个伸缩组；一个伸缩组内最多创建<span class="hljs-number">50</span>个伸缩规则；一个伸缩组内最多创建<span class="hljs-number">6</span>个生命周期挂钩；一个伸缩组最多同时关联<span class="hljs-number">5</span>个负载均衡实例；一个账号下最多创建<span class="hljs-number">20</span>个定时任务。<br><br>以上信息仅供参考，具体功能限制还应以实际使用的平台或框架的文档为准。<br></code></pre></td></tr></table></figure><h3 id="4-6-3-指标弹性伸缩HPA为什么只支持单一规则？"><a href="#4-6-3-指标弹性伸缩HPA为什么只支持单一规则？" class="headerlink" title="4.6.3 指标弹性伸缩HPA为什么只支持单一规则？"></a>4.6.3 指标弹性伸缩HPA为什么只支持单一规则？</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">指标弹性伸缩（Horizontal Pod Autoscaler，HPA）在Kubernetes中用于自动调整Pod的副本数量，以应对工作负载的变化。HPA通过监控Pod的<span class="hljs-meta">CPU</span>利用率、内存利用率或其他自定义指标来决定是否增加或减少Pod的副本数。<br><br>至于为什么HPA通常只支持单一规则，这主要与Kubernetes的设计理念和HPA的初衷有关：<br><br><span class="hljs-number">1</span>.简洁性：Kubernetes的设计哲学之一是保持API的简洁和易用。单一规则使得HPA的配置更加直观和易于理解，降低了用户的学习成本。<br><span class="hljs-number">2</span>.明确性：单一规则有助于避免配置冲突和模糊性。当存在多个规则时，可能会难以确定哪个规则应该优先执行，或者规则之间如何相互作用。<br><span class="hljs-number">3</span>.可扩展性：虽然HPA本身只支持单一规则，但Kubernetes提供了扩展机制，允许用户通过自定义指标和外部适配器来实现更复杂的伸缩逻辑。这样，用户可以在需要时添加额外的伸缩规则，而不必局限于HPA内置的功能。<br><br>然而，随着Kubernetes的发展，社区对HPA的需求也在不断增加。在后续版本中，Kubernetes可能会通过引入更高级别的API或控制器来支持更复杂的伸缩策略，从而满足更多场景的需求。<br><br>需要注意的是，这里所说的“单一规则”可能是指HPA在配置时通常只针对一个特定的指标（如<span class="hljs-meta">CPU</span>利用率）进行伸缩决策。实际上，HPA可以配置多个条件，但这些条件通常是基于同一个指标的不同阈值。例如，可以设置<span class="hljs-meta">CPU</span>利用率超过<span class="hljs-number">80</span>%时增加Pod副本数，低于<span class="hljs-number">20</span>%时减少Pod副本数。这样的配置仍然遵循单一规则的原则，因为它只关注一个指标的变化。<br></code></pre></td></tr></table></figure><h3 id="4-6-4-创建定时弹性伸缩CronHPA调度周期类型有几种？"><a href="#4-6-4-创建定时弹性伸缩CronHPA调度周期类型有几种？" class="headerlink" title="4.6.4 创建定时弹性伸缩CronHPA调度周期类型有几种？"></a>4.6.4 创建定时弹性伸缩CronHPA调度周期类型有几种？</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在Kubernetes中，定时弹性伸缩可以通过配置CronHPA（基于Cron作业的水平Pod自动伸缩器）来实现。CronHPA允许您根据预定义的计划自动调整Pod的副本数量。关于CronHPA的调度周期类型，Kubernetes支持以下几种：<br><br><span class="hljs-code">1.分钟：Cron作业的调度周期以分钟为单位。您可以指定在每个小时的第几分钟执行作业。</span><br><span class="hljs-code">2.小时：Cron作业按小时进行调度。您可以指定在每天的特定小时执行作业。</span><br><span class="hljs-code">3.天：按天进行调度，通常用于定期的任务，如每日或每周报告。</span><br><span class="hljs-code">4.月：按月进行调度，用于周期性任务，如每月报告或数据备份。</span><br><span class="hljs-code">5.年：按年进行调度，用于非常长期的计划任务。</span><br><span class="hljs-code"></span><br><span class="hljs-code">在配置CronHPA时，您需要指定调度周期的类型（分钟、小时、天、月或年）以及相应的调度时间。例如，如果您希望每天中午12点自动调整Pod的副本数量，您可以配置CronHPA使用“小时”调度周期，并在Cron表达式中指定“0 12 * * *”。</span><br><span class="hljs-code"></span><br>请注意，具体可用的调度周期类型可能取决于您使用的Kubernetes版本和配置。建议查阅Kubernetes的官方文档或相关资源以获取更详细的信息和指导。<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACA-云计算基础</title>
    <link href="/2023/08/05/ACA-%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/08/05/ACA-%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="数据中心概述"><a href="#数据中心概述" class="headerlink" title="数据中心概述"></a>数据中心概述</h1><p>数据中心，英文缩写叫IDC，也就是Internet Data Center（互联网数据中心）。</p><p>从作用上来看，数据中心就是一个超大的机房，里面有很多很多的服务器，专门对数据进行集中管理（存储、计算、交换）。</p><p>数据中心是新基础设施，是数字经济的动力引擎，也是国家和社会发展的支撑底座。</p><h2 id="数据中心定义"><a href="#数据中心定义" class="headerlink" title="数据中心定义"></a>数据中心定义</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052306349.png"></p><p>维基百科：一整套复杂的设施。</p><p>谷歌：多功能建筑物，能够容纳多个服务器以及通信设备。</p><h2 id="数据中心涉及的主要标准与规范"><a href="#数据中心涉及的主要标准与规范" class="headerlink" title="数据中心涉及的主要标准与规范"></a>数据中心涉及的主要标准与规范</h2><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052314776.png" alt="image-20230805231311060"  /><h2 id="数据中心级别的介绍"><a href="#数据中心级别的介绍" class="headerlink" title="数据中心级别的介绍"></a>数据中心级别的介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052315179.png" alt="image-20230805231520975"></p><p>分类要素：电源、制冷</p><p>国内（GB50174-2017）：A级（高）、B级、C级（低）</p><p>国际（TAL-942-B-2017）：Tier1（低）— Tier（高）</p><h2 id="数据中心的选址"><a href="#数据中心的选址" class="headerlink" title="数据中心的选址"></a>数据中心的选址</h2><p>地理条件因素：海拔高、气温低、非地震带</p><p>成本因素：电费</p><p>政策导向：国家规划、当地政府引资</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052321831.png" alt="image-20230805232120685"></p><h2 id="数据中心功能及布局结构"><a href="#数据中心功能及布局结构" class="headerlink" title="数据中心功能及布局结构"></a>数据中心功能及布局结构</h2><p>大型数据中心：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052333406.png" alt="image-20230805233330159"></p><p>小型数据中心就像学校的机房。</p><h2 id="数据中心分类"><a href="#数据中心分类" class="headerlink" title="数据中心分类"></a>数据中心分类</h2><ol><li>企业数据中心</li><li>运营商数据中心</li><li>互联网数据中心</li></ol><h2 id="数据中心的基础设施"><a href="#数据中心的基础设施" class="headerlink" title="数据中心的基础设施#"></a>数据中心的基础设施#</h2><p>数据中心主要由四大部分组成：基础设施、物理设备、基础软件、管理支撑软件。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052326089.png" alt="image-20230805232638867"></p><h2 id="数据中心的发展"><a href="#数据中心的发展" class="headerlink" title="数据中心的发展#"></a>数据中心的发展#</h2><p>计算机时代 -&gt; 互联网时代 -&gt; 云计算时代</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052328404.png" alt="image-20230805232820205"></p><h2 id="传统数据中心现状"><a href="#传统数据中心现状" class="headerlink" title="传统数据中心现状#"></a>传统数据中心现状#</h2><p><strong>1.资源物理隔离</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052329071.png" alt="image-20230805232921838"></p><p><strong>2.网络架构局限</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052329514.png" alt="image-20230805232946178"></p><p><strong>3.问题与痛点</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052330791.png" alt="image-20230805233054569"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考##"></a>思考##</h2><h3 id="数据中心有哪些核心功能？"><a href="#数据中心有哪些核心功能？" class="headerlink" title="数据中心有哪些核心功能？"></a>数据中心有哪些核心功能？</h3><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">数据中心具有以下核心功能：<br><br><span class="hljs-bullet">1.</span> 数据处理<br>数据中心作为一个集中的设备网络，可以处理大量的数据信息。它可以运行各种应用程序来处理组织的商业和运营数据。<br><br><span class="hljs-bullet">2.</span> 数据存储<br>数据中心提供大规模的存储空间，用于存储和管理组织的数据。这些数据可以是结构化的、非结构化的或半结构化的。<br><br><span class="hljs-bullet">3.</span> 数据传输<br>数据中心通过网络基础设施传递和加速数据的传输。它可以通过高速网络连接将数据从一个地点传输到另一个地点。<br><br><span class="hljs-bullet">4.</span> 数据展示<br>数据中心可以展示和呈现数据，以便用户可以轻松访问和理解数据。这可以通过数据可视化工具和仪表板来实现。<br><br><span class="hljs-bullet">5.</span> 计算能力<br>数据中心提供强大的计算能力，可以执行复杂的计算任务和算法。这对于处理大规模数据和进行高性能计算非常重要。<br><br><span class="hljs-bullet">6.</span> 服务提供<br>数据中心不仅是一个网络概念，还是一个服务概念。它提供各种服务，如云计算、虚拟化、容器化等，以满足组织和个人的需求。<br></code></pre></td></tr></table></figure><hr><h1 id="云计算概述"><a href="#云计算概述" class="headerlink" title="云计算概述"></a>云计算概述</h1><p>云计算可以看作是分布式算、并行计算和网格计算等计算范式的集大成者。</p><h2 id="云计算的产生背景"><a href="#云计算的产生背景" class="headerlink" title="云计算的产生背景"></a>云计算的产生背景</h2><ul><li>80年代中期（个人电脑） -&gt; 90年代初（互联网） -&gt; 现在（万物互联） </li><li>数据量爆炸性增长（GB TB PB EB ZB）</li><li>IT基础设施能耗</li><li>服务器更新速度快企业升级费用昂贵</li><li>互联网上存在着大量闲置状态的计算设备和存储资源</li></ul><p>需求推动、技术进步、商业模式变革</p><h2 id="云计算的发展历史"><a href="#云计算的发展历史" class="headerlink" title="云计算的发展历史"></a>云计算的发展历史</h2><p><strong>1.云计算演进</strong></p><p>自建机房 -&gt; 传统IDC托管 -&gt; 云计算</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052355782.png"></p><p><strong>2.云计算发展事记</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052353722.png" alt="image-20230805235233904"></p><h2 id="云计算的影响"><a href="#云计算的影响" class="headerlink" title="云计算的影响"></a>云计算的影响</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052356229.png" alt="image-20230805235430044"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052354857.png" alt="image-20230805235452588"></p><h2 id="云计算的概念"><a href="#云计算的概念" class="headerlink" title="云计算的概念#"></a>云计算的概念#</h2><p>按量付费、按需访问网络上的资源</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052357301.png" alt="image-20230805235719113"></p><h3 id="云计算中角色"><a href="#云计算中角色" class="headerlink" title="云计算中角色"></a>云计算中角色</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052358859.png"></p><h3 id="云计算基本思想"><a href="#云计算基本思想" class="headerlink" title="云计算基本思想"></a>云计算基本思想</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308052359018.png" alt="image-20230805235913808"></p><h3 id="云计算特征"><a href="#云计算特征" class="headerlink" title="云计算特征"></a>云计算特征</h3><ul><li>超大规模</li><li>虚拟化</li><li>按需服务</li><li>高可靠性</li><li>高可拓展性</li><li>通用性</li><li>极其经济廉价</li><li>自动化</li><li>完善的运维机制</li></ul><p>云计算的目标：使用户像使用电、水、气一样使用IT资源</p><h2 id="云计算的优缺点"><a href="#云计算的优缺点" class="headerlink" title="云计算的优缺点#"></a>云计算的优缺点#</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060008316.png" alt="image-20230806000802175" style="zoom:80%;" /></td><td><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060008567.png" alt="image-20230806000839419" style="zoom:80%;" /></td><td><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060009929.png" alt="image-20230806000929714" style="zoom: 80%;" /></td></tr></tbody></table><h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考##"></a>思考##</h2><h3 id="云计算的出现在我们生活中有哪些体现？"><a href="#云计算的出现在我们生活中有哪些体现？" class="headerlink" title="云计算的出现在我们生活中有哪些体现？"></a>云计算的出现在我们生活中有哪些体现？</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">在线办公软件：自从云计算技术出现以后，办公室的概念已经模糊。不管是谷歌的Apps还是微软推出的SharePoint，都可以在任何一个有互联网的地方同步办公所需要的办公文件，而不需要随身携带，只要需要时，就可以随时打开。这大大降低了办公的局限性，提高了工作效率。<br><br>云存储：在日常生活中，备份文件就和买保险一样的重要。个人数据的重要性越来越突出，为了保护你的个人数据不受各种灾害的影响，云存储就成了最佳选择。比如像“微盘”等专用的云存储应用，它们能够被安装到不同系统平台的设备上。使用时，用户可以在本地计算机上创建及修改文件，然后自动同步到网络的微盘上；到另外的地方，用户可以使用平板电脑等移动设备，继续修改微盘上的文件，并再次进行同步。这样，微盘就像一个不需要随时携带，但却可以随时使用的U盘一样。<br><br>地图导航：在没有<span class="hljs-built_in">GPS</span>的时代，每到一个地方，我们都需要购买当地的地图。而现在，我们只需要一部手机，就可以拥有一张全世界的地图。这正是基于云计算技术的<span class="hljs-built_in">GPS</span>带给我们的便利。<br><br>电子商务：电子商务现在已经进入了生活中的每一个角落，对于那些不爱逛街的人来说，不用忍受逛街带来的劳累，就可以买到喜欢的东西是一个很棒的选择。而云计算为电子商务提供了强大的后盾，保障了交易的顺畅进行。<br><br>云音乐：音乐已成为每个人生活中必不可少的一部分。随着云计算的发展，无论是上班还是下班，或者在没有电脑的情况下，我们都可以通过手机、平板电脑等移动设备随时听取云端的音乐，享受音乐带来的快乐。<br></code></pre></td></tr></table></figure><hr><h1 id="云计算核心技术"><a href="#云计算核心技术" class="headerlink" title="云计算核心技术"></a>云计算核心技术</h1><p>云计算可以视为网络计算和虚拟化的融合：既利用网络分布式计算处理能力将IT资源构筑成一个资源池，再加上成熟的服务器虚拟化，存储虚拟化技术使用户可以实时的监控和调配资源。</p><h2 id="云计算技术架构"><a href="#云计算技术架构" class="headerlink" title="云计算技术架构"></a>云计算技术架构</h2><p><strong>1.信息时代的重大变革</strong></p><p>物理资源层、<strong>资源层、管理中间件</strong>、SOA构建层</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060022462.png"></p><h2 id="云计算关键技术"><a href="#云计算关键技术" class="headerlink" title="云计算关键技术##"></a>云计算关键技术##</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060025075.png"></p><h3 id="①虚拟化技术"><a href="#①虚拟化技术" class="headerlink" title="①虚拟化技术"></a>①虚拟化技术</h3><p><strong>虚拟化技术的基本概念及特点</strong></p><ul><li>计算元件在虚拟的为不是真实的基础上运行</li><li>虚拟化：物理资源 -&gt; 具有可管理性的逻辑资源</li><li>含义：<ul><li>对象：各种各样的资源</li><li>隐藏不必要的细节</li><li>实现真实环境下的部分或者全部功能</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060027509.png"></p><p><strong>虚拟化的分类</strong></p><p>服务器虚拟化、桌面虚拟化、存储虚拟化、网络虚拟化、应用虚拟化</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060027176.png"></p><p><strong>虚拟化厂商及产品</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060035321.png"></p><p><strong>虚拟化技术的分类</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060037624.png"></p><h3 id="②海量数据存储与处理"><a href="#②海量数据存储与处理" class="headerlink" title="②海量数据存储与处理"></a>②海量数据存储与处理</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060039265.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060039535.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060041105.png"></p><h3 id="③资源管理与调度技术"><a href="#③资源管理与调度技术" class="headerlink" title="③资源管理与调度技术"></a>③资源管理与调度技术</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060042275.png"></p><h3 id="④服务管理技术"><a href="#④服务管理技术" class="headerlink" title="④服务管理技术"></a>④服务管理技术</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060043041.png"></p><h3 id="⑤云计算管理平台"><a href="#⑤云计算管理平台" class="headerlink" title="⑤云计算管理平台"></a>⑤云计算管理平台</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060045483.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060045226.png"></p><h2 id="云计算技术的发展趋势"><a href="#云计算技术的发展趋势" class="headerlink" title="云计算技术的发展趋势"></a>云计算技术的发展趋势</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060046076.png"></p><h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考##"></a>思考##</h2><h3 id="如何解释云计算技术架构？"><a href="#如何解释云计算技术架构？" class="headerlink" title="如何解释云计算技术架构？"></a>如何解释云计算技术架构？</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">云计算可以视为网络计算和虚拟化的融合。<br>云计算技术架构主要分为以下四层：物理资源层、资源层、管理中间件、<span class="hljs-keyword">SOA</span>构建层。其中管理中间件和资源池层是云计算关键部分。<br>物理资源层：包括计算机、存储器、网络设备、数据库等。<br>资源层：将大量相同类型的资源构成同构或接近同构的资源池，是物理资源的集成和管理工作。<br>管理中间件：负责对云计算的资源进行管理，并对众多应用任务进行调度，使资源能够高效、安全的提供服务。<br><span class="hljs-keyword">SOA</span>构建层：将云计算能力封装成标准的服务，并进行管理和使用。<br></code></pre></td></tr></table></figure><h3 id="云计算关键技术有哪些？"><a href="#云计算关键技术有哪些？" class="headerlink" title="云计算关键技术有哪些？"></a>云计算关键技术有哪些？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">虚拟化技术<br>海量数据存储与处理<br>资源管理和调度技术<br>服务管理技术<br>云计算管理平台<br></code></pre></td></tr></table></figure><hr><h1 id="云计算分类及主流产品"><a href="#云计算分类及主流产品" class="headerlink" title="云计算分类及主流产品"></a>云计算分类及主流产品</h1><p>云计算主要分为四种类型：私有云、公有云、混合云和多云。</p><p>云计算的服务模式目前有三种：基础架构即服务（IaaS）、平台即服务（PaaS）和软件即服务（SaaS）。</p><p>未来随着技术的发展，云计算将会向第四种模式发展：服务到服务（S2S）。</p><h2 id="云计算分类"><a href="#云计算分类" class="headerlink" title="云计算分类"></a>云计算分类</h2><p>公有云、私有云、社区云、混合云</p><h3 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060053126.png"></p><p><strong>优势</strong></p><ul><li>规模大</li><li>价格低廉</li><li>灵活</li><li>功能全面</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060054098.png"></p><h3 id="私有云"><a href="#私有云" class="headerlink" title="私有云"></a>私有云</h3><p>私有云的建设、运营和使用都在<strong>某个组织或企业内部完成</strong>，其服务对象被限制在组织内部，其他的人和机构都无权租赁并使用云端计算资源。至于云端部署何处、所有权归谁、由谁负责、日常管理并没有严格规定。</p><p><strong>分类</strong></p><ul><li>本地私有云：适合运行企业中的关键的应用。</li><li>托管私有云：把云端托管在第三方机房或者其他云端，计算设备可以自己购买，也可以租用第三方云端的计算资源。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060055092.png"></p><p><strong>优势</strong></p><ul><li>数据安全</li><li>服务质量—稳定</li><li>充分利用现有硬件资源</li><li>支持定制和遗留应用</li><li>不影响现有IT管理的流程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060056161.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060057255.png"></p><p><strong>劣势</strong></p><ul><li>成本开发高</li><li>持续运营成本偏高</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060057740.png"></p><h3 id="社区云"><a href="#社区云" class="headerlink" title="社区云"></a>社区云</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060058518.png"></p><h3 id="混合云"><a href="#混合云" class="headerlink" title="混合云"></a>混合云</h3><p>混合云是由两个或两个以上不同类型的云（私有云、社区云、公共云）组成的。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060059164.png"></p><p><strong>优势</strong></p><ul><li>架构更灵活</li><li>技术方案更容易掌握</li><li>充分利用现有硬件资源</li><li>更容易满足合规性要求</li><li>更低的费用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060100209.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060101322.png"></p><h2 id="云计算的应用场景"><a href="#云计算的应用场景" class="headerlink" title="云计算的应用场景"></a>云计算的应用场景</h2><p><strong>1  IDC公有云</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060105975.png"></p><p><strong>2  企业私有云</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060105675.png"></p><p><strong>3  云存储系统</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060107360.png"></p><p><strong>4  虚拟桌面云</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060107730.png"></p><p><strong>5  开发测试云</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060109286.png"></p><p><strong>6  大规模数据处理云</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060109644.png"></p><p><strong>7  电子政务云</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060109753.png"></p><p><strong>8  游戏云</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060110256.png"></p><p><strong>9  云杀毒</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060111722.png"></p><h2 id="云计算的主流产品"><a href="#云计算的主流产品" class="headerlink" title="云计算的主流产品#"></a>云计算的主流产品#</h2><h3 id="开源云产品"><a href="#开源云产品" class="headerlink" title="开源云产品"></a>开源云产品</h3><p><strong>OpenStack——云计算管理平 Apache顶级项目</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060114094.png"></p><p><strong>K8S</strong>——可移植，可扩展的开源云平台</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060116483.png"></p><h3 id="收费云产品"><a href="#收费云产品" class="headerlink" title="收费云产品"></a>收费云产品</h3><p><strong>阿里云产品</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060118540.png"></p><p><strong>腾讯云 TStack</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060118868.png"></p><p><strong>华为云会议</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060119497.png"></p><p><strong>百度ARM云桌面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308060121444.png"></p><h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考##"></a>思考##</h2><h3 id="云计算分类有哪些？"><a href="#云计算分类有哪些？" class="headerlink" title="云计算分类有哪些？"></a>云计算分类有哪些？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">私有云<br>公有云<br>混合云<br>社区云<br></code></pre></td></tr></table></figure><h3 id="云计算的主流产品如何分类？"><a href="#云计算的主流产品如何分类？" class="headerlink" title="云计算的主流产品如何分类？"></a>云计算的主流产品如何分类？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">云计算的服务模式目前有三种：基础架构即服务（IaaS）、平台即服务（PaaS）和软件即服务（SaaS）<br>主流产品有：阿里云、华为云、百度云等<br></code></pre></td></tr></table></figure><hr><h1 id="云计算架构"><a href="#云计算架构" class="headerlink" title="云计算架构"></a>云计算架构</h1><h2 id="云计算基本架构"><a href="#云计算基本架构" class="headerlink" title="云计算基本架构"></a>云计算基本架构</h2><p>云服务提供、云服务管理、云服务资源。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308070108398.png"></p><p>云计算服务提供商可以专注于自己所在的层次，无需拥有三个层次的服务能力。</p><p>上层服务提供商可以利用下层的云计算服务实现自己计划提供的云计算服务。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071452539.png"></p><h2 id="云计算服务层次"><a href="#云计算服务层次" class="headerlink" title="云计算服务层次#"></a>云计算服务层次#</h2><h3 id="1-基础设施及服务-–-IaaS（最底层服务）"><a href="#1-基础设施及服务-–-IaaS（最底层服务）" class="headerlink" title="1.基础设施及服务 – IaaS（最底层服务）"></a>1.基础设施及服务 – IaaS（最底层服务）</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071457136.png"></p><p><strong>核心技术：</strong></p><p>​    虚拟化技术、分布式存储技术、超大规模资源管理技术、云服务计费技术</p><p><strong>优势：</strong></p><ul><li><strong>低成本</strong>：企业不需要购置硬件，IaaS 可以满足突发性需求</li><li><strong>免维护</strong>：企业不需要进行维护</li><li><strong>灵活迁移</strong>：运行在IaaS上的应用将可以灵活地在IaaS服务平台间进行迁移</li><li><strong>伸缩性强</strong>：公司可以根据实际业务需求租用云计算服务</li><li><strong>支持应用广泛</strong>：同一个云可以同时支持不赢的应用运行</li></ul><p><strong>主要产品：</strong></p><p>亚马逊的ECS    阿里云的ECS    </p><h3 id="2-平台即服务-–-PaaS（中间层服务）"><a href="#2-平台即服务-–-PaaS（中间层服务）" class="headerlink" title="2.平台即服务 – PaaS（中间层服务）"></a>2.平台即服务 – PaaS（中间层服务）</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071511234.png"></p><p><strong>功能：</strong></p><p>开发测试环境，运行环境、运维环境</p><p><strong>核心技术：</strong></p><p>REST技术、分布式缓存、应用服务器、多租户技术</p><p><strong>优势：</strong></p><ul><li>友好的开发环境</li><li>丰富的服务</li><li>精细的管理和控制</li><li>伸缩性强</li><li>多租户机制</li><li>整合率高</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071514070.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071514218.png"></p><p><strong>主要产品：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071518902.png"></p><p><strong>IaaS和PaaS比较</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071517272.png"></p><h3 id="3-软件即服务-–-SaaS（最顶层服务）"><a href="#3-软件即服务-–-SaaS（最顶层服务）" class="headerlink" title="3.软件即服务 – SaaS（最顶层服务）"></a>3.软件即服务 – SaaS（最顶层服务）</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071520344.png"></p><p><strong>特性：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071520424.png"></p><p><strong>优势：</strong></p><ul><li>使用简单</li><li>支持公开协议</li><li>成本低</li><li>安全保障</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071521752.png"></p><p><strong>主要产品：</strong></p><p>钉钉、飞书、腾讯会议</p><h2 id="云计算架构与传统架构的区别"><a href="#云计算架构与传统架构的区别" class="headerlink" title="云计算架构与传统架构的区别##"></a>云计算架构与传统架构的区别##</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071523040.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071524708.png"></p><h2 id="云计算架构的优势"><a href="#云计算架构的优势" class="headerlink" title="云计算架构的优势#"></a>云计算架构的优势#</h2><ul><li>减少成本</li><li>具有弹性伸缩能力，高可用及高可靠性</li><li>实现业务快速部署上限，缩短业务上线周期</li><li>全面安全防护能力</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071524378.png"></p><h2 id="思考-4"><a href="#思考-4" class="headerlink" title="思考##"></a>思考##</h2><h3 id="云计算架构与传统架构有什么区别？"><a href="#云计算架构与传统架构有什么区别？" class="headerlink" title="云计算架构与传统架构有什么区别？"></a>云计算架构与传统架构有什么区别？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">首先，云计算架构将计算和存储资源集中起来，通过虚拟化技术形成虚拟的资源池，然后通过网络对外提供服务。这种架构使得计算和存储资源可以根据需要进行动态分配，提高了资源利用率，并且可以根据实际需求进行扩展或缩减。而传统架构则是基于本地服务器和存储设备的，资源的利用率较低，并且扩展性较差。<br><br>其次，云计算架构强调的是服务化，即通过提供服务的方式来对外提供应用程序和数据。这种服务化的方式使得应用程序的部署和管理更加简单、快速，并且可以根据需要进行动态调整。而传统架构则通常采用传统的应用程序部署方式，需要手动配置和管理，较为繁琐且扩展性较差。<br><br>此外，云计算架构还具有高度的可靠性和安全性。它采用了多种容错和备份机制，确保数据的可靠性和安全性。同时，由于数据和应用程序都集中管理和维护，也增加了数据的安全性。而传统架构则可能存在数据安全和隐私保护等方面的问题。<br><br>最后，云计算架构还具有高度的可扩展性和灵活性。由于计算和存储资源可以动态分配，因此可以轻松地扩展应用程序或增加新的服务。这使得企业可以更加灵活地应对市场变化和业务需求的变化。而传统架构则可能面临硬件限制和扩展困难等问题。<br></code></pre></td></tr></table></figure><hr><h1 id="阿里云云计算服务概述"><a href="#阿里云云计算服务概述" class="headerlink" title="阿里云云计算服务概述#"></a>阿里云云计算服务概述#</h1><p>本节主要通过对<strong>飞天操作系统</strong>和<strong>神龙计算、洛神网络、盘古储存</strong>三大关键技术进行讲解。</p><h2 id="阿里云云计算服务"><a href="#阿里云云计算服务" class="headerlink" title="阿里云云计算服务"></a>阿里云云计算服务</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071557970.png"></p><h2 id="飞天操作系统"><a href="#飞天操作系统" class="headerlink" title="飞天操作系统"></a>飞天操作系统</h2><p>飞天（Apsara）由阿里云自主研发，服务全球的超大规模计算操作系统。它可以将遍布全球的百万级服务器连接成一台超级计算机，以在线公共服务的方式为社会提供计算能力。</p><p>飞天的革命性在于将云计算的三个方向整合起来：提供强大的计算能力，提供通用的计算能力，提供普惠的计算能力。</p><p><strong>核心服务：</strong></p><p>​                <strong>神龙计算，洛神网络，盘古存储，数据库</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071610644.png" alt="image-20230807161030402"></p><p><strong>飞天操作系统架构</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071612675.png"></p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071612731.png" alt="image-20230807161242501" style="zoom: 67%;" /><h2 id="神龙计算"><a href="#神龙计算" class="headerlink" title="神龙计算"></a>神龙计算</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071614452.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071615072.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071616831.png"></p><h2 id="洛神网络"><a href="#洛神网络" class="headerlink" title="洛神网络"></a>洛神网络</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071622401.png"></p><h2 id="盘古存储"><a href="#盘古存储" class="headerlink" title="盘古存储"></a>盘古存储</h2><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071622007.png" alt="image-20230807162240797" style="zoom:80%;" /><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308071623591.png" alt="image-20230807162326298"></p><h2 id="思考-5"><a href="#思考-5" class="headerlink" title="思考##"></a>思考##</h2><h3 id="（理解）飞天操作系统的三大核心组件是什么？"><a href="#（理解）飞天操作系统的三大核心组件是什么？" class="headerlink" title="（理解）飞天操作系统的三大核心组件是什么？"></a>（理解）飞天操作系统的三大核心组件是什么？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">神龙计算、洛神网络、盘古存储<br></code></pre></td></tr></table></figure><h3 id="（掌握）盘古存储可以提供哪些存储服务？"><a href="#（掌握）盘古存储可以提供哪些存储服务？" class="headerlink" title="（掌握）盘古存储可以提供哪些存储服务？"></a>（掌握）盘古存储可以提供哪些存储服务？</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff">盘古存储是一款基于分布式文件系统的存储服务，它可以提供高容量、高可靠、高性能和低成本的存储服务。具体来说，盘古存储可以提供以下几种存储服务：<br><br><span class="hljs-deletion">-块存储：类似于传统存储设备中的块设备，提供随机I/O性能较好的存储服务，适用于关系型数据库、文件系统等需要块设备存储的场景。</span><br><span class="hljs-deletion">-文件存储：提供传统的文件存储服务，支持POSIX接口和NFS协议，适用于需要存储大量非结构化数据的场景，如视频、图片、日志等。</span><br><span class="hljs-deletion">-对象存储：类似于AWS S3、阿里云OSS等云存储服务，提供键值对方式的存储服务，适用于存储海量数据、日志等场景。</span><br><span class="hljs-deletion">-分布式文件系统：类似于Google File System、HDFS等分布式文件系统，提供跨多个数据中心的分布式文件存储服务，适用于需要跨数据中心进行数据共享和访问的场景。</span><br>  <br>  盘古存储的优点包括高可用性、高可靠性、高性能和低成本等。它采用了分布式架构和数据冗余等技术，确保数据可靠性和可用性；同时，它还支持数据自动备份和恢复等功能，进一步提高了数据的可靠性。此外，盘古存储还支持数据加密和隐私保护等功能，保障用户数据的安全性。<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clouder-负载均衡使用初体验</title>
    <link href="/2023/08/04/Clouder-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2023/08/04/Clouder-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p><strong>实验概述</strong></p><p>  拥有大量用户的企业，经常会面临如下的难题：在高并发的情况下，经常会导致服务器响应速度慢，严重的情况会直接导致服务器停止服务。此时，会导致企业的业务中断，影响客户的正常访问。</p><p>  本实验通过使用阿里云负载均衡SLB以及对负载均衡SLB后端服务器ECS的权重进行修改，可以快速解决上述的问题。</p><p><img src="https://edu.aliyun.com/lab/files/courses/intro/11bc5c2e31a3429082a2b012fe08034d/images/course-11bc5c2e31a3429082a2b012fe08034d-intro-image-1501646995770-ezxsMY" alt="屏幕快照 2017-08-02 下午12.09.18.png"></p><p><strong>实验目标</strong></p><p>  完成此实验后，可以掌握的能力有：</p><p>\1. 配置负载均衡SLB的监听规则，并将ECS实例部署到SLB后端；</p><p>\2. 通过设置负载均衡SLB后端服务器ECS的权重值，分配用户访问后端ECS实例的比例。</p><p><strong>学前建议</strong></p><p>\1. 熟悉阿里云管理控制台的使用方式。</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>负载均衡采用集群部署，可实现会话同步，以消除服务器单点故障，提升冗余，保证服务的稳定性。</p><p>阿里云当前提供四层（TCP协议和UDP协议）和七层（HTTP和HTTPS协议）的负载均衡服务。</p><ul><li>四层采用开源软件LVS（Linux Virtual Server）+ keepalived的方式实现负载均衡，并根据云计算需求对其进行了个性化定制。</li><li>七层采用Tengine实现负载均衡。Tengine是由淘宝网发起的Web服务器项目，它在Nginx的基础上，针对有大访问量的网站需求，添加了很多高级功能和特性。</li></ul><h2 id="阿里云负载均衡"><a href="#阿里云负载均衡" class="headerlink" title="阿里云负载均衡"></a>阿里云负载均衡</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>负载均衡（Server Load Balancer）</strong>是将访问流量根据转发策略分发到后端多台云服务器（ECS实例）的流量分发控制服务。负载均衡扩展了应用的服务能力，增强了应用的可用性。</p><p>负载均衡通过设置<strong>虚拟服务地址</strong>，将添加的ECS实例虚拟成一个高性能、高可用的应用服务池，并根据转发规则，将来自客户端的请求分发给云服务器池中的ECS实例。</p><p>负载均衡默认检查云服务器池中ECS实例的健康状态，自动隔离异常状态的ECS实例，消除了单台ECS实例的单点故障，提高了应用的整体服务能力。此外，负载均衡还具备抗DDoS攻击的能力，增强了应用服务的防护能力。</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>负载均衡服务主要有三个核心概念：</p><p>负载均衡实例 （Server Load Balancer instances）</p><p>一个负载均衡实例是一个运行的负载均衡服务，用来接收流量并将其分配给后端服务器。要使用负载均衡服务，您必须创建一个负载均衡实例，并至少添加一个监听和两台ECS实例。</p><p>监听 （Listeners）</p><p>监听用来检查客户端请求并将请求转发给后端服务器。监听也会对后端服务器进行健康检查。</p><p>后端服务器（Backend Servers）</p><p>一组接收前端请求的ECS实例。您可以单独添加ECS实例到服务器池，也可以通过虚拟服务器组或主备服务器组来批量添加和管理。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/8c47d7f310214b3184714b66c75b88d2/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-8c47d7f310214b3184714b66c75b88d2-content-image-1482739463577-BaRBx3" alt="img"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1）负载均衡服务通过设置虚拟服务地址（IP），将位于同一地域（Region）的多台云服务器（Elastic Compute Service，简称ECS）资源虚拟成一个高性能、高可用的应用服务池；根据应用指定的方式，将来自客户端的网络请求分发到云服务器池中。</p><p>2）负载均衡服务会检查云服务器池中ECS的健康状态，自动隔离异常状态的ECS，从而解决了单台ECS的单点问题，同时提高了应用的整体服务能力。在标准的负载均衡功能之外，负载均衡服务还具备TCP与HTTP抗DDoS攻击的特性，增强了应用服务器的防护能力。</p><p>3）负载均衡服务是ECS面向多机方案的一个配套服务，需要同ECS结合使用。</p><h3 id="产品优势"><a href="#产品优势" class="headerlink" title="产品优势"></a>产品优势</h3><ul><li><p>高可用</p><p>  采用全冗余设计，无单点，支持同城容灾。搭配DNS可实现跨地域容灾，可用性高达99.95%。</p><p>  根据应用负载进行弹性扩容，在流量波动情况下不中断对外服务。</p></li><li><p>可扩展</p><p>  您可以根据业务的需要，随时增加或减少后端服务器的数量，扩展应用的服务能力。</p></li><li><p>低成本</p><p>  与传统硬件负载均衡系统高投入相比，成本可下降60%。</p></li><li><p>安全</p><p>  结合云盾，可提供5Gbps的防DDOS攻击能力。</p></li></ul><h2 id="阿里云负载均衡基础架构"><a href="#阿里云负载均衡基础架构" class="headerlink" title="阿里云负载均衡基础架构"></a>阿里云负载均衡基础架构</h2><p>负载均衡采用集群部署，可实现会话同步，以消除服务器单点故障，提升冗余，保证服务的稳定性。</p><p>阿里云当前提供四层（TCP协议和UDP协议）和七层（HTTP和HTTPS协议）的负载均衡服务。</p><ul><li>四层采用开源软件LVS（Linux Virtual Server）+ keepalived的方式实现负载均衡，并根据云计算需求对其进行了个性化定制。</li><li>七层采用Tengine实现负载均衡。Tengine是由淘宝网发起的Web服务器项目，它在Nginx的基础上，针对有大访问量的网站需求，添加了很多高级功能和特性。</li></ul><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/8c47d7f310214b3184714b66c75b88d2/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-8c47d7f310214b3184714b66c75b88d2-content-image-1541389955758-2RtYaM" alt="img"></p><p>如下图所示，各个地域的四层负载均衡实际上是由多台LVS机器部署成一个LVS集群来运行的。采用集群部署模式极大地保证了异常情况下负载均衡服务的可用性、稳定性与可扩展性。</p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/8c47d7f310214b3184714b66c75b88d2/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-8c47d7f310214b3184714b66c75b88d2-content-image-1541390115823-zXMyaq" alt="img"></p><p>LVS集群内的每台LVS都会进行会话，通过组播报文同步到该集群内的其它LVS机器上，从而实现LVS集群内各台机器间的会话同步。如下图所示，当客户端向服务端传输三个数据包后，在LVS1上建立的会话A开始同步到其它LVS机器上。图中实线表示现有的连接，图中虚线表示当LVS1出现故障或进行维护时，这部分流量会走到一台可以正常运行的机器LVS2上。因而负载均衡集群支持热升级，并且在机器故障和集群维护时最大程度对用户透明，不影响用户业务。</p><h1 id="分别访问两台云服务器"><a href="#分别访问两台云服务器" class="headerlink" title="分别访问两台云服务器"></a>分别访问两台云服务器</h1><p>本小节主要介绍：<strong>分别访问实验提供的两台云服务器ECS，观察有什么异同点</strong>。</p><p>1.点击左侧导航栏处的 <strong>实验资源</strong> ，弹框中能看到 <strong>云服务器ECS-1</strong> 和 <strong>云服务器ECS-2</strong> 的相关信息。</p><p>2.打开浏览器，在输入框中输入 <strong>实验资源</strong> 提供的 <strong>云服务器ECS-1 的 弹性IP</strong> ，页面如下图：</p><p>说明：正常情况下不会显示 <strong>后端服务器IP</strong>，此处是为了观察比较的便利性而设计的。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/54600e490f024713839e840b24c924bf/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-54600e490f024713839e840b24c924bf-content-image-1500426591685-DZCCY3" alt="img"></p><p>3.打开新的窗口，输入 <strong>云服务器ECS-2</strong> 的 <strong>弹性IP</strong> ，访问页面如下：</p><p><strong>说明</strong>：正常情况下不会显示 <strong>后端服务器IP</strong>，此处是为了观察比较的便利性而设计的。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/54600e490f024713839e840b24c924bf/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-54600e490f024713839e840b24c924bf-content-image-1500426614050-m62y6Y" alt="img"></p><p>4.比较两台ECS的访问结果，发现部署的网站内容相同，只是显示的后端服务器IP不同。</p><p><strong>说明</strong>：在真实场景下，负载均衡后端的服务器中部署的应用都是一致的。</p><h1 id="部署负载均衡后端服务器"><a href="#部署负载均衡后端服务器" class="headerlink" title="部署负载均衡后端服务器"></a>部署负载均衡后端服务器</h1><h3 id="在实验室页面，单击创建资源。"><a href="#在实验室页面，单击创建资源。" class="headerlink" title="在实验室页面，单击创建资源。"></a>在实验室页面，单击<strong>创建资源</strong>。</h3><ol><li>（可选）在实验室页面左侧导航栏中，单击<strong>云产品资源</strong>列表，可查看本次实验资源相关信息（例如IP地址、用户信息等）。</li></ol><p><strong>说明：</strong> 资源创建过程需要1~3分钟。</p><p>选择界面中的【<strong>Chromium网页浏览器</strong>】，进入登录页面。</p><p>输入资源提供的“子用户名称”和“子用户密码”登录。</p><p><img src="https://edu.aliyun.com/lab/files/courses/ccb6dfd9d7c14bd4b79a171f43a6e3b8/sections/9b8eaed5a8d54016a9da3a33b8d5296e/content/images/course-ccb6dfd9d7c14bd4b79a171f43a6e3b8-section-9b8eaed5a8d54016a9da3a33b8d5296e-content-image-1619081320524-klPTpf" alt="img"></p><p><img src="https://edu.aliyun.com/lab/files/courses/ccb6dfd9d7c14bd4b79a171f43a6e3b8/sections/9b8eaed5a8d54016a9da3a33b8d5296e/content/images/course-ccb6dfd9d7c14bd4b79a171f43a6e3b8-section-9b8eaed5a8d54016a9da3a33b8d5296e-content-image-1619081328949-xVdxgo" alt="img"></p><p>登录到界面：</p><p><img src="https://edu.aliyun.com/lab/files/courses/c33d6096c65b45d6a0ebe4f950fc769c/sections/6a0176bef3cb4387b44eabc702ff6ee8/content/images/course-c33d6096c65b45d6a0ebe4f950fc769c-section-6a0176bef3cb4387b44eabc702ff6ee8-content-image-1589425130205-1r0AQS" alt="img"></p><p>3）在阿里云管理控制台中，点击左侧导航栏的 <strong>产品与服务</strong> ，在弹出的页面中点击 <strong>负载均衡</strong> ，进入负载均衡控制台。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1640683138387-vBl6ys" alt="img"></p><p>\2. 通过如下步骤，进入本次实验提供的负载均衡实例的管理页面：</p><p>1）点击左侧栏的<strong>实例管理</strong>。</p><p>2）在地域信息栏中，选择本实验的 <strong>实验资源</strong> 提供的 <strong>地域</strong> 。</p><p>3）在 <strong>模糊搜索</strong> 右侧的搜索输入框中，输入本实验的 <strong>实验资源</strong> 提供的 <strong>负载均衡</strong> 实例的 <strong>实例ID。</strong></p><p>4）在下端的搜素结果中，点击实例右侧的 <strong>点我开始配置</strong>，进入负载均衡实例的管理页面。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1640683183591-6N9lGJ" alt="img"></p><p>\3. 通过如下步骤，配置监听规则的<strong>基本信息</strong>：</p><p>1）在弹出的页面中，选择负载均衡协议为<strong>HTTP</strong>，<strong>监听端口</strong>为 <strong>80</strong>；然后点击<strong>高级配置</strong>右侧的<strong>修改</strong>按钮：</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1640683224137-1jr4Xw" alt="img"></p><p>2）在展开的<strong>高级配置</strong>中，查看到默认<strong>会话保持</strong>的状态为<strong>关闭</strong>。不做任何修改，直接点击<strong>下一步；</strong></p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1640683245756-UeojUO" alt="img"></p><p>3）选择<strong>默认服务器</strong>下方的<strong>继续添加</strong>，将两台已创建的ECS实例添加到SLB后端。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034113289-nKBF4q" alt="img"></p><p>4）在弹出的页面中勾选两台已创建的ECS实例，并点击<strong>下一步</strong>；</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034179806-kxeSd9" alt="img"></p><p>5）在弹出的页面点击<strong>添加</strong>；</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034229137-XGOhp5" alt="img"></p><p>6）选择已添加的ECS实例的端口为 <strong>80</strong>，并点击<strong>下一步</strong>：</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034414783-3vO2Bi" alt="img"></p><p>\4. 在<strong>健康检查</strong> 配置中，不做任何修改，保持健康检查<strong>开启状态</strong>，点击<strong>下一步</strong>。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034615059-z1nEGH" alt="img"></p><p>5.配置完成后，点击<strong>提交</strong>。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034693365-w0VUeR" alt="img"></p><p>跳转到<strong>实例管理</strong>页面，查看到新创建的监听配置，处于<strong>运行中</strong>状态。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034901580-L1thla" alt="img"></p><h1 id="验证负载均衡工作原理"><a href="#验证负载均衡工作原理" class="headerlink" title="验证负载均衡工作原理"></a>验证负载均衡工作原理</h1><p>本小节主要内容如下：</p><ul><li>**<em>*验证负载均衡的工作原理*<em>；</em></em></li><li>**验证通过配置不同后端服务器权重，将用户的请求按比例分发到不同后端服务器；<br>  **</li><li><strong>验证在一台后端服务器开启会话请求时，请求在会话开启的时间内只会分发到这一台服务器。</strong></li></ul><p>**<br>**</p><p>\1. 此时，两台后端服务器的权重比例相同。通过如下步骤，验证负载均衡服务器是轮询访问后端云服务器ECS实例：</p><p>1）点击左侧 <strong>实例管理</strong> ，在右侧页面中的红框处看到负载均衡的 <strong>服务地址</strong>（也就是 <strong>实验资源</strong> 提供的 <strong>负载均衡</strong> 的 <strong>IP地址</strong>） ；</p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1640683367512-2FNP18" alt="7"></p><p>2）在浏览器中新建页面，并访问 <strong>负载均衡</strong> 的 <strong>服务地址</strong> 。界面显示的 <strong>后端服务器IP</strong> 为 <strong>云服务器ECS-1</strong>（或 <strong>云服务器ECS-2</strong>） 的 <strong>内网地址</strong> 。</p><p><strong>说明</strong>：界面显示的地址为内网地址，这是因为负载均衡访问后端ECS实例，是通过内网访问的。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1482732071055-IvPgyY" alt="img"></p><p>3）<strong>刷新</strong> 浏览页面，显示的 <strong>后端服务器IP</strong> 将发生变化，变为 <strong>云服务器ECS-2</strong>（或 <strong>云服务器ECS-1</strong>）的 <strong>内网地址</strong> ；</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1482732154630-aO6jWM" alt="img"></p><p>4）重复刷新操作，观察 <strong>后端服务器IP</strong> 是在两个云服务器的 <strong>内网地址</strong> 间轮流更换。</p><p>5）如上结果证明：负载均衡会将用户的请求发送到后端不同的服务器进行处理。这样，可以减轻单台服务器的负载压力，从而确保业务的持续性。</p><p>\2. 通过如下步骤，修改后端服务器权重，验证负载均衡向后端服务器发送请求的比例是按照权重的比例调整的。</p><p>1）返回 <strong>实例管理</strong> 页面，点击SLB实例名称进入实例管理页面；</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1585035180709-zMp3BG" alt="img"></p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"></p><p>2）选中 <strong>默认服务器组</strong> ，在服务器列表中，勾选下方的勾选框 ，然后点击 <strong>修改权重</strong> ；</p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1585035231762-pfqoQE" alt="img"></p><p>3）弹出对话框中，勾选 <strong>设置不同的权重</strong> 。设置两个实例的 <strong>权重</strong> 分别为 <strong>30</strong> ，<strong>90</strong> 。</p><p><strong>说明</strong>：通过如上的权重配置，用户通过负载均衡访问的时候，1/4的用户请求发送到一台后端服务器中，3/4的请求发送到另一台后端服务器中。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1585035294839-fLcHIP" alt="img"></p><p>4）完成如上配置后，点击 <strong>确定</strong> ，生效配置信息。可以查看到两台ECS实例的权重分别为<strong>30</strong> 和 <strong>90</strong>，并记录对应的ECS实例<strong>内网地址</strong>和<strong>弹性IP</strong>。</p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1585035607477-PB8TUL" alt="img"></p><p>5）浏览器中，刷新多次 <strong>负载均衡</strong> <strong>服务地址</strong> 的页面，并记录页面显示的 <strong>后端服务器IP</strong> 。可以发现：每4次刷新，将有3次访问 <strong>权重</strong> 为 <strong>90</strong> 的ECS实例，1次访问权重为 <strong>30</strong> 的ECS实例。</p><p>6）如上结果证明：用户可以根据实际情况调整负载均衡器的请求分发，一般将配置高的服务器设置的权重调高，配置较低的服务器设置的权重调低。这样可以避免在高并发时，配置较低的服务器因为压力较大服务异常的发生。</p><p>3.执行以下步骤，开启负载均衡的 会话保持 功能。</p><p>1）在<strong>实例管理</strong>页面，点击SLB的实例名称进入实例管理页面；并在<strong>监听</strong>页面点击<strong>修改监听配置。</strong></p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1640683506946-T0hr13" alt="8"><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1640683511274-ucpIdD" alt="9">**<br>**</p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img">2）在弹出的页面中，点击<strong>高级配置</strong>右侧的<strong>修改</strong>，设置<strong>开启保持</strong>的状态为<strong>已开启</strong>，然后点击<strong>下一步</strong>和<strong>提交</strong>。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1585038298518-2Xhp7l" alt="img"></p><p>3）提交修改后，点击监听名称，在弹窗中查看到SLB实例的会话保持显示<strong>已开启</strong>的状态 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1640683599751-tKqn3v" alt="12"></p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/d524a5ca920e4ba08c8d5d6f565d6148/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-d524a5ca920e4ba08c8d5d6f565d6148-content-image-1640683626826-xsZwM3" alt="13"></p><p>4.再次在浏览器中输入 负载均衡 的 IP地址 ，多次刷新，发现在会话保持的超时时间内请求只会分发到某一台ECS上（究竟是哪一台ECS没有规定），时间超出后，重新按照权重比例分发。</p><h1 id="验证负载均衡的健康检查"><a href="#验证负载均衡的健康检查" class="headerlink" title="验证负载均衡的健康检查"></a>验证负载均衡的健康检查</h1><p>本小节主要内容：<strong>开启健康检查后，模拟服务器出现故障，关闭某一台服务器，观察负载均衡请求分发情况</strong>。</p><p>1.重复刷新，在超时时间内，请求只会发送到其中一台ECS上。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/664beca3153647d5bcaa44ec5732b9e3/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-664beca3153647d5bcaa44ec5732b9e3-content-image-1500433126572-hpcZTN" alt="img"></p><p>\2. 我们关闭开启 <strong>会话保持</strong> 的那台ECS 。<strong>后端服务器</strong> 页面，<strong>已添加的服务器</strong> 中 ，选择下图红框对应的目标ECS实例，并点击进入该ECS管理控制台。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/664beca3153647d5bcaa44ec5732b9e3/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-664beca3153647d5bcaa44ec5732b9e3-content-image-1585040072971-0CM0aO" alt="img"></p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"></p><p>3.<strong>实例详情</strong> 页面 ，点击右上角处的 <strong>停止</strong> ，关闭当前ECS。</p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/664beca3153647d5bcaa44ec5732b9e3/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-664beca3153647d5bcaa44ec5732b9e3-content-image-1541419158135-fPaTXP" alt="img"></p><p>等待1分钟左右，实例的状态变为 <strong>已停止</strong> 。</p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/664beca3153647d5bcaa44ec5732b9e3/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-664beca3153647d5bcaa44ec5732b9e3-content-image-1541419192407-ZZGXKR" alt="img"></p><p>4.返回负载均衡管理控制台，在 <strong>默认服务器组</strong> 页面中点击左上角的 <strong>刷新</strong>，页面刷新后被停止的ECS的 <strong>状态</strong> 变为 <strong>已停止</strong>。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/664beca3153647d5bcaa44ec5732b9e3/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-664beca3153647d5bcaa44ec5732b9e3-content-image-1585040124356-V5ryXE" alt="img"></p><p><strong>监听</strong> 页面<strong>，</strong>也出现 <strong>异常</strong> 提示 。注意：由于检测需要时间，一般再1-2分钟后，状态才会变成异常；</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/664beca3153647d5bcaa44ec5732b9e3/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-664beca3153647d5bcaa44ec5732b9e3-content-image-1590395979581-Y24rnF" alt="img"></p><p><img src="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=6f5873d2cd6240f0a724c8d493b634b3" alt="img"></p><p>5.再次刷新浏览器中 <strong>负载均衡</strong> 的 <strong>IP地址</strong> ，此时，请求发送到 <strong>健康检查状态</strong> 为 <strong>正常</strong> 的ECS上。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/664beca3153647d5bcaa44ec5732b9e3/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-664beca3153647d5bcaa44ec5732b9e3-content-image-1500433222221-qIUiLe" alt="img"></p><p>6.结果证明，当某一台ECS出现异常后，负载均衡会自动将请求发送到健康检查状态正常的ECS上。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>问1：将停止的那台ECS重新开启，然后访问负载均衡的IP地址，观察访问的结果。为什么会这样呢？</p><p>答：因为负载均衡中依然开启了会话保持，所以请求会被转发到某一台ECS上（在规定的会话保持时间内）。</p><p>问2：如果两台ECS在不同的可用区，能否加载到负载均衡后端？若在不同地域呢？</p><p>答：负载均衡后端的服务器要求在同一地域，但可以在不同可用区。</p><p>问3： 如果需要对负载均衡后端的某台ECS实例A中的应用服务器进行升级，如何在不影响用户使用的前提下，平滑升级？</p><p>答：将需要升级的ECS的权重修改为0，请求即不会转发到该ECS上，然后进行升级；升级完成后重新修改它的权重。</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clouder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clouder-使用云储存OSS的API上传和下载文件</title>
    <link href="/2023/08/04/Clouder-%E4%BD%BF%E7%94%A8%E4%BA%91%E5%82%A8%E5%AD%98OSS%E7%9A%84API%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <url>/2023/08/04/Clouder-%E4%BD%BF%E7%94%A8%E4%BA%91%E5%82%A8%E5%AD%98OSS%E7%9A%84API%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><strong>实验概述</strong></p><p> 实验开始后，系统会自动去创建一台Linux ECS。且ECS实例已经部署了OSS python SDK。用户可以使用OSS Python SDK来访问OSS服务，包括上传文件，下载文件，查看文件列表等。默认这些程序是写在一个脚本文件里，通过Python程序可以执行。OSS上传方式大致可以分为两类：简单上传和分块上传。本实验通过OSS的Python SDK，使用简单上传的方式实现小文件的上传和下载；最后指导您实现如何去删除OSS Bucket。 </p><p><strong>实验目标</strong></p><p> 完成此实验后，可以掌握的能力有：</p><p>\1. 使用OSS python SDK来调用OSS API </p><p>\2. 掌握OSS简单上传的方式</p><p>\3. 掌握OSS分块上传的方式</p><p>\4. 使用OSS python SDK快速删除OSS Object</p><p><strong>学前建议</strong></p><p>\1. 了解Linux的基本命令操作；</p><p>\2. 了解Python语言的基本使用方法；</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>阿里云对象存储（Object Storage Service，简称OSS），是阿里云对外提供的海量、安全、低成本、高可靠的云存储服务。使用 OSS，您可以通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种结构化或非结构化数据文件。以下的术语为OSS相关的基本概念：</p><ul><li>Bucket，是一个用户用来管理所存储Object的存储空间。 每个用户可以拥有多个Bucket。Bucket的名称在OSS的范围内必须是全局唯一的，一旦创建之后无法修改名称。Bucket内部的Object数目是没有限制的。</li><li>Object，是OSS存储数据的基本单元，称为OSS的对象，也被称为OSS的文件。根据不同的上传方式，Object的大小限制是不一样的。Object由元信息（Object Meta），用户数据（Data）和文件名（Key）组成。Object由一个在Bucket内部唯一的Key来标示。Object操作在OSS上具有原子性，操作要么成功要么失败，不会存在有中间状态的Object。OSS保证用户一旦上传完成之后读到的Object是完整的，OSS不会返回给用户一个只上传成功了部分的Object。分片上传最大支持48.8TB的Object，其他的上传方式最大支持5GB。</li><li>Region，表示OSS的数据中心所在的区域，物理位置。 一旦指定之后就不允许更改，该Bucket下所有的Object都存储在对应的数据中心。</li><li>Endpoint，表示OSS对外服务的访问域名。OSS以HTTP REST API的形式对外提供服务，当访问不同的Region的时候，需要不同的域名。</li></ul><p>​    用户可以通过调用API，在任何应用、任何时间、任何地点上传和下载数据，也可以通过阿里云Web控制台对数据进行简单的管理。目前阿里云OSS支持如下几种语言版本的SDK调用API：Python SDK，Java SDK，Android SDK，iOS SDK，JavaScript SDK，.NET SDK，PHP SDK，Ruby SDK，C SDK，Go SDK，Media-C SDK。本实验中主要介绍如何使用Python SDK调用OSS API实现文件的简单上传，下载和删除等操作。</p><p>​    OSS作为对象存储提供商，常用的使用场景如下：</p><ul><li>适用于图片、音视频、日志等海量文件的存储，支持各种终端设备，Web网站程序和移动应用直接向OSS写入或读取数据，支持 <strong>流式写入</strong> 和 <strong>文件写入</strong> 两种方式。</li></ul><p><img src="https://edu.aliyun.com/lab/files/courses/afd734bef0c04ce6a192b8fe68acdb86/sections/f2da4e55518942deba29a1313363030d/content/images/course-afd734bef0c04ce6a192b8fe68acdb86-section-f2da4e55518942deba29a1313363030d-content-image-1471917948577-3Uppe2" alt="img"></p><ul><li>开发者不仅可以直接使用OSS，利用BGP带宽，实现超低延时的数据直接下载；OSS也可以配合阿里云CDN加速服务，为图片、音视频、移动应用更新分发，提供最佳体验等场景。</li></ul><p><img src="https://edu.aliyun.com/lab/files/courses/afd734bef0c04ce6a192b8fe68acdb86/sections/f2da4e55518942deba29a1313363030d/content/images/course-afd734bef0c04ce6a192b8fe68acdb86-section-f2da4e55518942deba29a1313363030d-content-image-1471918081495-Gnzgjc" alt="img"></p><ul><li>上传文件到OSS后，可以配合媒体转码服务(MTS)，图片处理服务（IMG）进行云端的数据处理。</li></ul><p><img src="https://edu.aliyun.com/lab/files/courses/afd734bef0c04ce6a192b8fe68acdb86/sections/f2da4e55518942deba29a1313363030d/content/images/course-afd734bef0c04ce6a192b8fe68acdb86-section-f2da4e55518942deba29a1313363030d-content-image-1471918231345-ddwSNY" alt="img"></p><h1 id="查看OSS环境"><a href="#查看OSS环境" class="headerlink" title="查看OSS环境"></a>查看OSS环境</h1><p>1.首先，查看本次实验提供的OSS存储环境。请通过云中沙箱 <strong>实验资源</strong> 提供的方式，请复制左侧的子用户名称 和 子用户密码，打开桌面上的Chromium浏览器。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651656.png" alt="img"> </p><p>在跳转的阿里云RAM登录界面，输入本次实验分配的 <strong>子用户名称</strong> 和 <strong>子用户密码</strong>。完成后，点击 <strong>登录</strong> ，访问阿里云管理控制台。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651703.png" alt="img"> </p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/469116e7c85c4f4b8a9b41042526da5e.png" alt="img"> </p><p>2.进入控制台后在左侧导航栏中找到<strong>对象存储OSS，</strong>进入OSS管理控制台。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/37d75fe4ad54452d9ff8795cb47ea0d0.png" alt="img"> </p><p>3.在OSS管理控制台的概览页面，点击Bucket列表，找到并点击与 <strong>实验资源</strong> 提供的 <strong>Bucket名称</strong> 一致的Bucket名，例如 <strong>lab-oss-897hd21</strong> ，进入Bucket的管理页面。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651911.png" alt="img"> </p><p>4.在 <strong>文件管理</strong> 页面中，进入 <strong>实验资源</strong> 分配的 <strong>Object 路径</strong> ，例如 <strong>S01099/u-xxxx</strong> ，查看到当前 OSS 的 Object 所在的路径 <strong>暂无数据</strong> 。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651937.png" alt="img"> </p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/a82a7afa50654902aec6bfb8f9be3af8.png" alt="img"> </p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/261cbea8fd3140939eadaca06399f9c2.png" alt="img"></p><h1 id="调用OSS-API上传小文件"><a href="#调用OSS-API上传小文件" class="headerlink" title="调用OSS API上传小文件"></a>调用OSS API上传小文件</h1><p>\1. OSS上传方式分为两类：简单上传和分块上传；其中，简单上传由于不支持断点续传，适合用于上传小文件；而分块上传支持断点续传，适合上传比较大的文件，一般超过100MB 的文件都推荐使用分块上传。 本小节中，使用OSS Python SDK 调用 OSS API，将用户本地的小文件上传到本次实验分配的 <strong>Object路径</strong> 中。 </p><p>2.首先，远程登录到 <strong>OSS Python环境</strong> 的ECS服务器，请使用本实验提供的ECS服务器的 <strong>外网地址</strong> ，<strong>用户名</strong> 和 <strong>密码</strong> 。</p><p><strong>说明：</strong>远程登录Linux系统ECS实例的详细步骤，请参考云中沙箱 <a href="https://edu.aliyun.com/lab/help?menuId=2-0&docName=doc-remote-connect"><strong>帮助文档</strong></a></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651689.png" alt="img"> </p><p>3.登录到 ECS 服务器后，在使用 OSS API 进行文件上传和下载之前，用户需配置阿里云账号的 AccessKeyID， AccessKeySecret 和 Endpoint 信息（均可从 <strong>实验资源</strong> 获取），以便于通过 OSS 的权限验证。在 ECS 命令行中，使用命令 <strong>cd aliyun-lab</strong>  进入 aliyun-lab 目录。然后，使用命令 <strong>vim configure.json</strong> ，configure.json文件用于提供调用 OSS API 时所需的公共参数。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651282.png" alt="img"> </p><p>按 <strong>i</strong> 键进入编辑状态，修改文件中如下的参数信息，完成后，键入 <strong>esc</strong> 退出编辑状态，并输入vim的编辑命令 <strong>:wq</strong> ，保存且退出。</p><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">id－参数值为本实验中，实验资源 分配的AK ID<span class="hljs-comment">;</span><br> <br>secret－参数值为本实验中，实验资源 分配的AK Secret<span class="hljs-comment">;</span><br> <br>endpoint－参数值为本实验中，实验资源 的“地域”对应的“外网Endpoint”数值。比如：提供的“地域”为“华东 <span class="hljs-number">1</span>(杭州)”，则选择“华东 <span class="hljs-number">1</span>(杭州)”的“外网Endpoint”。<br></code></pre></td></tr></table></figure><p>OSS 地域与外网 Endpoint 的对应关系如下表：</p><table><thead><tr><th><strong>地域</strong></th><th><strong>外网Endpoint</strong></th></tr></thead><tbody><tr><td>华东 1 (杭州)</td><td>oss-cn-hangzhou.aliyuncs.com</td></tr><tr><td>华东 2 (上海)</td><td>oss-cn-shanghai.aliyuncs.com</td></tr><tr><td>华北 1 (青岛)</td><td>oss-cn-qingdao.aliyuncs.com</td></tr><tr><td>华北 2 (北京)</td><td>oss-cn-beijing.aliyuncs.com</td></tr><tr><td>华南 1 (深圳)</td><td>oss-cn-shenzhen.aliyuncs.com</td></tr></tbody></table><p><img src="https://ucc.alicdn.com/pic/developer-ecology/f7df218412e24bdd9852ca8f8ec7dce9.png" alt="img"> </p><p>4.完成 OSS 的基本配置信息后，在 aliyun-lab 路径下，执行命令 <strong>vim object_upload.py</strong> ，修改脚本文件 object_upload.py 。此脚本通过调用 OSS API，上传本地文件 <strong>(__file_name：本地文件路径)</strong> 到 bucket 中，并重命名 object <strong>(__object_name：Bucket中Object名称)。</strong></p><p>在代码的 <strong>#调用OSS API的put_object()上传文件</strong> 下方，添加如下的代码，完成修改后，保存脚本并退出编辑页面。</p><p>注意：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">with</span> <span class="hljs-keyword">open</span>(__file_name,&#x27;rb&#x27;) <span class="hljs-keyword">as</span> fileobj:<br> <br>             bucket.put<span class="hljs-constructor">_object(<span class="hljs-params">__object_name</span>,<span class="hljs-params">fileobj</span>)</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651516.png" alt="img"> </p><p>5.执行如下命令，运行脚本程序。将本地文件 <strong>lab.txt</strong> 上传到本实验分配 OSS bucket 的 Object 路径下，并重命名为 <strong>lab_object.txt</strong> 。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">python <span class="hljs-keyword">object</span><span class="hljs-number">_u</span>pload.py &lt;oss bucket名称&gt; lab.txt &lt;oss <span class="hljs-keyword">object</span>路径&gt;/lab<span class="hljs-number">_</span><span class="hljs-keyword">object</span>.txt<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：请删除 &lt;oss bucket名称&gt;，并修改为实验资源分配的OSS <strong>Bucket名称</strong> ；删除 <strong>&lt;oss object 路径&gt;</strong> ，并修改为实验资源分配的OSS <strong>Object路径</strong>。若没有使用本实验提供的Bucket 或 Object 路径，可能会导致未知错误。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/6b62ccea04f24e3dbbebab6b91dddf21.png" alt="img"> </p><p>6.输入命令 cat lab.txt ，查看上传到OSS指定路径的文件内容：<strong>Hello first object!</strong> 。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651222.png" alt="img"> </p><p>7.返回 OSS 管理控制台，并进入 实验资源 分配的 Bucket 和该 Bucket 的Object 路径下，点击右上角的 ，刷新 Object 管理页面。此时，在 Object 径下，查看到通过Python SDK上传的文件 <strong>lab_object.txt</strong> 。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651608.png" alt="img"></p><h1 id="调用OSS-API下载小文件"><a href="#调用OSS-API下载小文件" class="headerlink" title="调用OSS API下载小文件"></a>调用OSS API下载小文件</h1><p>1.在真实的工作环境中，存储在 OSS 环境下的文件资源，可能由于业务需求，需要下载到本地，进行审计等。本小节将介绍如何将 OSS 中的对象文件通过 API 下载到本地服务器。</p><p>2.返回 ECS 服务器访问终端，在 ECS 的 aliyun-lab 目录下，执行命令 vim object_download.py ，修改脚本文件object_download.py 。此脚本通过调用 OSS API，下载 OSS的 bucket 中名称为__object_name 的 object 到本地，并重命名为 __local_name 。在代码的 <strong>#调用OSS API的get_object_to_file()下载object</strong> 下方。添加如下的代码，完成修改后，保存脚本。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">bucket.get<span class="hljs-constructor">_object_to_file(<span class="hljs-params">__object_name</span>,<span class="hljs-params">__local_name</span>)</span><br></code></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/aa02ed6267e745059a8e1b3248c78aba.png" alt="img"> </p><p>3.执行如下命令，将 OSS 存储的文件 <strong>lab_object.txt</strong> 下载到本地,并重命名为 <strong>lab_local.txt</strong> 。下载成功后，执行命令 ls ，列出当前目录下所有的文件，可以看到文件lab_local.txt 已经保存在当前目录下。请注意替换 <strong>&lt;oss bucket 名称&gt;</strong> 和 <strong>&lt;oss object路径&gt;</strong> 为 <strong>实验资源</strong> 提供的信息。</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">python object_download.py <span class="hljs-attribute">&lt;oss bucket 名称&gt;</span> <span class="hljs-attribute">&lt;ossobject路径&gt;</span>/lab_object.txt lab_local.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651918.png" alt="img"> </p><p>4.执行命令 cat lab_local.txt 和 cat lab.txt ，分别查看原文件与下载后的文件，对比两个文件中的内容，可以发现两个文件中的内容一致，证明 object 下载并成功保存到本地。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651979.png" alt="img"></p><h1 id="调用OSS-API删除Object"><a href="#调用OSS-API删除Object" class="headerlink" title="调用OSS API删除Object"></a>调用OSS API删除Object</h1><p>1.在真实的生产环境中，由于 OSS 主要用于存储对象文件等。因此，为了避免大量的垃圾文件存在，建议用户对垃圾资源进行清理，这样不仅可以节约资源也可以节约用户在存储服务中的开销。本小节中，用户将体验如何通过调用OSS API，清理垃圾 Object 资源。</p><p>2.返回ECS服务器访问终端界面，然后，执行 vim object_delete.py ，修改脚本文件object_delete.py 。此脚本通过调用 OSS API ，删除 OSS Bucket 中的 object。在代码的 <strong>#调用OSS APIbatch_delete_objects()，批量删除objects</strong> 下方。添加如下的代码，完成修改后，保存脚本。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">result</span> <span class="hljs-operator">=</span>bucket.batch_delete_objects([__object_name])<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651571.png" alt="img"> </p><p>  执行命令 python object_delete.py &lt;Bucket 名称&gt; &lt;Object路径&gt;/lab_object.txt 。删除 bucket 中的指定路径的 object 。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651907.png" alt="img"> </p><p>3.此时，浏览器返回OSS管理控制台的 <strong>Object管理</strong> 页面，并点击右上角的 <strong>刷新</strong> ，将会看到本次实验提供的 OSS 环境中，没有任何 Object 数据。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/189acc897c5a4782b853071e6b422f86.png" alt="img"> </p><p>至此，完成本实验的全部操作，下一章中将对 OSS 的基础操作进行补充说明。</p><h1 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h1><h2 id="创建OSS-Bucket"><a href="#创建OSS-Bucket" class="headerlink" title="创建OSS Bucket"></a>创建OSS Bucket</h2><p>1.在真实的生产工作环境中，用户在上传或者管理 OSS 中的存储文件之前，首先需要在 OSS 中创建一个 Bucket，也就是 OSS 的存储空间。</p><p>2.在 ECS 服务器访问终端界面中，执行命令： cd aliyun-lab/ ，进入aliyun-lab/ 目录下。输入命令：vim bucket_create.py ，修改脚本文件 bucket_create.py 。修改创建 bucket 的 python 脚本。用户可以使用此脚本调用OSS 创建Bucket的 API。在代码的 <strong>#调用OSS API的create_bucket()创建bucket</strong> 下方。添加如下的代码，完成修改后，保存并退出。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">result</span> <span class="hljs-operator">=</span>bucket.create_bucket()<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：确保插入的代码，与上下文中非注释的代码缩进一致。否则运行脚本时会报错。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651339.png" alt="img"> </p><p>执行命令：pythonbucket_create.py lab ，其中 <strong>lab</strong> 为用户自定义的 bucket 名称，运行脚本程序，创建一个新的bucket <strong>lab-xxxx</strong> 。</p><p><strong>注意</strong>：创建的新bucket名称为：&lt;用户输入的自定义bucket名称&gt;－&lt; Access Key ID信息&gt;。这是由于 OSS bucket 全局唯一，避免bucket名称已存在而导致创建错误,此脚本会自动将 Access KeyID 信息，作为 bucket 名称的后缀。输入 bucket 名称时，必须符合如下的 Bucket 命名规则，否则，无法成功创建 bucket。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651736.png" alt="img"> </p><p>3.访问OSS控制台，可以在页面中看到新建的 bucket。同时，在右侧的页面中显示当前 bucket 里面还没有保存任何数据。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/6a6738f5cef949e7999e51ea2d31235d.png" alt="img"> </p><p>4.用户不仅可以通过如上的执行脚本的方式创建 Bucket ，也可以通过管理控制台新建 Bucket 。在阿里云 OSS 管理控制台，点击 Bucket 栏右侧的 <strong>新建</strong> ，弹出 Bucket 创建对话框。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/35968af55bc446c3b210f50d0600ed12.png" alt="img"> </p><p>在弹出的对话框中，输入如下参数信息，完成后，点击确定。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BucketName：aliyunlab004</span><br><span class="hljs-keyword"></span>地域：华东<span class="hljs-number">2</span><br>同城冗余存储：关闭<br>版本控制：不开通<br>读写权限：私有<br>服务端加密方式：无<br>实时日志查询：不开通<br>定时备份：不开通<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651672.png" alt="img"> </p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651728.png" alt="img"> </p><p><strong>注意</strong>：请遵循 Bucket 的命名规则，且 Bucket 名称全局唯一。</p><h2 id="使用OSS管理控制台上传文件"><a href="#使用OSS管理控制台上传文件" class="headerlink" title="使用OSS管理控制台上传文件"></a>使用OSS管理控制台上传文件</h2><p>复制链接至浏览器中下载</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//university-labfileapp.oss-cn-hangzhou.aliyuncs.com/<span class="hljs-variable">%E4</span><span class="hljs-variable">%BD</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%94</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%E4</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%91</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%98</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%82</span><span class="hljs-variable">%A8OSS</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%84</span>API<span class="hljs-variable">%E4</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%8</span>A<span class="hljs-variable">%E4</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%92</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%E4</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%E8</span><span class="hljs-variable">%BD</span><span class="hljs-variable">%BD</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%87</span><span class="hljs-variable">%E4</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%B6</span>/<span class="hljs-variable">%E9</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%91</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%AB.jpg</span><br></code></pre></td></tr></table></figure><p>1.用户不仅可以通过 OSS API 上传本地文件到 OSS 服务指定 Bucket，也可以通过管理控制台上传本地文件到 OSS 指定 Bucket 的目录下。</p><p>2.首先，访问OSS管理控制台。点击页面顶部导航栏的 <strong>产品与服务</strong>，然后，搜索<strong>对象存储OSS，点击</strong>进入OSS管理页面。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/9238c4ae3e134eefbc355cfcf3ddaabf.png" alt="img"> </p><p>3.在 OSS 管理控制台的概览页面中，点击与 <strong>实验资源</strong> 分配的 <strong>Bucket名称</strong> 相同的 Bucket。例如：实验资源分配的 OSS <strong>Bucket名称</strong> 为 <strong>lab-oss-897hd21</strong> ，则点击 <strong>lab-oss-897hd21</strong> ，找到左侧页面的 <strong>文件管理</strong> ，在文件管理页面找到实验文件夹 <strong>S01099</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651410.png" alt="img"> </p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651855.png" alt="img"> </p><p>在 S01121 的文件夹中，点击云中沙箱分配的 <strong>二级Object路径</strong> ，也就是，若用户分配的 <strong>Object路径</strong> 为 <strong>S01099/u-xxx</strong> ，则点击 <strong>u-xxx</strong> ,进入 S01099/u-xxx Object 路径中。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651246.png" alt="img"> </p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651360.png" alt="img"> </p><p>在 Object 管理的列表中，用户可以在第一行中，查看到当前 Object 路径。此时，<strong>实验资源</strong> 分配的 Object 路径下，没有任何数据。点击 <strong>上传文件</strong> ，弹出上传文件的对话框，选择上传文件的本地路径。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/3aa7c78f622f43cba9fbbef2d3f8a090.png" alt="img"> </p><p>点击<strong>扫描文件</strong>，进入本地上传文件路径，然后，选中文件，并点击打开。将本地文件上传到 OSS 管理控制台。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651280.png" alt="img"> </p><p>说明：点击本节左上角的附件部分，就可以下载本节中使用的图片黑猫.jpg 。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/f614c75c7eb348658d1929c6e53b034f.png" alt="img"> </p><p>可以在控制台看到名称为黑猫的.jpg的文件已经上传，点击上传文件</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651718.png" alt="img"> </p><p>点击上传后，可在任务列表中看到上传记录。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651256.png" alt="img"> </p><p>4.上传成功后，可以在 <strong>文件管理</strong> 页面看到该图片。</p><p><strong>注意</strong>：在网络不稳定或者上传文件较大的情况下，建议学员使用OSS 断点续传的方式，具体实现方式，请参考自助实验 <a href="https://edu.cloudcare.cn/courses/a342a99294ed4efcb7301495d777bd98/detail"> </a><a href="https://edu.cloudcare.cn/courses/a342a99294ed4efcb7301495d777bd98/detail">SL006 </a><a href="https://edu.cloudcare.cn/courses/a342a99294ed4efcb7301495d777bd98/detail">使用OSS处理大文件之断点续传</a> 。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/15491e96e39147ed9d6f4a4790e0890f.png" alt="img"></p><h2 id="使用OSS管理控制台查看Object文件"><a href="#使用OSS管理控制台查看Object文件" class="headerlink" title="使用OSS管理控制台查看Object文件"></a>使用OSS管理控制台查看Object文件</h2><p>1.完成上传后，用户可以在 OSS 管理控制台查看上传的图片信息。点击<strong>黑猫.jpg</strong> ，页面右侧弹出预览页面，用户可以查看到上传的图片信息。 若希望其他用户在某个时间段，可以查看图片信息。点击 <strong>黑猫.jpg</strong> 右侧的 <strong>复制url ,</strong> 默认链接的有效时间为3600秒，用户可以自定义有效时间。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651615.png" alt="img"> </p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/186536c60b6b4732960c11478a1190ce.png" alt="img"> </p><p>2.在浏览器中，打开一个空白页面，并将 <strong>Object地址</strong> 粘贴到地址栏，就可以下载该图片。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651079.png" alt="img"></p><h2 id="使用OSS管理控制台删除Object文件"><a href="#使用OSS管理控制台删除Object文件" class="headerlink" title="使用OSS管理控制台删除Object文件"></a>使用OSS管理控制台删除Object文件</h2><p>1.用户不仅可以通过调用 OSS API 删除文件，也可以通过 OSS管理控制台删除 OSS Bucket 中存储的文件。</p><p>2.返回OSS管理控制台，在<strong>Object管理</strong>页面，点击<strong>黑猫.jpg</strong>右侧的<strong>更多</strong>，选择<strong>彻底删除</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651513.png" alt="img"></p><p>在弹出的提示对话框中，点击 <strong>确定</strong>，则删除 <strong>黑猫.jpg</strong> 文件。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651802.png" alt="img"> </p><p>3.此时，Object路径下，没有 <strong>黑猫.jpg</strong> 文件。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651832.png" alt="img"></p><h2 id="删除OSS-Bucket"><a href="#删除OSS-Bucket" class="headerlink" title="删除OSS Bucket"></a>删除OSS Bucket</h2><p>1.由于一个阿里云账号最多仅能创建 30 个 Bucket，因此，在真实的生产环境中，若某个 Bucket 不再使用，强烈建议用户删除此 Bucket。但是，在删除此 Bucket 前，请务必清空 Bucket 中的所有 Object 以及 <strong>碎片</strong>。若 Bucket 不为空，则无法删除 Bucket。本小节将介绍如何通过调用 OSS API 删除一个空的 OSS Bucket。</p><p><strong>说明：</strong>本实验仅提供删除的Python脚本文件，但不提供实验环境。</p><p>2.在 ECS 服务器访问终端界面中，执行命令：cd aliyun-lab/ ，进入aliyun-lab/目录下，输入命令：vim bucket_delete.py ，修改脚本文件bucket_delete.py 。修改删除bucket的python 脚本。用户可以使用此脚本调用 OSS 删除Bucket的 API。在代码的 <strong>#调用delete_bucket()删除bucket</strong> 下方。添加如下的代码，完成修改后，保存脚本。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">bucket.delete_bucket<span class="hljs-comment">()</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651307.png" alt="img"> </p><p>3.执行命令 python bucket_delete.py &lt;Bucket 名称&gt; ，例如，某空 Bucket 名为 <strong>lab-xxxx</strong> 。运行结束，提示成功删除 bucket 。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651328.png" alt="img"> </p><p>4.访问阿里云 OSS 管理控制台，并在 <strong>概览</strong> 页面中，没有上一小节中创建的 Bucket，证明 Bucket 已删除。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651992.png" alt="img"> </p><p>5.用户不仅可以通过调用 API 删除 Bucket，也可以在阿里云 OSS 管理控制台直接删除 Bucket。点击对应的bucket进入bucket控制台界面，左侧的基础设置。</p><p>滑动界面到最下方，可以看到删除bucket，点击删除bucket。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/d1ee510b778a420cb315e19f34a27d2c.png" alt="img"> </p><p>在弹出删除提示对话框中，点击 <strong>确定</strong> ，删除 Bucket。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>  <strong>问：</strong>在第 2 章第 3 小节 <strong>调用OSS API上传小文件</strong> 中，执行 python bucket_create.py lab 报错。</p><p>  答：请检查 configure.json 文件，其中的 <strong>id</strong> ， <strong>secret</strong> 参数值必须为 <strong>实验资源</strong> 提供的 <strong>AK ID</strong> 和 <strong>AK Secret</strong> ；参数 <strong>endpoint</strong> 使用的 <strong>地域</strong> 必须与 <strong>实验资源</strong> 提供的 <strong>地域</strong> 相同。若如上配置信息正确，仍旧报错。请发送报错的截图给云中沙箱客服(架构云:培训)，届时，会有沙箱的工作人员为您解答问题。</p><p><strong>说明：我们会不定期整理并更新用户的常见问题，供学员参考和学习。</strong></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clouder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clouder-云储存OSS使用初体验</title>
    <link href="/2023/08/04/Clouder-%E4%BA%91%E5%82%A8%E5%AD%98OSS%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2023/08/04/Clouder-%E4%BA%91%E5%82%A8%E5%AD%98OSS%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p><strong>实验概述</strong></p><p> 开始实验后，系统会自动去创建一台Linux ECS。其中，创建的ECS中已经部署了web应用和OSS python SDK。在本实验中，已创建的ECS作为web服务器，浏览器中直接访问其IP地址会显示包含四个小图片的页面，并且四个图片都保存在ECS本地。通过调用OSS API将四个图片上传到OSS中，同时删除保存在ECS本地的四个图片，此时访问ECS IP将会看到页面中没有图片可以显示。为了在页面中显示原有的四个图片，实验中需要修改web应用服务器根目录下默认访问页面中的图片地址，将图片地址修改为四个图片分别在OSS中的访问地址。</p><p><img src="https://edu.aliyun.com/lab/files/courses/intro/bbc64b08cb864318a26042065923c0a7/images/course-bbc64b08cb864318a26042065923c0a7-intro-image-1472544039736-R3HSOT" alt="img"></p><p><strong>实验目标</strong></p><p> 完成此实验后，可以掌握的能力有：</p><p>\1. 通过阿里云管理控制台管理对象存储服务OSS</p><p>\2. 在实际的web开发中使用对象存储服务OSS存储页面中的图片</p><p>\3. 调用OSS API上传图片</p><p><strong>学前建议</strong></p><p>\1. 掌握Linux基本命令；</p><p>\2. 了解OSS的基本概念</p><p>阿里云对象存储（Object Storage Service，简称OSS），是阿里云对外提供的海量、安全、低成本、高可靠的云存储服务。用户可以通过调用API，在任何应用、任何时间、任何地点上传和下载数据，也可以通过用户Web控制台对数据进行简单的管理。OSS适合存放任意文件类型，适合各种网站、开发企业及开发者使用。</p><p>​    阿里云OSS图片处理服务（Image Service，简称 IMG） ，是阿里云OSS对外提供的海量、安全、低成本、高可靠的图片处理服务。用户将原始图片上传保存在OSS上，通过简单的 RESTful 接口，在任何时间、任何地点、任何互联网设备上对图片进行处理。图片处理服务提供图片处理接口，图片上传请使用OSS上传接口。基于IMG，用户可以搭建出跟图片相关的服务。图片服务处理的图片来自于OSS，所以图片的上传实际是上传到OSS的同名Bucket中。 </p><p>​    在真实的工作场景中，一般将图片、音频、视频等存储到OSS服务中，这样可以极大的提高用户的页面访问速度。</p><h1 id="查看图片分享网站"><a href="#查看图片分享网站" class="headerlink" title="查看图片分享网站"></a>查看图片分享网站</h1><p>\1. 本小节将展示一个在ECS“图片分享网站”上已搭建的图片分享网站，以及图片分享网站的源码。</p><p>\2. 首先，在浏览器中新建一个页面。然后，在浏览器的地址栏中，输入本次实验分配的ECS实例 <strong>弹性IP</strong>。查看到当前页面中显示1张“花园”的图片，该图片实际是由4张小图片组成的。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651122.png" alt="img"> </p><p>\3. 远程登录到ECS服务器，查看图片并分享网站的源码。登录信息请使用本实验 <strong>实验资源</strong> 提供的ECS服务器的 <strong>外网地址</strong>，<strong>用户名和</strong> <strong>密码</strong>。</p><p><strong>说明</strong>：本实验ECS服务器为 <strong>Linux操作系统</strong>，因此远程登录ECS实例的详细步骤，请参考云中沙箱<a href="https://edu.aliyun.com/lab/help?menuId=2-0&docName=doc-remote-connect">帮助文档</a>远程连接Linux系统</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/06cb5c4059a840598c41e02e29ac5e24.png" alt="img"> </p><p>4.登录到ECS服务器后，执行如下命令，进入网站系统的根目录。</p><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle"># cd <span class="hljs-regexp">/alidata/</span>www/<span class="hljs-keyword">default</span> <br></code></pre></td></tr></table></figure><p>然后，使用如下查看命令，查看保存在根目录下的四张图片<strong>01.png，02.png，03.png和04.png</strong>，也就是图片分享网站所展示的4张小图片。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651652.png" alt="img"> </p><p>​    在浏览器中，新建一个页面，并在地址栏中输入 <strong>&lt;ECS实例外网地址&gt;/01.png</strong>，可以查看到01.png的图片内容。同理，可以查看”02.png”,”03.png”以及“04.png”的图片内容。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651826.png" alt="img"> </p><p>5.使用如下命令，查看网站首页的源码，可以看到图片分享网页中显示的图片，是从网站根目录 <strong>/alidata/www/default</strong> 中，读取图片 <strong>01.png，02.png，03.png 和 04.png</strong>拼接的。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> <span class="hljs-built_in">index</span>.html<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651563.png" alt="img"></p><h1 id="上传图片文件"><a href="#上传图片文件" class="headerlink" title="上传图片文件"></a>上传图片文件</h1><p>\1. 本小节将存储在本地的图片上传到OSS Bucket中，从而，图片分享网站将从OSS Bucket中读取图片，本地无需保存图片。</p><p>\2. 在ECS实例的 <strong>/alidata/www/default</strong> 目录中，执行如下命令，进入 <strong>cfg.json</strong> 的编辑页面，并修改OSS的配置信息。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># vim cfg.json</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651889.png" alt="img"> </p><p>在编辑页面中，修改如下参数信息。</p><p>•  <strong>id</strong>：云中沙箱 <strong>实验资源</strong> 分配的 <strong>AK ID</strong> 值；</p><p>•  <strong>secret</strong>：云中沙箱 <strong>实验资源</strong> 分配的 <strong>AK</strong> <strong>Secret</strong> 值</p><p>•  <strong>endpoint</strong>：请根据下面的 <strong>OSS地域与Endpoint对应关系表</strong>，输入 <strong>实验资源</strong> 所分配 <strong>地域</strong> 相对应的 <strong>外网Endpoint</strong> 。例如：分配的 地域 为 <strong>华东2（上海）</strong>，则输入 <strong>oss-cn-shanghai.aliyuncs.com</strong>。</p><p>•  <strong>bucket</strong>：云中沙箱 <strong>实验资源</strong> 分配的 <strong>OSS资源</strong> <strong>Bucket 名称</strong></p><p>•  <strong>object_dir</strong>：云中沙箱 <strong>实验资源</strong> 分配的 <strong>OSS资源</strong> <strong>Object路径</strong>。</p><p>完成后，首先按 <strong>esc键</strong> 退出编辑状态，然后输入下面命令保存并退出编辑页面。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">：<span class="hljs-keyword">wq</span> <br></code></pre></td></tr></table></figure><p>OSS地域与外网Endpoint对应关系表：</p><p><strong>地域</strong>         <strong>外网Endpoint</strong></p><p>华东 1 (杭州)  oss-cn-hangzhou.aliyuncs.com</p><p>华东 2 (上海)  oss-cn-shanghai.aliyuncs.com</p><p>华北 1 (青岛)  oss-cn-qingdao.aliyuncs.com</p><p>华北 2 (北京)  oss-cn-beijing.aliyuncs.com</p><p>华南 1 (深圳)  oss-cn-shenzhen.aliyuncs.com</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/fe5161851db442c9a17fe84342e650b0.png" alt="img"> </p><p>\3.   执行如下命令，将01.png上传到OSS，该脚本使用OSS 提供的API接口put_object_from_file()将本地文件上传到 <strong>实验资源</strong> 分配的 <strong>Object路径</strong> 中。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> oss_upload.<span class="hljs-keyword">py</span> <span class="hljs-number">01</span>.png<br></code></pre></td></tr></table></figure><p>然后，执行相同命令，只把 01.png 改为 02.png 等，将02.png、03.png 和 04.png三个图片分别上传到OSS。接下来，用户将访问OSS管理控制台，并查看上传到OSS的文件。</p><p>说明：通过 Python SDK 的方式上传本地文件到OSS的具体方法，请参考<a href="https://edu.cloudcare.cn/courses/afd734bef0c04ce6a192b8fe68acdb86/detail">实验 SL003 使用OSS API上传和下载文件</a>。</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/acdfa609cf8b41bdb8845b4081b8182a.png" alt="img"> </p><p>\4.   首先，请复制左侧的<strong>子用户名称</strong>和<strong>子用户密码</strong>，打开桌面上的Chromium浏览器。</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/8dbd6691102049739815bdf5e5933eef.png" alt="img"> </p><p>在用户名文本框输入<strong>子用户名称</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651938.png" alt="img"> </p><p>在用户密码文本框输入<strong>子用户密码</strong>，点击<strong>登陆</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651970.png" alt="img"> </p><p>登陆成功后，点击左上角 <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651059.png" alt="img"> </p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651077.png" alt="img"> </p><p>在搜索框输入<strong>OSS</strong>，并点击<strong>对象存储OSS</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651044.png" alt="img"> </p><p>5.从而进入OSS管理控制台。</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/6ee6eaf7c3e54c54bd1904fc12b94106.png" alt="img"> </p><p>\6. 进入OSS管理控制台后，在<strong>Bucket列表</strong> 栏中，点击 <strong>实验资源</strong> 提供的 <strong>Bucket名称</strong>，例如 <strong>lab-oss-898hd2</strong>，进入 <strong>lab-oss-898hd2 Bucket</strong>管理页面。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651967.png" alt="img"> </p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651147.png" alt="img"> </p><p>7.点击<strong>文件管理–文件列表</strong>，可以查看到当前Object列表中存在一个或多个文件夹。点击 <strong>实验资源</strong> 分配的一级 <strong>Object路径</strong>。例如：用户分配的 <strong>Object路径</strong> 为 **SL01097/u-xxx/**，则 <strong>SL01097</strong> 为一级Object路径。点击 <strong>SL01097</strong>，进入Object “SL01097” 路径中。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651012.png" alt="img"> </p><p>在“SL01097”的Object路径中，点击云中沙箱分配的二级 <strong>Object路径</strong>。例如：用户分配的 <strong>Object路径</strong> 为 <strong>SL01097/u-xxx/<strong>，则 <strong>u-xxx</strong> 为二级Object路径。点击 <strong>u-xxx</strong> 进入</strong>Object SL01097/u-xxx</strong> 路径中。</p><p>此时，在<strong>Object管理</strong>的列表的第一行中，用户可以查看到当前Object路径信息。在 <strong>Object管理</strong> 的Object列表中，展示已上传并保存到“SL 01097/u-xxx/”路径下的4张图片：<strong>01.png，02.png，03.png，04.png。</strong></p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/6fcf17b99cbf4a0da5076063c0e847fa.png" alt="img"> </p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651103.png" alt="img"></p><h1 id="使用OSS存储图片分享网站"><a href="#使用OSS存储图片分享网站" class="headerlink" title="使用OSS存储图片分享网站"></a>使用OSS存储图片分享网站</h1><p>\1.  本小节中，搭建的图片分享网站将图片等静态资源，存储在OSS中，并直接从OSS中读取。</p><p>\2.  返回ECS实例终端页面，执行下面命令进入alidata/www/default目录。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># cd <span class="hljs-regexp">/alidata/</span>www/<span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><p>然后执行如下命令，删除当前目录中的所有“.png”文件，也就是，图片分享网站中读取的4张图片<strong>01.png， 02.png, 03.png 和 04.png</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">rm</span> -rf *.png</span><br></code></pre></td></tr></table></figure><p>执行查看文件命令，查看当前目录中无图片文件，证明图片已删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br></code></pre></td></tr></table></figure><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/5813d7df4bc84c358b8eb58cdf54acaf.png" alt="img"> </p><p>\3.  打开（在浏览器的地址栏中，输入 <strong>实验资源</strong> 分配的<strong>ECS 外网地址</strong> 并访问）或刷新图片分享网站主页面，查看到当前页面中所有图片均无法正常显示。这是因为图片分享网站读取的是本地图片文件，而本地存储的图片文件已被删除，因此无法读取到图片信息。</p><p>注意：若访问页面仍旧可以显示图片，可能是由于浏览器缓存问题，建议清理下浏览器的缓存或者换一个浏览器查看ECS服务器主页。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651975.png" alt="img"> </p><p>\4.   接下来，将重新配置index.html中的图片访问信息，按照以下步骤将图片链接修改为上传到OSS的图片的URL访问地址：</p><p>\1)  返回OSS管理控制台，进入云中沙箱 <strong>实验资源</strong> 分配的 <strong>Object路径</strong> 中，获取图片的URL访问地址。点击 <strong>01.png。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651105.png" alt="img"> </p><p>点击<strong>设置读写权限</strong></p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/648a4930537e4d0ca6ae5bdfa3777246.png" alt="img"> </p><p>选择<strong>公共读</strong>，在点击<strong>确定</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651912.png" alt="img"> </p><p>找到并点击右侧弹出框的 <strong>复制文件URL</strong>。</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/b8a486b214c44de2b4b14b515ad0ffb2.png" alt="img"> </p><p>按照以上步骤依次设置02.png、03.png、04.png</p><p>2)执行如下命令返回ECS服务器的**/alidata/www/default**目录下，并进入服务器访问首页 <strong>index.html</strong> 的编辑界面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /alidata/www/default</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vim index.html</span><br></code></pre></td></tr></table></figure><p> \3)  在**<!-- 图片1 -->**下，找到第一张图片的链接参数 <strong>src=”01.png</strong>“，删除01.png，并粘贴上面步骤中复制的上传到OSS <strong>01.png</strong> 图片的访问 地址。 同理，修改 <strong>02.png，03.png，04.png</strong>的链接地址为OSS的存储地址。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041651313.png" alt="img"> </p><p>\4)  完成所有图片的修改后，点击 esc键 退出编辑状态，执行以下命令保存并退出编辑页面。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">：<span class="hljs-keyword">wq</span><br></code></pre></td></tr></table></figure><p>\5.   在浏览器中，刷新 ECS实例的 <strong>外网地址</strong> 的访问页面，页面将再次显示 <strong>花园</strong> 的图片，说明现在网站可以使用存储在OSS上的图片来显示页面。</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/d050875fd89b4b719b60237482d64cc1.png" alt="img"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clouder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clouder-数据库上云迁移的实现</title>
    <link href="/2023/08/04/Clouder-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8A%E4%BA%91%E8%BF%81%E7%A7%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/08/04/Clouder-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8A%E4%BA%91%E8%BF%81%E7%A7%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>实验概述</strong></p><p>开始实验后，系统会自动创建一台自建MySQL的 <strong>源数据库</strong> ECS 实例和一台 <strong>目标数据库</strong> RDS。首先，远程登陆到 <strong>源数据库</strong> ，查看源数据库中的信息。然后，登陆到阿里云管理控制台，建立目标数据库。最后，使用 <strong>数据传输</strong> 服务，实现ECS自建数据库迁移到目标数据库RDS。</p><p><img src="https://edu.aliyun.com/lab/files/courses/intro/f236e1c7c40d4959bd9f9cf569a246cb/images/course-f236e1c7c40d4959bd9f9cf569a246cb-intro-image-1488438126173-rCeROW" alt="img"></p><p><strong>实验目标</strong></p><p>完成此实验后，可以掌握的能力有：</p><p>\1. 建立RDS数据库</p><p>\2. 通过数据传输服务，将ECS上自建MySQL数据库迁移到RDS数据库。</p><p><strong>学前建议</strong></p><p>\1. 了解RDS数据库的基本概念</p><p>\2. 了解ECS的基本概念</p><h1 id="查询源数据库"><a href="#查询源数据库" class="headerlink" title="查询源数据库"></a>查询源数据库</h1><p> 本小节主要内容：登录本地部署的MySQL数据库实验环境，并查看本地MySQL源数据库中的信息。</p><p>\1. 通过本地远程连接服务，远程登录到 <strong>我的实验资源</strong> 中的 <strong>MySQL源数据库</strong> ECS实例。</p><p>说明：远程连接的详细操作步骤，请参考 <strong>帮助文档</strong> 的 <a href="https://edu.aliyun.com/lab/help?menuId=2-0&docName=doc-remote-connect">远程连接服务器ECS</a> 中 远程访问Linux系统。登录时，请使用 <strong>我的实验资源</strong> 提供ECS实例的 <strong>弹性IP</strong> ，<strong>用户</strong> 和 <strong>密码</strong> 。 </p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041632564.png" alt="img"> </p><p>\2. 运行如下命令，登录到ECS实例的MySQL数据库：</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -u root -p<br><br><span class="hljs-attribute">Enter</span> password:  （输入<span class="hljs-number">123456</span>，输入的密码不会显示）<br></code></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/f5b1152b12114ee1b3092b4d575f31ae.png" alt="img"> </p><p>\3. 通过如下操作，查看源数据库bakery、其中的表customer和product，以及表中的数据。</p><p>1）执行如下命令，查看数据库信息。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mysql&gt; show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/b71de00c736447c786822f098c0ff307.png" alt="img"> </p><p>2）执行如下命令，切换数据库为bakery：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mysql&gt; use bakery<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041632645.png" alt="img"> </p><p>3）执行如下命令，查看表中数据：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">columns</span> <span class="hljs-keyword">from</span> customer;<br><br>mysql&gt; <span class="hljs-keyword">show</span> <span class="hljs-keyword">columns</span> <span class="hljs-keyword">from</span> product;<br><br>mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> customer;<br><br>mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041632738.png" alt="img"></p><h1 id="建立目标数据库"><a href="#建立目标数据库" class="headerlink" title="建立目标数据库"></a>建立目标数据库</h1><p> 本小节主要介绍：在RDS管理控制台上，创建数据库和数据库账号</p><p>\1. 首先，通过如下操作步骤，登录到阿里云RDS管理控制台：</p><p>1）点击页面左侧导航栏处的 <strong>实验资源</strong> 。</p><p>2）点击 <strong>前往控制台</strong> ，进入阿里云管理控制台RAM登录界面。</p><p>3）依次输入 实验资源 提供的 <strong>子用户名称</strong> ，<strong>子用户密码</strong> 。</p><p>4）点击 <strong>登录</strong> ，进入阿里云管理控制台。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/d44c8d1ac66c4d50abf01326c4e1d83b.png" alt="img"> </p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/7da198d47cf24c6888cf43c60d3142b8.png" alt="img">  </p><p>5）顶部导航栏处点击 <strong>产品与服务</strong> ，下拉菜单中，<strong>数据库</strong> 中选择 <strong>云数据库RDS版</strong> ，进入阿里云RDS管理控制台。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041632211.png" alt="img"> </p><p>\2. 通过如下步骤，进入实验资源 <strong>云数据库RDS实例</strong> 的管理控制台。</p><p>1）在左侧地址栏，点击 <strong>实例列表</strong></p><p>2）在顶部地址栏，选择 <strong>实验资源</strong> 提供的 <strong>地域</strong> 信息。</p><p>3）在搜索栏中，输入 <strong>实验资源</strong> 提供的 <strong>目标数据库</strong> 的 实例ID ，并点击 <strong>搜索</strong> 。</p><p>4）在下方搜索结果中，点击实例右侧的 <strong>管理</strong> ，进入RDS实例的管理控制台。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/97a94efc60c04eccbc3a347d6eb2d39e.png" alt="img"> </p><p>\3. 通过如下步骤，进入数据库账号创建页面：</p><p>1）在RDS实例的管理页面，点击左侧栏的 <strong>账号管理</strong> ，进入数据库账号管理页面。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041632702.png" alt="img"></p><p>2）在 <strong>用户账号</strong> 页面，点击 <strong>创建账号</strong> 。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041632825.png" alt="img"> </p><p>\2. 填写如下信息，完成数据库账号创建：</p><p>1）<strong>数据库账号</strong>：请根据 <strong>输入框</strong> 下端的 <strong>命名规则</strong> ，输入 数据库账号名称，例如：<strong>lab_user</strong> 。</p><p>2）<strong>密码账号类型</strong> ：请选择 <strong>普通账号</strong> </p><p>3）<strong>密码</strong> ：请根据 <strong>输入框</strong> 下端的 <strong>密码规则</strong> ，输入 密码，例如：<strong>Passw0rd</strong>；</p><p>4）<strong>确认密码</strong>：再次输入创建的密码。</p><p>5）完成如上信息后，点击 <strong>创建</strong> 。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/3d9e121a75724007b952777488f6ed7d.png" alt="img"> </p><p>6）返回 <strong>账号管理</strong> 的 <strong>用户账号</strong> ，查看到新建账号 lab_user 的 <strong>状态</strong> 为 <strong>已激活</strong> 。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041632065.png" alt="img"> </p><p>\3. 通过如下操作步骤，进入数据库创建页面：</p><p>1）点击左侧栏的 <strong>数据库管理</strong> ，进入数据库管理页面。</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/8c9766fc15c2469bb4e2652f97700853.png" alt="img"> </p><p>2）在右侧的 <strong>数据库管理</strong> 页面，点击左上角的 <strong>创建数据库</strong> ，进入创建页面。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041632315.png" alt="img">   </p><p>\4. 在创建页面中，添加如下信息：</p><p>1）<strong>数据库（DB）名称</strong>：请根据 <strong>输入框</strong> 下端的 <strong>命名规则</strong> ，输入 <strong>数据库名称</strong>，例如：lab_db 。</p><p>2）<strong>支持字符集</strong>：默认设为 <strong>utf8</strong> 。</p><p>3）<strong>授权帐号</strong>：选择新建数据库账号 <strong>lab_user</strong>。</p><p>4）完成如上配置信息后，点击底部的 <strong>创建</strong> ，完成数据库的创建。</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/57d3491f90c4427db4276ce0a0670542.png" alt="img"> </p><p>6）在 <strong>数据库管理</strong> 页面中，等待1分钟左右，点击右上角的 <strong>刷新</strong> ，可以查看到数据库 <strong>lab_db</strong> 的 <strong>数据库状态</strong> 为 <strong>运行中</strong> ，且 <strong>绑定账号</strong> 为 新建数据库账号 lab_user 。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041633953.png" alt="img"></p><h1 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h1><p>本小节的主要内容：通过数据迁移服务，将本地MySQL中的源数据库中的数据迁移到RDS的新建目标数据库 <strong>lab_db</strong>。</p><p>\1. 通过如下步骤，进入数据迁移管理页面：</p><p>1）点击左侧地址栏 <strong>实例列表</strong>，然后点击 <strong>数据导入</strong> 。进入 <strong>数据迁移服务</strong> 的管理页面。</p><p> <img src="https://ucc.alicdn.com/pic/developer-ecology/89efe106308f4827aeeb946189c61de6.png" alt="img"></p><p>2）点击左侧栏 <strong>数据迁移</strong> ，进入数据迁移的管理页面。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041633567.png" alt="img"></p><h1 id="查阅迁移结果"><a href="#查阅迁移结果" class="headerlink" title="查阅迁移结果"></a>查阅迁移结果</h1><p>本小节主要内容：在RDS的管理控制台，查看数据迁移结果。</p><p>1.进入RDS管理控制台。在 <strong>实例列表</strong> 界面中，点击右上角的 <strong>登录数据库</strong> ，进入数据库管理登录界面。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041633434.png" alt="img"></p><p>3）在弹出的页面中，输入如下的信息：</p><p>● <strong>网络地址:端口</strong>：请输入 <strong>实验资源</strong> 中，RDS <strong>目标数据库</strong> 提供的 <strong>链接地址</strong> 以及端口号 <strong>3306</strong>。</p><p>   例如：提供的RDS链接地址为</p><p><strong>rm-uf6l90d950j1o7890.mysql.rds.aliyuncs.com</strong></p><p>，则输入信息为：</p><p><strong>rm-uf6l90d950j1o7890.mysql.rds.aliyuncs.com:3306</strong></p><p>● <strong>用户名</strong>：输入新建数据库账号 <strong>lab_user</strong></p><p>● <strong>密码</strong>：输入新建数据库密码 <strong>Passw0rd</strong></p><p>  完成后，点击 <strong>登录</strong> 。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041633382.png" alt="img"></p><p>\2.  如下图，进入数据库管理页面，证明数据库迁移成功。</p><p> <img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041633426.png" alt="img"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clouder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clouder-云数据管理初体验</title>
    <link href="/2023/08/04/Clouder-%E4%BA%91%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2023/08/04/Clouder-%E4%BA%91%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p><strong>实验概述</strong></p><p>本实验将提供一台阿里云RDS数据库，并通过阿里云的管理控制台进行如下操作：</p><p>1）创建RDS数据库；</p><p>2）创建RDS数据库帐号；</p><p>3）将测试数据导入到新建RDS数据库；</p><p>4）管理并查看导入数据的信息以及诊断报告；</p><p><strong>实验目标</strong></p><p>完成此实验后，可以掌握的能力有：</p><p>\1. RDS的基本概念；</p><p>\2. 创建数据库和数据库账号；</p><p>\3. 导入本地数据；</p><p>\4. 获取诊断报告</p><p><strong>学前建议</strong></p><p>了解数据库的基本结构</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="RDS-简介"><a href="#RDS-简介" class="headerlink" title="RDS 简介"></a><strong>RDS 简介</strong></h2><p>  <strong>阿里云关系型数据库</strong>（Relational Database Service，简称 RDS）是一种稳定可靠、可弹性伸缩的在线数据库服务。基于阿里云分布式文件系统和高性能存储，RDS 支持 MySQL、SQL Server、PostgreSQL 和 PPAS（Postgre Plus Advanced Server，一种高度兼容 Oracle 的数据库）引擎，并且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，彻底解决数据库运维的烦恼。</p><h2 id="RDS-实例链接方式"><a href="#RDS-实例链接方式" class="headerlink" title="RDS 实例链接方式"></a><strong>RDS 实例链接方式</strong></h2><p>  当RDS实例创建成功后，默认提供 <strong>内网链接地址</strong> ，用户可以通过 <strong>数据传输服务</strong> 或 <strong>相同地域的ECS实例</strong> 连接到RDS实例。若要通过本地服务器 或 不同地域的ECS实例 连接到 RDS实例，用户需 <strong>申请外网地址</strong> ，如下图所示：</p><h2 id="RDS-数据库账号"><a href="#RDS-数据库账号" class="headerlink" title="RDS 数据库账号"></a><strong>RDS 数据库账号</strong></h2><p>  在使用RDS 数据库之前，需要在 RDS 实例中创建账号。同一实例下的数据库共享该实例下的所有资源，其中：</p><p><strong>&gt; MySQL 版实例和 SQL Server 版实例最多可以创建 500 个账号</strong></p><p><strong>&gt; PostgreSQL 版实例和 PPAS 版实例没有账号个数限制</strong></p><p><strong>&gt; RDS for SQL Server 2012 只能创建初始账号</strong></p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><p>1）分配数据库账号权限时，请按最小权限原则和业务角色创建账号，并合理分配只读和读写权限。必要时可以把数据库账号和数据库拆分成更小粒度，使每个数据库账号只能访问其业务之内的数据。如果不需要数据库写入操作，请分配只读权限。</p><p>2）请设置数据库账号的密码为强密码，并定期更换</p><h3 id="创建数据库账号："><a href="#创建数据库账号：" class="headerlink" title="创建数据库账号："></a><strong>创建数据库账号：</strong></h3><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/bcc23d3173f5411e9dffa883b49507c3/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-bcc23d3173f5411e9dffa883b49507c3-content-image-1640690032448-x4atPf" alt="2"></p><p>1）<strong>数据库账号</strong>：由 2~16 个字符的小写字母，数字或下划线组成、开头需为字母，结尾需为字母或数字，如 <strong>lab_user</strong> 。</p><p>2）<strong>授权数据库</strong>：该账号授权的数据库，选取左边的 <strong>未授权数据库</strong> ，单击 <strong>授权</strong>，添加数据库到 <strong>已授权数据库</strong> 中。如果尚未创建数据库，该值可以为空。您可以通过 <strong>已授权数据库</strong> 右上角的权限设置按钮将该账号下的数据库权限批量设置为 <strong>全部设读写</strong> 或者 <strong>全部设只读</strong>。</p><p>3）<strong>密码</strong>：该账号对应的密码，由 6~32 个字符的字母、数字、中划线或下划线组成，如 password4example。</p><p>​    <strong>确认密码</strong>：输入与密码一致的字段，如 password4example，以确保密码正确输入。</p><p>4）<strong>备注说明</strong>：可以备注该账号的相关信息，便于后续账号管理，最多支持 256 个字符（1 个汉字等于 3 个字符）。</p><h2 id="RDS-数据库"><a href="#RDS-数据库" class="headerlink" title="RDS 数据库"></a><strong>RDS 数据库</strong></h2><p>  用户可以通过 <strong>RDS 管理控制台</strong> 创建数据库。数据库名称<strong>实例内</strong>唯一，<strong>实例间</strong>互不影响。同一实例下的数据库共享该实例下的所有资源，其中：</p><p>&gt; <strong>MySQL</strong> 版实例最多可以创建 500 个数据库</p><p>&gt; <strong>SQL Server 2008 R2</strong> 版实例最多可以创建 50 个数据库</p><p>&gt; <strong>PostgreSQL</strong> 版实例和 <strong>PPAS</strong> 版实例没有数据库个数限制</p><ul><li><strong>创建数据库：</strong></li></ul><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/bcc23d3173f5411e9dffa883b49507c3/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-bcc23d3173f5411e9dffa883b49507c3-content-image-1640690081924-xBUMRT" alt="3"></p><p>1）<strong>数据库(DB)名称</strong>：由 2~64 个字符的小写字母、数字、下划线或中划线组成，开头需为字母，结尾需为字母或数字。</p><p>2）<strong>支持字符集</strong>：设置数据库的字符集：<strong>utf8</strong>、<strong>gbk</strong>、<strong>latin1</strong> 和 <strong>utf8mb4</strong>。</p><p>3）<strong>授权账号</strong>：选择该数据库授权的账号。如果尚未创建账号，该值可以为空。</p><p>4）<strong>账号类型</strong>：选择 <strong>授权账号</strong> 后可见，设置该数据库授权给 <strong>授权账号</strong> 的权限，可以设置为 <strong>读写</strong> 或者 <strong>只读</strong> 。</p><p>5）<strong>备注说明</strong>：可以备注该数据库的相关信息，便于后续数据库管理，最多支持 256 个字符（1 个汉字等于 3 个字符）。</p><h1 id="访问阿里云RDS管理控制台"><a href="#访问阿里云RDS管理控制台" class="headerlink" title="访问阿里云RDS管理控制台"></a>访问阿里云RDS管理控制台</h1><p>在实验室页面，单击<strong>创建资源</strong>。</p><ol><li>（可选）在实验室页面左侧导航栏中，单击<strong>云产品资源</strong>列表，可查看本次实验资源相关信息（例如IP地址、用户信息等）。</li></ol><p><strong>说明：</strong> 资源创建过程需要1~3分钟。</p><p>选择界面中的【<strong>Chromium网页浏览器</strong>】，进入登录页面。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041625235.png" alt="img"> </p><p>输入资源提供的“子用户名称”和“子用户密码”登录。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041625155.png" alt="img"> </p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/85a5d59a7c3346a9863e4cada2ffc431.png" alt="img"></p><p>3）顶部导航栏处点击 产品与服务<img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041625101.png" alt="img"> ，下拉菜单中，数据库 中选择 云数据库RDS版 ，进入阿里云RDS管理控制台。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041625204.png" alt="img"> </p><p>\2. 通过如下步骤，进入实验资源 云数据库RDS实例 的管理控制台。</p><p>1）在顶部地址栏，选择 实验资源 提供的 地域 信息。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/7f465b86970d481d9280d4af91b5a485.png" alt="img"> </p><p>2）在搜索栏中，输入 实验资源 提供的 云数据库RDS实例 的 实例ID ，并点击 搜索 。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/2f2d58086f5947279955fa49bf795038.png" alt="img"></p><p>3）在下方搜索结果中，点击实例右侧的 管理 ，进入RDS实例的管理控制台。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041625402.png" alt="img"></p><h1 id="创建RDS数据库"><a href="#创建RDS数据库" class="headerlink" title="创建RDS数据库"></a>创建RDS数据库</h1><p>本小节将介绍：在RDS实例上创建数据库。</p><p>\1. 在RDS实例的管理页面，选择左侧栏的 实例列表 ，再点击右侧的 实例名称 进入实例详情页。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/d87190fb78584b98a2947bb711e1d77d.png" alt="img"> </p><p>通过如下操作步骤，进入数据库创建页面：</p><p>1）点击左侧栏的 数据库管理 ，进入数据库管理页面。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/296859d5867f4b19b6b647923eb43476/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-296859d5867f4b19b6b647923eb43476-content-image-1648710527681-xkZCQP" alt="img"></p><p>2）在左上角点击左侧的 创建数据库 ，进入创建页面。</p><p>\2. 在创建页面中，添加如下信息：</p><p>说明：如下参数的具体说明，烦请参考 背景知识 小节中 RDS 数据库 的 创建数据库 部分。</p><p>1）数据库（DB）名称：请根据 输入框 下端的 命名规则 ，输入 数据库名称，例如：lab_db 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/296859d5867f4b19b6b647923eb43476/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-296859d5867f4b19b6b647923eb43476-content-image-1648709613215-hk0yNR" alt="img"></p><p>2）支持字符集：默认设为 utf8 ，最后点击创建。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041626528.png" alt="img"> </p><p>3)创建完成</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/296859d5867f4b19b6b647923eb43476/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-296859d5867f4b19b6b647923eb43476-content-image-1648710617850-4RjkOC" alt="img"></p><h1 id="创建RDS数据库账号"><a href="#创建RDS数据库账号" class="headerlink" title="创建RDS数据库账号"></a>创建RDS数据库账号</h1><p>本小节主要介绍如何创建RDS数据库账号。</p><p>\1. 通过如下步骤，进入数据库账号创建页面：</p><p>1）在RDS实例的管理页面，点击左侧栏的 账号管理 ，进入数据库账号管理页面。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041626493.png" alt="img"> </p><p>2）在 用户账号 页面，点击 创建账号。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041626506.png" alt="img"></p><p>\2. 填写如下信息，完成数据库账号创建：</p><p>说明：如下参数的具体说明，烦请参考 背景知识 小节中 RDS 数据库帐号 的 创建数据库帐号 部分。</p><p>1）数据库账号：请根据 输入框 下端的 命名规则 ，输入 数据库账号名称，例如：lab_user 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/cb489d4579bb4590b105ec9a5060ab56/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-cb489d4579bb4590b105ec9a5060ab56-content-image-1648710977904-epf358" alt="img"></p><p>2）账号类型 ：选择 普通账号 </p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/cb489d4579bb4590b105ec9a5060ab56/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-cb489d4579bb4590b105ec9a5060ab56-content-image-1648711013315-ab5Ud9" alt="img"></p><p>\3) 授权数据库: 勾选上一步创建的数据库 lab_db ，再点击中间的箭头，选择读写（DDL+DML）</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/cb489d4579bb4590b105ec9a5060ab56/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-cb489d4579bb4590b105ec9a5060ab56-content-image-1648711112567-uzmPVw" alt="img"></p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/cb489d4579bb4590b105ec9a5060ab56/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-cb489d4579bb4590b105ec9a5060ab56-content-image-1648711089713-48NI1n" alt="img"></p><p>\4) 密码 ：请根据 输入框 下端的 密码规则 ，输入 密码，例如：Passw0rd</p><p>5）确认密码：再次输入创建的密码。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/cb489d4579bb4590b105ec9a5060ab56/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-cb489d4579bb4590b105ec9a5060ab56-content-image-1648711318162-smTRKC" alt="img"></p><p>6）完成如上信息后，点击 确定 。</p><p>\3. 自动返回 账号管理 的 用户账号 页面，查看到新建账号 lab_user 的 状态 为 激活 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/cb489d4579bb4590b105ec9a5060ab56/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-cb489d4579bb4590b105ec9a5060ab56-content-image-1648711351687-mSZANX" alt="img"></p><h1 id="登录RDS数据库"><a href="#登录RDS数据库" class="headerlink" title="登录RDS数据库"></a>登录RDS数据库</h1><p>本小节主要内容：通过RDS管理控制台，登录到 新建RDS数据库。</p><p>\1. 在 账号管理 页面，点击顶部右侧的 登录数据库 ，弹出数据库登录页面。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/aa39c685d1dd4ca0990a6c4c00c5a7be/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-aa39c685d1dd4ca0990a6c4c00c5a7be-content-image-1640690692159-cJGUj9" alt="img"></p><p>\2. 返回数据库管理控制台，输入如下信息：</p><p>1）第一行：输入 新建数据库账号 ，lab_user 。 </p><p>2）第二行：输入 新建数据库账号密码 ，Passw0rd 。</p><p>3）点击 登录 ，登录到数据库管理系统。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/aa39c685d1dd4ca0990a6c4c00c5a7be/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-aa39c685d1dd4ca0990a6c4c00c5a7be-content-image-1640690697944-7hCWS8" alt="img"></p><p>注：1）若弹出如下对话框，若无法输入，可按ESC进行输入。若未更新成功，刷新此页面重新进行输入或关闭当前页面重新进入（此时输入的显示名要与上次输入的不同。</p><p>2）若提示需添加白名单，点击确认添加即可。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041627222.png" alt="img"> </p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/10d2a6ff2dc64927b01b1dc87d39e1af.png" alt="img"> </p><p>\3.  下一小节，将在DMS管理控制台中，导入测试数据，并查看。</p><h1 id="导入测试数据"><a href="#导入测试数据" class="headerlink" title="导入测试数据"></a>导入测试数据</h1><p>复制下方链接至浏览器中打开</p><figure class="highlight llvm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//university-labfileapp.oss-cn-hangzhou.aliyuncs.com/<span class="hljs-variable">%E4</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%91</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%95</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%AE</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%BA</span><span class="hljs-variable">%93</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%90</span><span class="hljs-variable">%86</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%88</span><span class="hljs-variable">%9</span>D<span class="hljs-variable">%E4</span><span class="hljs-variable">%BD</span><span class="hljs-variable">%93</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%AA</span><span class="hljs-variable">%8</span>C/lab<span class="hljs-variable">%20</span>.sql<br></code></pre></td></tr></table></figure><p>本小节主要内容：导入客户模拟数据到 新建数据库 中，并查看数据。</p><p>\1. 通过如下操作步骤，进入数据库导入的页面：</p><p>1）点击页面顶部的 数据库开发 。</p><p>2）在数据库开发的左侧栏中点击 数据导入 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/f37a02d64c8c484cbbaa8cac21dfeb3e/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-f37a02d64c8c484cbbaa8cac21dfeb3e-content-image-1640690748715-2gesj2" alt="img"></p><p>\2. 通过如下操作步骤，导入本地测试数据：</p><p>1）点击本小节最开始的链接进行下载 ，然后将下载文件 lab.sql 作为测试数据到本地。</p><p>2）在 附件 栏右侧，点击 上传文件 ，并选择下载 lab.sql 文件的本地保存路径。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/f37a02d64c8c484cbbaa8cac21dfeb3e/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-f37a02d64c8c484cbbaa8cac21dfeb3e-content-image-1640690778000-ojTiT1" alt="img"></p><p>4）完成后，点击底部的 提交申请，导入测试数据。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/f37a02d64c8c484cbbaa8cac21dfeb3e/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-f37a02d64c8c484cbbaa8cac21dfeb3e-content-image-1640690793453-oy3aln" alt="img"></p><p>5）提交申请后，点击执行变更，等待执行成功后，即可返回查看数据库信息。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/f37a02d64c8c484cbbaa8cac21dfeb3e/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-f37a02d64c8c484cbbaa8cac21dfeb3e-content-image-1640690807544-uaiQw1" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041627087.png" alt="img"> </p><p>\2. 通过如下步骤，查看导入表的信息：</p><p>1）点击左侧栏lab_db 数据库，点击表，即可查看到创建完成的表。</p><p><img src="https://edu.aliyun.com/lab/files/courses/5e10c289fdbb45259f4383c86d0d88c3/sections/f37a02d64c8c484cbbaa8cac21dfeb3e/content/images/course-5e10c289fdbb45259f4383c86d0d88c3-section-f37a02d64c8c484cbbaa8cac21dfeb3e-content-image-1640690821474-VEDhvn" alt="img"></p><p>2）点击表名，例如：admin_app_version，可以查看到所有对表的操作，例如：SQL操作数据、打开表等等。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/ddaec112f7e44e28ad6a96344e2b53d5.png" alt="img"> </p><p>\5. 下一小节，将介绍如何查看数据库的诊断报告。</p><h1 id="查看诊断报告"><a href="#查看诊断报告" class="headerlink" title="查看诊断报告"></a>查看诊断报告</h1><p>本小节主要内容：查看实例的诊断报告。</p><p>\1. 通过如下步骤，进入诊断报告页面：</p><p>1）进入实例，点击左侧栏诊断报告。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041627678.png" alt="img"> </p><p>\2. 通过如下步骤，发起实例诊断：</p><p>1）在诊断报告的主页面中，点击左侧的 发起诊断 。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/b131e2291eb8411794b770ac7217a5aa.png" alt="img"></p><p>2）弹出提示，点击 确认 。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/4fb4346e163e484e8bc94018190a22c0.png" alt="img"> </p><p>3）重新加载 页面（刷新），查看诊断报告的 状态 变为 诊断完成 。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/cbc331cb5a9d4cfcb0612c9de67d0d5a.png" alt="img"></p><p>\3. 通过如下步骤，查看诊断报告，并进行分析：</p><p>1）点击诊断报告右侧的 查看报告 ，弹出诊断报告页面。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041627765.png" alt="img"></p><p>2）可以在页面中，查看到如下的诊断报告信息：   实例规格 、健康状况 、SQL优化 、空间诊断、会话列表 、慢SQL汇总  、性能趋势图</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308041627781.png" alt="img"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clouder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clouder-网上快速搭建WordPress网站</title>
    <link href="/2023/08/02/Clouder-%E7%BD%91%E4%B8%8A%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAWordPress%E7%BD%91%E7%AB%99/"/>
    <url>/2023/08/02/Clouder-%E7%BD%91%E4%B8%8A%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAWordPress%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p><strong>实验概述</strong></p><p>  本实验开始后，平台提供一台基础环境的CentOS 6.5 64位的ECS（云服务器）实例。我们将会在这台服务器上搭建和部署LAMP环境，然后安装WordPress网站，最后向大家展示如何在WordPress网站使用微博挂件和网站统计平台CNZZ。</p><p><img src="https://edu.aliyun.com/lab/files/courses/intro/24d0e20f6d794183bce217ba72d34e9e/images/course-24d0e20f6d794183bce217ba72d34e9e-intro-image-1498447728424-8ivQcn"></p><p><strong>实验目标</strong></p><p>完成此实验后，可以掌握的能力有：</p><p>\1. Apache服务器的安装和部署</p><p>\2. MySQL数据库的安装</p><p>\3. PHP语言环境的安装和部署</p><p>\4. 安装WordPress网站</p><p>\5. 在WordPress网站使用网站分析平台CNZZ</p><p><strong>学前建议</strong></p><p>\1. 了解Linux的基本命令；</p><p>\2. 了解基本的网站搭建知识</p><h1 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h1><h2 id="关于LAMP"><a href="#关于LAMP" class="headerlink" title="关于LAMP"></a><strong>关于LAMP</strong></h2><p>   <strong>LAMP</strong>是指 <strong>Linux</strong>（操作系统），<strong>Apache HTTP</strong> 服务器，<strong>MySQL</strong>（有时也指MariaDB）数据库软件和 <strong>PHP</strong>（有时也指Perl或Python）的首字母，一般用来建立web应用平台。和Java/J2EE架构相比，LAMP具有Web资源丰富、轻量、快速开发等特点；与微软的 .NET 架构相比，LAMP具有通用、跨平台、高性能、低价格的优势。因此LAMP无论是性能、质量还是价格都是企业搭建网站的首选平台。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><strong>Linux</strong></h3><p>是一种自由和开发源代码的类UNIX操作系统，目前运用最广泛使用人数最多的操作系统。本实验为大家提供的就是 Linux 操作系统。</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a><strong>Apache</strong></h3><p>是LAMP架构最核心的Web Server，开源、稳定、模块丰富是Apache的优势。但Apache的缺点是有些臃肿，内存和CPU开销大，性能上有损耗，不如一些轻量级的Web服务器（例如nginx）高效，轻量级的Web服务器对于静态文件的响应能力来说远高于Apache服务器。Apache做为Web Server是负载PHP的最佳选择，如果流量很大的话，可以采用nginx来负载非PHP的Web请求。</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><strong>PHP</strong></h3><p> 是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。</p><p>  开源的数据库中，<strong>MySQL</strong> 在性能、稳定性和功能上是首选，可以达到百万级别的数据存储，网站初期可以将MySQL和Web服务器放在一起，但是当访问量达到一定规模后，应该将MySQL数据库从Web Server上独立出来，在单独的服务器上运行，同时保持Web Server和MySQL服务器的稳定连接。</p><h2 id="关于WordPress"><a href="#关于WordPress" class="headerlink" title="关于WordPress"></a><strong>关于WordPress</strong></h2><p>  <strong>WordPress</strong> 是一种使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设WordPress 。你可以使用WordPress搭建一个简单的独立博客，也可以把WordPress当作一个内容管理系统（CMS），用来搭建一个小门户网站，总之，现在的WordPress已经强大到几乎可以搭建目前所有常见类型的网站，比如门户、下载站、淘宝客、论坛、多博客等等。</p><h2 id="关于CNZZ"><a href="#关于CNZZ" class="headerlink" title="关于CNZZ"></a><strong>关于CNZZ</strong></h2><p>  <strong>CNZZ</strong> 是一个进行网页统计的平台，可以帮助站长收集网站上用户的浏览器分布、IP分布、流量等公开信息，方便网站管理。使得站长可以了解访问量变化、是不是被搜索引擎封杀等情况，即时作出应对。</p><h1 id="安装Apache-HTTP服务"><a href="#安装Apache-HTTP服务" class="headerlink" title="安装Apache HTTP服务"></a>安装Apache HTTP服务</h1><p>\1. 首先，通过本地软件远程访问 Linux 系统，也就是登录到 <strong>LAMP基础环境</strong> 的 ECS 实例。点击【<strong>创建资源</strong>】，创建成功后可获取本实验ECS实例的 <strong>弹性IP</strong> ， <strong>用户</strong> 和 <strong>密码</strong> 等登录信息。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308021730604.png" alt="img"></p><p>点击右侧按钮<img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308021730533.png" alt="img"> 【<strong>切换至 Web Termina</strong>】。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308021730569.png" alt="img"> </p><p>\2. 登陆到Linux ECS之后，执行如下命令，先修改YUM源，然后下载并安装 <strong>Apache HTTP</strong> 服务。</p><p>YUM源更新：</p><p>（1）运行以下命令编辑CentOS-Base.repo文件</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/yum</span>.repos.d/CentOS-Base.repo<br></code></pre></td></tr></table></figure><p>键盘输入ggdG，删除文件中原有内容，然后按 i 进入编辑模式，输入以下文本</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[base]</span><br><span class="hljs-attr">name</span>=CentOS-<span class="hljs-number">6.10</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">baseurl</span>=http://mirrors.cloud.aliyuncs.com/centos-vault/<span class="hljs-number">6.10</span>/os/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=http://mirrors.cloud.aliyuncs.com/centos-vault/RPM-GPG-KEY-CentOS-<span class="hljs-number">6</span> <br><span class="hljs-section">[updates]</span><br><span class="hljs-attr">name</span>=CentOS-<span class="hljs-number">6.10</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">baseurl</span>=http://mirrors.cloud.aliyuncs.com/centos-vault/<span class="hljs-number">6.10</span>/updates/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=http://mirrors.cloud.aliyuncs.com/centos-vault/RPM-GPG-KEY-CentOS-<span class="hljs-number">6</span> <br><span class="hljs-section">[extras]</span><br><span class="hljs-attr">name</span>=CentOS-<span class="hljs-number">6.10</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">baseurl</span>=http://mirrors.cloud.aliyuncs.com/centos-vault/<span class="hljs-number">6.10</span>/extras/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=http://mirrors.cloud.aliyuncs.com/centos-vault/RPM-GPG-KEY-CentOS-<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>编辑完成后，按 Esc 键，并输入:wq保存退出文件。</p><p>（2）运行以下命令编辑epel.repo 文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/yum</span>.repos.d/epel.repo<br></code></pre></td></tr></table></figure><p>键盘输入ggdG，删除文件中原有内容，然后按 i 进入编辑模式，输入以下文本</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[epel]</span><br><span class="hljs-attr">name</span>=Extra Packages for Enterprise Linux <span class="hljs-number">6</span> - <span class="hljs-variable">$basearch</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">baseurl</span>=http://mirrors.cloud.aliyuncs.com/epel-archive/<span class="hljs-number">6</span>/<span class="hljs-variable">$basearch</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gpgkey</span>=http://mirrors.cloud.aliyuncs.com/epel-archive/RPM-GPG-KEY-EPEL-<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>编辑完成后，按 Esc 键，并输入:wq保存退出文件</p><p><strong>说明</strong>：本实验中所有运行命令，均可点击下载附件 <a href="https://university-labfileapp.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E4%B8%8A%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAWordPress%E7%BD%91%E7%AB%99.txt.zip"><strong>云上快速搭建WordPress网站.txt.zip</strong></a> 。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> httpd<br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/1c8810f2bbdf4134ac3efd8f91f5be64/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-1c8810f2bbdf4134ac3efd8f91f5be64-content-image-1668418215626-AhPJz3" alt="img"></p><p>  当页面显示 <strong>Complete!</strong> ，表示安装完成。</p><p>\3. 执行如下命令，安装 apache 的扩展文件。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> httpd-manual mod_ssl mod_perl mod_auth_mysql<br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/1c8810f2bbdf4134ac3efd8f91f5be64/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-1c8810f2bbdf4134ac3efd8f91f5be64-content-image-1668418051006-1hHeqG" alt="img"></p><p>当页面显示 <strong>Complete!</strong> ，表示安装完成。</p><p>\4. 执行如下命令，启动 apache http 服务。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service httpd <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/1c8810f2bbdf4134ac3efd8f91f5be64/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-1c8810f2bbdf4134ac3efd8f91f5be64-content-image-1668418244121-jRUR1o" alt="img"></p><p>\5. 执行如下命令，设置开机自动启动 apache http 服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">chkconfig</span> httpd <span class="hljs-literal">on</span> <br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/1c8810f2bbdf4134ac3efd8f91f5be64/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-1c8810f2bbdf4134ac3efd8f91f5be64-content-image-1498448630046-G5DSwN" alt="img"></p><p>\6. 打开本地浏览器，并访问 <strong>实验资源</strong> 提供的 ECS实例的 <strong>弹性IP</strong> ，可以查看到 Apache 的测试页面。证明 <strong>Apache HTTP</strong> 服务部署启动成功。</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/1c8810f2bbdf4134ac3efd8f91f5be64/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-1c8810f2bbdf4134ac3efd8f91f5be64-content-image-1498458785459-2DaioL" alt="img"></p><h1 id="下载和安装MySQL数据库"><a href="#下载和安装MySQL数据库" class="headerlink" title="下载和安装MySQL数据库"></a>下载和安装MySQL数据库</h1><p>\1. 执行如下命令，下载并安装 <strong>MySQL</strong> 数据库：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum -y install mysql mysql-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>  当页面显示 <strong>Complete!</strong> ，表示安装完成。</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1668418287426-tSpxb6" alt="Image 56"></p><p>\2.  执行如下命令，启动 MySQL 数据库。当页面显示 <strong>Starting mysqld  [OK]</strong> ，表示MySQL已启动。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service mysqld <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1668418311652-IET0YK" alt="Image 57"></p><p>\3. 执行如下命令，修改 MySQL 数据库 <strong>root</strong> 用户的密码，并提高 MySQL 数据库的安全性。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql_secure_installation</span><br></code></pre></td></tr></table></figure><ul><li><p>默认密码为空，所以提示 <strong>Enter current password for root (enter for none)</strong> 时，输入 <strong>回车（enter）</strong> 就可以。</p><p>  <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1668418351707-WGJhKS" alt="Image 58"></p></li><li><p>提示 <strong>Set root password? [Y/n]</strong> ，输入 <strong>y</strong> 。输入新的密码，例如： <strong>123123</strong> 。</p></li></ul><p><strong>注意</strong>：</p><p>1.输入的密码不会显示出来。为了便于演示，我们设置的密码很简单，在真实的生产环境中一定要设置复杂度高的密码，以免被暴力破解。</p><p>2.设置 MySQL 根密码仅是保护数据库的最基本措施。在构建或安装数据库驱动的应用程序时，用户通常可以为该应用程序创建数据库服务用户，并避免使用根账户执行除数据库管理以外的操作。<br><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1668418370142-NIRj7G" alt="Image 59"></p><ul><li><p>输入 <strong>y</strong> ，删除匿名用户账户。</p><p>  <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1498455480664-JBBa1L" alt="img"></p></li><li><p>输入 <strong>y</strong> ，禁止远程root登录。</p><p>  <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1498455557446-1473XP" alt="img"></p></li><li><p>输入 <strong>y</strong> ，删除测试数据库。</p><p>  <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1498455568087-V8ietv" alt="img"></p></li><li><p>输入 <strong>y</strong> ，重新加载权限表并保存您的更改。</p><p>  <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1498455579527-NkeTc6" alt="img"></p></li></ul><p>\4. 输入如下命令，进入 MySQL 数据库；然后，查看root账号下的数据库信息。</p><p><strong>注意</strong>：<strong>show databases;</strong> 中的 ；分号不能忘记 <strong>。</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mysql -uroot -p123123<br><br>show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1498457347391-lDIeaA" alt="img"></p><p>5.输入以下命令，创建数据库 wordpress ；然后，再次验证数据库信息，可以看到刚才创建新增的数据库 wordpress 。说明 MySQL中成功创建一个新的数据库wordpress。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> wordpress;<br><br><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1498457874311-0hRT4K" alt="img"></p><p>6.输入 <strong>exit</strong> ，点击回车退出数据库。</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1498458162065-NzVtyH" alt="img"></p><p>\7. 最后，输入如下命令，设置开机自动启动MySQL服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">chkconfig</span> mysqld <span class="hljs-literal">on</span><br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/c4f8fc7e1a09416e85da64dc4213bf26/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-c4f8fc7e1a09416e85da64dc4213bf26-content-image-1499439025654-pYlAIq" alt="img"></p><h1 id="安装PHP语言环境"><a href="#安装PHP语言环境" class="headerlink" title="安装PHP语言环境"></a>安装PHP语言环境</h1><p>\1. 执行如下命令，安装 <strong>php</strong> 以及 php 支持 MySQL 的 <strong>php-mysql</strong> 软件包。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> php php-mysql<br></code></pre></td></tr></table></figure><p>出现 <strong>Complete!</strong> 说明安装成功。</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/0a0e31fe0430468a9f5cd2257e6908d7/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-0a0e31fe0430468a9f5cd2257e6908d7-content-image-1668418526712-EqmBGA" alt="Image 66"></p><p>\2. 执行如下命令，安装 php 常用扩展包。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">yum -y install gd php-gd gd-devel php-<span class="hljs-keyword">xml</span> <span class="hljs-title">php-common</span> php-mbstring php-ldap php-pear php-xmlrpc php-imap<br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/0a0e31fe0430468a9f5cd2257e6908d7/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-0a0e31fe0430468a9f5cd2257e6908d7-content-image-1668418538231-p9Mpkf" alt="Image 67"></p><p>\3. 执行如下命令，重启 Apache 服务。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service httpd restart</span><br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/0a0e31fe0430468a9f5cd2257e6908d7/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-0a0e31fe0430468a9f5cd2257e6908d7-content-image-1668418548205-LCB0sM" alt="Image 68"></p><p><strong>注意</strong>：必须重启，此步很重要。</p><p>\4. 最后，执行如下命令，创建一个 php 页面，测试 PHP 环境。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; &gt; /var/www/html/phpinfo.php</span><br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/0a0e31fe0430468a9f5cd2257e6908d7/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-0a0e31fe0430468a9f5cd2257e6908d7-content-image-1498458436774-2YNQZM" alt="img"></p><p>\5. 返回浏览器，并在新建页面中，访问 <strong><a href="http://xxx.xxx.xx.x/phpinfo.php">http://xxx.xxx.xx.x/phpinfo.php</a></strong> ，其中 xxx.xxx.xx.x 表示 <strong>实验资源</strong> 中的 ECS实例 <strong>弹性IP</strong> ，可以查看到如下 PHP 信息页面：</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/0a0e31fe0430468a9f5cd2257e6908d7/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-0a0e31fe0430468a9f5cd2257e6908d7-content-image-1640685474199-x03yrU" alt="14"></p><h1 id="安装部署WordPress"><a href="#安装部署WordPress" class="headerlink" title="安装部署WordPress"></a>安装部署WordPress</h1><p>\1. 本小节将实现：在已搭建好的 <strong>LAMP</strong> 环境中，安装部署 <strong>WordPress</strong> 。</p><p>\2. 实验提供的实例中已经下载 <strong>WordPress</strong> <strong>安装包</strong> ，执行如下命令，解压安装包；然后查看当前有哪些文件或文件夹。</p><p><strong>说明</strong>：如需下载中文版WordPress安装包，请点击链接 <a href="https://cn.wordpress.org/%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%98%AFWordPress%E4%B8%AD%E6%96%87%E5%AE%98%E7%BD%91%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84%E7%89%88%E6%9C%AC%E5%B9%B6%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%EF%BC%9B">https://cn.wordpress.org/，这个是WordPress中文官网，可以找到最新的版本并下载安装；</a> </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -xzf wordpress-<span class="hljs-number">4</span>.<span class="hljs-number">7</span>.<span class="hljs-number">4</span>-zh_CN.tar.gz<br><br><span class="hljs-attribute">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/021da282ed024cdb9593f13ac975a21c/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-021da282ed024cdb9593f13ac975a21c-content-image-1498619458196-ykwKTO" alt="img"></p><p>\3. 创建和修改 WordPress 配置文件</p><p>1）备份 WordPress 配置文件，并将原有的示例配置文件样本保留。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> wordpress<br><span class="hljs-keyword">cp</span> <span class="hljs-keyword">wp</span>-config-sample.php <span class="hljs-keyword">wp</span>-config.php<br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/021da282ed024cdb9593f13ac975a21c/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-021da282ed024cdb9593f13ac975a21c-content-image-1668418714790-Kn01Mf" alt="Image 69"></p><p>2）进入 <strong>wp-config.php</strong> 的编辑页面：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> <span class="hljs-keyword">wp</span>-config.php<br></code></pre></td></tr></table></figure><p>3） 按键盘 <strong>i</strong> ，进入编辑状态，修改配置文件的数据库信息：</p><ul><li>修改 <strong>DB_NAME</strong> 的参数值 <strong>database_name_here</strong> 为之前创建的数据库 <strong>wordpress</strong>：</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-class"><span class="hljs-keyword">define</span></span>(<span class="hljs-string">&#x27;DB_NAME&#x27;</span>, <span class="hljs-string">&#x27;wordpress&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>修改 <strong>DB_USER</strong> 的参数值 <strong>username_here</strong> 为 <strong>root</strong> :</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-class"><span class="hljs-keyword">define</span></span>(<span class="hljs-string">&#x27;DB_USER&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>修改 <strong>DB_PASSWORD</strong> 的参数值 <strong>password_here</strong> 为 <strong>123123</strong> :</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">define(&#x27;DB_PASSWORD&#x27;, &#x27;<span class="hljs-number">123123</span>&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/021da282ed024cdb9593f13ac975a21c/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-021da282ed024cdb9593f13ac975a21c-content-image-1668418734863-O6oX7f" alt="Image 70"></p><p>4）修改完毕后，点击 <strong>esc</strong> ，退出编辑状态，然后输入 <strong>:wq</strong> ，保存修改信息并退出配置文件。</p><p>\4. 输入以下命令，移动 wordpress 到 Apache 服务根目录。</p><p>1）在 Apache 的根目录 /var/www/html 下，创建一个 <strong>wp-blog</strong> 文件夹。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>wp-blog<br></code></pre></td></tr></table></figure><p>2）然后，将 wordpress 迁移到这个新建文件夹中。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv * <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>wp-blog/<br></code></pre></td></tr></table></figure><p>\5. 完成如上配置后，返回浏览器，并访问 <strong><a href="http://xxx.xxx.xx.x/wp-blog/wp-admin/install.php">http://xxx.xxx.xx.x/wp-blog/wp-admin/install.php</a></strong> ，其中 xxx.xxx.xx.x 为 ECS 实例的 <strong>弹性IP</strong> ，填写如下信息，完成后，点击页面底部的 <strong>安装WordPress</strong> ，开始安装 WordPress 。</p><ul><li><p>站点标题： 输入站点名称，例如： <strong>HelloWorld</strong></p></li><li><p>用户名： 输入管理员的用户名，例如： <strong>admin</strong></p></li><li><p>密码：输入管理员的访问密码，例如： <strong>admin123</strong> </p></li><li><p>确认密码：由于密码设置过于简单，提示 <strong>非常弱</strong> , 勾选 <strong>确认使用弱密码 ；</strong>在真实的使用中，请使用复杂的管理密码</p></li><li><p>你的电子邮件：email地址，建议为真实有效的地址。若没有，可以填写虚拟 email 地址，但将无法接收信息，例如： <strong><a href="mailto:&#97;&#100;&#x6d;&#105;&#x6e;&#64;&#x61;&#x64;&#109;&#105;&#110;&#x2e;&#x63;&#x6f;&#109;">&#97;&#100;&#x6d;&#105;&#x6e;&#64;&#x61;&#x64;&#109;&#105;&#110;&#x2e;&#x63;&#x6f;&#109;</a></strong> </p></li></ul><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/021da282ed024cdb9593f13ac975a21c/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-021da282ed024cdb9593f13ac975a21c-content-image-1499393155209-2uZmKx" alt="img"></p><p> 提示安装成功，点击 <strong>登录</strong> 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/021da282ed024cdb9593f13ac975a21c/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-021da282ed024cdb9593f13ac975a21c-content-image-1499393334252-QDaG7k" alt="img"></p><p>6.输入上一步配置的 <strong>用户名</strong> ，如：<strong>admin</strong>；<strong>密码</strong> ，如：<strong>admin123</strong> ，然后点击 <strong>登录</strong> 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/021da282ed024cdb9593f13ac975a21c/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-021da282ed024cdb9593f13ac975a21c-content-image-1640685739524-hu0FnN" alt="17"></p><p>就可以进入安装好的 WordPress 网站的管理页面，后续所有 WordPress 网站的管理和优化都是在此页面中进行操作的。下图红框中 <strong>HelloWorld</strong> 表示我们设置的 <strong>站点标题</strong> 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/021da282ed024cdb9593f13ac975a21c/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-021da282ed024cdb9593f13ac975a21c-content-image-1499394881885-2ihEBr" alt="img"></p><p>7.至此，完成 Wordpress 的基础安装和部署，在地址栏中，访问 <strong><a href="http://xxx.xxx.xx.x/wp-blog/">http://xxx.xxx.xx.x/wp-blog/</a></strong> ，就可以进入如下页面。xxx.xxx.xx.x 表示 <strong>实验资源</strong> 提供的 ECS实例的 <strong>弹性IP</strong> 。</p><p><img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/021da282ed024cdb9593f13ac975a21c/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-021da282ed024cdb9593f13ac975a21c-content-image-1499393885759-D2rGBc" alt="img"></p><h1 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h1><p>1.本小节介绍主要：借助 CNZZ 平台观察 WordPress 网站一天有多少 IP 访问，那些 IP 都是从哪个页面进入到自己网站的等内容。</p><p>说明：本部分为课后练习，仅提供ECS服务器，但不提供U-Web网站统计产品。</p><p>2.点击链接 <a href="https://web.umeng.com/main.php?c=user&amp;a=login">https://web.umeng.com/main.php?c=user&amp;a=login</a> 进行注册、登录。</p><p>注意：您也可以直接百度 CNZZ 搜索，然后注册、登录。如果您已经有该平台的账号，请直接登录。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419045114-0qr8yB" alt="Image 71"></p><p>3.登录 CNZZ 数据统计专家网站后，填写以下信息，完成后点击 <strong>确认添加站点</strong> 。</p><p><strong>网站名称</strong>：自定义</p><p><strong>网站域名</strong>：实验资源 提供的 弹性IP</p><p><strong>网站首页</strong>：<strong><a href="http://xxx.xxx.xx/wp-blog/wp-admin/">http://xxx.xxx.xx/wp-blog/wp-admin/</a> (xxx.xxx.xx</strong> 表示 <strong>实验资源</strong> 提供的 **弹性IP)**；</p><p><strong>网站类型</strong> 和 <strong>网站地区</strong>：根据实际情况可自行选择</p><p><strong>网站简介</strong>：自定义</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419087927-lGBzzd" alt="Image 72"></p><p>4.复制红框内任意一种形式的代码。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419103972-eqW8q2" alt="Image 73"></p><p>点击左侧导航栏处的 <strong>查看密码</strong> ，勾选 <strong>开启查看密码服务</strong> ，然后输入 <strong>查看密码</strong> 。完成后点击 <strong>确定</strong> 。</p><p>注意：此处 <strong>查看密码</strong> 不是指 CNZZ 平台的 <strong>登录密码</strong> ，需要用户再次设置。您也可以勾选 <strong>无需密码</strong> ，不设置查看密码。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419144601-a1yTuQ" alt="Image 74"></p><p>5.切换回 WordPress 网站的主页面，点击 <strong>外观</strong> ，并选择子菜单下的 <strong>小工具</strong> 。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419159023-slIUeS" alt="Image 75"></p><p>在右侧展开的 <strong>小工具</strong> 选项中，点击 <strong>文本</strong> ，然后点击 <strong>页脚1</strong>（或 <strong>页脚2</strong>） ，完成后点击 <strong>添加小工具</strong> 。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419182808-hC4GOj" alt="Image 76"></p><p>6.弹框 <strong>标题</strong> 部分输入 <strong>站长统计</strong> ， <strong>内容</strong> 框中粘贴刚才在 CNZZ 平台复制的代码。完成后点击 <strong>保存</strong> 。 </p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419202335-H3wzyS" alt="Image 77"></p><p>点击如下图中的红框部分，可将弹框收拢或展开。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419213038-lbndNL" alt="Image 78"></p><p>7.点击左上角处的站点标题 <strong>HelloWorld</strong> ，页面下方看到我们添加的页脚标题，点击 <strong>站长统计</strong>。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419244072-9dXCrx" alt="Image 79"></p><p>8.输入 <strong>查看密码</strong> 后点击 <strong>查看数据</strong> 。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419255973-pQh3FR" alt="Image 80"></p><p>9.看到如下统计结果。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419269052-yvHvIs" alt="Image 81"></p><p>11.点击左侧的 <strong>访问明细</strong> ，查看当前两次访问的 IP 来源。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419280447-REnHTz" alt="Image 82"></p><p>点击 当前在线 ，查看访问流量分析。</p><p> <img src="https://edu.aliyun.com/lab/files/courses/24d0e20f6d794183bce217ba72d34e9e/sections/43edc625b80a4264a598adda13948f4e/content/images/course-24d0e20f6d794183bce217ba72d34e9e-section-43edc625b80a4264a598adda13948f4e-content-image-1668419289401-YeXa3u" alt="Image 83"></p><p>12.执行以下步骤，取消通过 CNZZ 对 WordPress 网站的访问量等数据的统计操作。</p><p>1）点击 <strong>站点设置</strong> ，下拉菜单中点击 <strong>统计设置</strong> ；</p><p>2）左侧导航栏处选择 <strong>关闭统计</strong> ；</p><p>3）点击 <strong>删除站点</strong> ，并在弹框中输入 <strong>登录密码</strong> 。</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clouder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-非线性规划和多目标规划模型</title>
    <link href="/2023/08/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E5%92%8C%E5%A4%9A%E7%9B%AE%E6%A0%87%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/08/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E5%92%8C%E5%A4%9A%E7%9B%AE%E6%A0%87%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="非线性规划概念和理论（略）"><a href="#非线性规划概念和理论（略）" class="headerlink" title="非线性规划概念和理论（略）"></a>非线性规划概念和理论（略）</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308141602970.png" alt="image-20230814160202904"></p><h2 id="方法一：（方法并不通用）"><a href="#方法一：（方法并不通用）" class="headerlink" title="方法一：（方法并不通用）"></a>方法一：（方法并不通用）</h2><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">import</span> cvxpy as cp<br><br><span class="hljs-attribute">x</span>=cp.Variable(<span class="hljs-number">2</span>,pos=True)<br><span class="hljs-comment">#目标函数</span><br><span class="hljs-attribute">obj</span>=cp.Minimize(sum(x**<span class="hljs-number">2</span>)-<span class="hljs-number">4</span>*x[<span class="hljs-number">0</span>]+<span class="hljs-number">4</span>)<br><span class="hljs-comment">#约束条件</span><br><span class="hljs-attribute">con</span>=[-x[<span class="hljs-number">0</span>]+x[<span class="hljs-number">1</span>]-<span class="hljs-number">2</span>&lt;=<span class="hljs-number">0</span>,<br>     <span class="hljs-attribute">x</span>[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span>-x[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>&lt;=<span class="hljs-number">0</span>]<br><span class="hljs-attribute">prob</span> = cp.Problem(obj, con)<br><span class="hljs-attribute">prob</span>.solve()<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;最优值为:&quot;</span>,round(prob.value,<span class="hljs-number">4</span>))<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;最优解为：\n&quot;</span>, np.round(x.value,<span class="hljs-number">4</span>))<br><br><span class="hljs-comment">#最优值为: 3.7989</span><br><span class="hljs-comment">#最优解为：</span><br><span class="hljs-comment"># [0.5536 1.3064]</span><br></code></pre></td></tr></table></figure><h2 id="方法二：（优选）"><a href="#方法二：（优选）" class="headerlink" title="方法二：（优选）"></a><strong>方法二：（优选）</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> optimize <span class="hljs-keyword">as</span> opt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><span class="hljs-comment"># 目标函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">objective</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x[<span class="hljs-number">0</span>] ** <span class="hljs-number">2</span> + x[<span class="hljs-number">1</span>] ** <span class="hljs-number">2</span> -<span class="hljs-number">4</span> * x[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span><br><span class="hljs-comment"># 约束条件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">constraint1</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span>  x[<span class="hljs-number">0</span>] - x[<span class="hljs-number">1</span>] + <span class="hljs-number">2</span> <span class="hljs-comment"># 不等约束</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">constraint2</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> -(x[<span class="hljs-number">0</span>]**<span class="hljs-number">2</span> - x[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 不等约束</span><br><span class="hljs-comment"># 边界约束</span><br>b = (<span class="hljs-number">0.0</span>, <span class="hljs-literal">None</span>)<br>bnds = (b, b)<br>con1 = &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: constraint1&#125;<br>con2 = &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: constraint2&#125;<br>cons = ([con1, con2])  <span class="hljs-comment"># 4个约束条件</span><br>x0 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br><span class="hljs-comment"># 计算</span><br>solution = minimize(objective, x0, method=<span class="hljs-string">&#x27;SLSQP&#x27;</span>,  bounds=bnds, constraints=cons)<br>x = solution.x<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;目标值: &#x27;</span> + <span class="hljs-built_in">str</span>(objective(x)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;答案为&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x1 = &#x27;</span> + <span class="hljs-built_in">str</span>(x[<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x2 = &#x27;</span> + <span class="hljs-built_in">str</span>(x[<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308141747824.png" alt="image-20230814170534459"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> optimize <span class="hljs-keyword">as</span> opt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><span class="hljs-comment"># 目标函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">objective</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x[<span class="hljs-number">0</span>] ** <span class="hljs-number">2</span> + x[<span class="hljs-number">1</span>] ** <span class="hljs-number">2</span> + x[<span class="hljs-number">2</span>] ** <span class="hljs-number">2</span> + <span class="hljs-number">8</span><br><span class="hljs-comment"># 约束条件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">constraint1</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x[<span class="hljs-number">0</span>] ** <span class="hljs-number">2</span> - x[<span class="hljs-number">1</span>] + x[<span class="hljs-number">2</span>] ** <span class="hljs-number">2</span>  <span class="hljs-comment"># 不等约束</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">constraint2</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> -(x[<span class="hljs-number">0</span>] + x[<span class="hljs-number">1</span>] ** <span class="hljs-number">2</span> + x[<span class="hljs-number">2</span>] ** <span class="hljs-number">2</span> - <span class="hljs-number">20</span>)  <span class="hljs-comment"># 不等约束</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">constraint3</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> -x[<span class="hljs-number">0</span>] - x[<span class="hljs-number">1</span>] ** <span class="hljs-number">2</span> + <span class="hljs-number">2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">constraint4</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x[<span class="hljs-number">1</span>] + <span class="hljs-number">2</span> * x[<span class="hljs-number">2</span>] ** <span class="hljs-number">2</span> - <span class="hljs-number">3</span>  <span class="hljs-comment"># 等式约束</span><br><br><br><span class="hljs-comment"># 边界约束</span><br>b = (<span class="hljs-number">0.0</span>, <span class="hljs-literal">None</span>)<br>bnds = (b, b, b)<br><br>con1 = &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: constraint1&#125;<br>con2 = &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: constraint2&#125;<br>con3 = &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;eq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: constraint3&#125;<br>con4 = &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;eq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: constraint4&#125;<br>cons = ([con1, con2, con3, con4])  <span class="hljs-comment"># 4个约束条件</span><br>x0 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br><span class="hljs-comment"># 计算</span><br>solution = minimize(objective, x0, method=<span class="hljs-string">&#x27;SLSQP&#x27;</span>,  bounds=bnds, constraints=cons)<br>x = solution.x<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;目标值: &#x27;</span> + <span class="hljs-built_in">str</span>(objective(x)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;答案为&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x1 = &#x27;</span> + <span class="hljs-built_in">str</span>(x[<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x2 = &#x27;</span> + <span class="hljs-built_in">str</span>(x[<span class="hljs-number">1</span>]))<br><br><span class="hljs-comment"># ----------------------------------</span><br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># 目标值: 10.651091840572583</span><br><span class="hljs-comment"># 答案为</span><br><span class="hljs-comment"># x1 = 0.5521673412903173</span><br><span class="hljs-comment"># x2 = 1.203259181851855</span><br></code></pre></td></tr></table></figure><h1 id="一个简单的非线性规划模型"><a href="#一个简单的非线性规划模型" class="headerlink" title="一个简单的非线性规划模型"></a>一个简单的非线性规划模型</h1><p>一家彩电制造商计划推出两种新产品：一种19英寸液晶平板电视机，制造商建议零售价为339美元；另一种21英寸液晶平板电视机，零售价为399美元。公司付出的成本为19英寸彩电每台195美元，21英寸彩电每台225美元，还要加上400000美元的固定成本。在竞争的销售市场中，每年售出的彩电数量会影响彩电的平均售价。据统计，对每种类型的彩电，每多售出一台，平均销售价格会下降1美分。而且19英寸彩电的销售会影响21英寸彩电的销售，反之亦然。据估计，每售出一台21英寸彩电，19英寸彩电的平均售价会下降0.3美分，而每售出一台19英寸彩电，21英寸彩电的平均售价会下降0.4美分。问题是：每种彩电应该各生产多少台？</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308141635639.png" alt="image-20230814162440576"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入 sympy 库，用于符号计算  </span><br><span class="hljs-keyword">import</span> sympy <span class="hljs-keyword">as</span> sp  <br><span class="hljs-comment"># 导入 pylab 库，用于数据可视化  </span><br><span class="hljs-keyword">import</span> pylab <span class="hljs-keyword">as</span> plt  <br>  <br><span class="hljs-comment"># 设置字体大小为14  </span><br>plt.rc(<span class="hljs-string">&#x27;font&#x27;</span>,size=<span class="hljs-number">14</span>)  <br>  <br><span class="hljs-comment"># 定义符号变量 x1 和 x2  </span><br>sp.var(<span class="hljs-string">&#x27;x1, x2&#x27;</span>)  <span class="hljs-comment">#定义符号变量  </span><br>  <br><span class="hljs-comment"># 定义目标函数 y，这是一个关于 x1 和 x2 的多项式  </span><br>y = (<span class="hljs-number">339</span>-<span class="hljs-number">0.01</span>* x1 -<span class="hljs-number">0.003</span>* x2 )*x1+(<span class="hljs-number">399</span>-<span class="hljs-number">0.004</span>*x1-<span class="hljs-number">0.01</span>*x2)*x2-(<span class="hljs-number">400000</span>+<span class="hljs-number">195</span>*x1+<span class="hljs-number">225</span>*x2)  <br><span class="hljs-comment"># 对目标函数进行化简  </span><br>y = sp.simplify(y)   <span class="hljs-comment">#化简  </span><br><span class="hljs-comment"># 求目标函数关于 x1 的偏导数  </span><br>dy1 = y.diff(x1)     <span class="hljs-comment">#求关于x1的偏导  </span><br><span class="hljs-comment"># 求目标函数关于 x2 的偏导数  </span><br>dy2 = y.diff(x2)     <span class="hljs-comment">#求关于x2的偏导  </span><br><span class="hljs-comment"># 通过偏导数求解最优化问题，得到 x1 和 x2 的最优解  </span><br>s = sp.solve([dy1, dy2], [x1, x2])  <br><span class="hljs-comment"># 取最优解的整数部分，即取整  </span><br>x10 = <span class="hljs-built_in">round</span>(<span class="hljs-built_in">float</span>(s[x1]))   <span class="hljs-comment">#取整  </span><br>x20 = <span class="hljs-built_in">round</span>(<span class="hljs-built_in">float</span>(s[x2]))  <br><span class="hljs-comment"># 将符号函数代入具体的数值，得到 y 在最优解处的值  </span><br>y0 = y.subs(&#123;x1: x10, x2: x20&#125;)  <span class="hljs-comment">#符号函数代入数值  </span><br><span class="hljs-comment"># 将符号函数转换为可以用于数值计算的匿名函数  </span><br>f = sp.lambdify(<span class="hljs-string">&#x27;x1, x2&#x27;</span>, y, <span class="hljs-string">&#x27;numpy&#x27;</span>)  <span class="hljs-comment">#符号函数转换为匿名函数  </span><br>  <br><span class="hljs-comment"># 创建一个在 0 到 10000 之间均匀分布的二维数据集，共有100个数据点  </span><br>x = plt.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">100</span>)  <br><span class="hljs-comment"># 创建一个二维的网格数据，将 x 和 y 数据组合在一起  </span><br>X, Y = plt.meshgrid(x, x)  <span class="hljs-comment">#转换为网格数据  </span><br><span class="hljs-comment"># 通过之前定义的匿名函数计算每个网格点的 y 值，得到三维网格图的数据  </span><br>Z = f(X, Y)  <br><span class="hljs-comment"># 在第一个子窗口中绘制三维网格图  </span><br>ax=plt.subplot(<span class="hljs-number">121</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)  <span class="hljs-comment">#第一个子窗口三维画图  </span><br>ax.plot_surface(X, Y, Z,cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)  <br>ax.set_xlabel(<span class="hljs-string">&#x27;$x_1$&#x27;</span>); ax.set_ylabel(<span class="hljs-string">&#x27;$x_2$&#x27;</span>)  <br><span class="hljs-comment"># 在第二个子窗口中创建一个新的图形，用于绘制等高线图  </span><br>plt.subplot(<span class="hljs-number">122</span>)  <span class="hljs-comment">#激活第二个子窗口  </span><br>contr=plt.contour(X,Y,Z,<span class="hljs-number">10</span>)  <span class="hljs-comment">#绘制10条等高线  </span><br>plt.clabel(contr)   <span class="hljs-comment">#对等高线进行标注  </span><br>plt.ylabel(<span class="hljs-string">&#x27;$x_2$&#x27;</span>,rotation=<span class="hljs-number">0</span>)  <br>plt.xlabel(<span class="hljs-string">&#x27;$x_1$&#x27;</span>)  <br>  <br><span class="hljs-comment"># 定义灵敏度分析的符号参数 a，并设置其取值范围为 [0.002, 0.02]  </span><br>sp.var(<span class="hljs-string">&#x27;a&#x27;</span>, pos=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#定义灵敏度分析的符号参数  </span><br>y = (<span class="hljs-number">339</span>-a*x1-<span class="hljs-number">0.003</span>*x2)*x1+(<span class="hljs-number">399</span>-<span class="hljs-number">0.004</span>*x1-<span class="hljs-number">0.01</span>*x2)*x2-(<span class="hljs-number">400000</span>+<span class="hljs-number">195</span>*x1+<span class="hljs-number">225</span>*x2)  <br>y = sp.simplify(y)   <span class="hljs-comment">#化简  </span><br>dy1 = y.diff(x1)     <span class="hljs-comment">#求关于x1的偏导  </span><br>dy2 = y.diff(x2)     <span class="hljs-comment">#求关于x2的偏导  </span><br>s = sp.solve([dy1, dy2], [x1, x2])  <br>sx1 = s[x1]; sx2 = s[x2]  <span class="hljs-comment">#提取解分量  </span><br>s1 = sp.lambdify(<span class="hljs-string">&#x27;a&#x27;</span>, sx1, <span class="hljs-string">&#x27;numpy&#x27;</span>)  <span class="hljs-comment">#将符号函数转换为匿名函数，以便于进行数值计算  </span><br>s2 = sp.lambdify(<span class="hljs-string">&#x27;a&#x27;</span>, sx2, <span class="hljs-string">&#x27;numpy&#x27;</span>)  <br>a0 = plt.linspace<br></code></pre></td></tr></table></figure><h1 id="二次规划模型"><a href="#二次规划模型" class="headerlink" title="二次规划模型"></a>二次规划模型</h1><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>工具包：Cvxopt python 凸优化包</p><p>函数原型：Cvxopt.solvers.qp(P,q,G,h,A,b)</p><p>P,q,G,h,A,b的含义参见上面的二次规划问题标准形式。</p><p>编程求解思路：</p><p>  1.对于一个给定的二次规划问题，先转换为标准形式（参见数学基础中所讲的二次型二中形式转换）</p><p>  2.对照标准形势，构建出矩阵P,q,G,h,A,b</p><p>  3.调用result=Cvxopt.solvers.qp(P,q,G,h,A,b)求解</p><p>  4.print（result）查看结果，其中result是一个字典，我们可直接获得其某个属性，e.g. print(result[‘x’])</p><p>下面我们来看一个例子</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151951688.jpg" alt="img"> </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> pprint   <br><span class="hljs-attribute">from</span> cvxopt import matrix, solvers    <br><span class="hljs-comment"># 创建一个cvxopt的matrix对象P，它是一个2x2的矩阵，其元素为浮点数4.0,1.0和1.0,2.0  </span><br><span class="hljs-attribute">P</span> = matrix([[<span class="hljs-number">4</span>.<span class="hljs-number">0</span>,<span class="hljs-number">1</span>.<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>.<span class="hljs-number">0</span>,<span class="hljs-number">2</span>.<span class="hljs-number">0</span>]])  <br><span class="hljs-comment"># 创建一个cvxopt的matrix对象q，它是一个1x2的矩阵，其元素为浮点数1.0和1.0  </span><br><span class="hljs-attribute">q</span> = matrix([<span class="hljs-number">1</span>.<span class="hljs-number">0</span>,<span class="hljs-number">1</span>.<span class="hljs-number">0</span>])  <br><span class="hljs-comment"># 创建一个cvxopt的matrix对象G，它是一个2x2的矩阵，其元素为浮点数-1.0,0.0和0.0,-1.0  </span><br><span class="hljs-attribute">G</span> = matrix([[-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>,<span class="hljs-number">0</span>.<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>.<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>]])  <br><span class="hljs-comment"># 创建一个cvxopt的matrix对象h，它是一个1x2的矩阵，其元素为浮点数0.0和0.0  </span><br><span class="hljs-attribute">h</span> = matrix([<span class="hljs-number">0</span>.<span class="hljs-number">0</span>,<span class="hljs-number">0</span>.<span class="hljs-number">0</span>])  <br><span class="hljs-comment"># 创建一个cvxopt的matrix对象A，它是一个1x2的矩阵，其元素为浮点数1.0和1.0，并且指定了它的形状为(1,2)，等价于A = matrix([[1.0],[1.0]])  </span><br><span class="hljs-attribute">A</span> = matrix([<span class="hljs-number">1</span>.<span class="hljs-number">0</span>,<span class="hljs-number">1</span>.<span class="hljs-number">0</span>],(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))#原型为cvxopt.matrix(array,dims)，等价于A = matrix([[<span class="hljs-number">1</span>.<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>.<span class="hljs-number">0</span>]])  <br><span class="hljs-comment"># 创建一个cvxopt的matrix对象b，它是一个标量，其值为浮点数1.0  </span><br><span class="hljs-attribute">b</span> = matrix([<span class="hljs-number">1</span>.<span class="hljs-number">0</span>])  <br><span class="hljs-comment"># 调用solvers的qp函数来求解二次规划问题，传入之前创建的P、q、G、h、A和b作为参数  </span><br><span class="hljs-attribute">result</span> = solvers.qp(P,q,G,h,A,b)  <br><span class="hljs-comment"># 打印出结果中的解向量&#x27;x&#x27;，注意结果是一个字典，需要使用中括号[&#x27;key&#x27;]的方式获取对应的值  </span><br><span class="hljs-attribute">print</span>(&#x27;x\n&#x27;,result[&#x27;x&#x27;])<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308141745958.png" alt="image-20230814174541903"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308141746321.png" alt="image-20230814174601270"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308141747350.png" alt="image-20230814174744310"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308141748946.png" alt="image-20230814174800902"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import cvxpy <span class="hljs-keyword">as</span> cp<br>import numpy <span class="hljs-keyword">as</span> np<br>c2 = np.<span class="hljs-built_in">array</span>(<span class="hljs-literal">[[-<span class="hljs-number">1</span>, -<span class="hljs-number">0.15</span>]</span>,<span class="hljs-literal">[-<span class="hljs-number">0.15</span>, -<span class="hljs-number">2</span>]</span>])<br>c1 = np.<span class="hljs-built_in">array</span>(<span class="hljs-literal">[<span class="hljs-number">98</span>, <span class="hljs-number">277</span>]</span>)<br>a = np.<span class="hljs-built_in">array</span>(<span class="hljs-literal">[[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]</span>, <span class="hljs-literal">[<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>]</span>])<br>b = np.<span class="hljs-built_in">array</span>(<span class="hljs-literal">[<span class="hljs-number">100</span>, <span class="hljs-number">0</span>]</span>)<br>x = cp.<span class="hljs-constructor">Variable(2, <span class="hljs-params">pos</span>=True)</span><br>obj =cp.<span class="hljs-constructor">Maximize(<span class="hljs-params">cp</span>.<span class="hljs-params">quad_form</span>(<span class="hljs-params">x</span>, <span class="hljs-params">c2</span>)</span> + c1 @ x)<br>con = <span class="hljs-literal">[ <span class="hljs-identifier">a</span> @ <span class="hljs-identifier">x</span> &lt;= <span class="hljs-identifier">b</span>]</span><br>prob = cp.<span class="hljs-constructor">Problem(<span class="hljs-params">obj</span>, <span class="hljs-params">con</span>)</span><br>prob.solve(solver=&#x27;CVXOPT&#x27;)<br>print(&#x27;最优解为：&#x27;, np.round(x.value,<span class="hljs-number">4</span>))<br>print(&#x27;最优值为：&#x27;, round(prob.value,<span class="hljs-number">4</span>))<br><br># 最优解为： <span class="hljs-literal">[<span class="hljs-number">35.3704</span> <span class="hljs-number">64.6296</span>]</span><br># 最优值为： <span class="hljs-number">11077.8704</span><br></code></pre></td></tr></table></figure><h2 id="投资组合问题"><a href="#投资组合问题" class="headerlink" title="投资组合问题"></a>投资组合问题</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151907584.png" alt="image-20230815190657459"></p><p><strong>协方差</strong></p><p>协方差（Covariance）是用于衡量两个变量之间关系的统计量。它描述了两个变量在变化过程中，变化方向是否一致以及变化的幅度大小。在数学和统计学中，协方差通常用于分析两个随机变量之间的关系，以及它们相对于各自的期望值的偏离程度。</p><p>协方差的计算公式为 Cov(X,Y) = E[(X-μx)(Y-μy)]，其中 X 和 Y 是两个随机变量，μx 和 μy 分别是它们各自的期望值，E[]表示期望运算。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151917491.png" alt="image-20230815191749381"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cvxpy <span class="hljs-keyword">as</span> cp<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.loadtxt(<span class="hljs-string">&#x27;data5_4.txt&#x27;</span>)<br>mu = a.mean(axis=<span class="hljs-number">0</span>)   <span class="hljs-comment">#计算年平均收益</span><br>F = np.cov(a.T)       <span class="hljs-comment">#计算协方差矩阵</span><br>x = cp.Variable(<span class="hljs-number">3</span>, pos=<span class="hljs-literal">True</span>)<br>ob1 = cp.Minimize(cp.quad_form(x,F))<br>con1 = [ mu @ x &gt;= <span class="hljs-number">0.15</span>,<br>        <span class="hljs-built_in">sum</span>(x) == <span class="hljs-number">1</span> ]<br>prob1 = cp.Problem(ob1, con1)<br>prob1.solve(solver=<span class="hljs-string">&#x27;CVXOPT&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最优值为：&#x27;</span>, <span class="hljs-built_in">round</span>(prob1.value,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最优解为：&#x27;</span>, np.<span class="hljs-built_in">round</span>(x.value,<span class="hljs-number">4</span>))<br><br><span class="hljs-comment"># 最优值为： 0.0228</span><br><span class="hljs-comment"># 最优解为： [0.5269 0.3578 0.1154]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151918575.png" alt="image-20230815191804520"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ob2 = cp.Maximize(mu @ x)<br>con2 = [sum(x) == 1,<br>        cp.quad_form(x, F) &lt;= 0.09]<br>prob2 = cp.Problem(ob2, con2)<br>prob2.solve(<span class="hljs-attribute">solver</span>=<span class="hljs-string">&#x27;CVXOPT&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最优值为：&#x27;</span>, round(prob2.value,4))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最优解为：&#x27;</span>, np.round(x.value,4))<br><br><span class="hljs-comment"># 最优值为： 0.2334</span><br><span class="hljs-comment"># 最优解为： [0.     0.0562 0.9438]</span><br></code></pre></td></tr></table></figure><h1 id="非线性规划的求解及应用"><a href="#非线性规划的求解及应用" class="headerlink" title="非线性规划的求解及应用"></a>非线性规划的求解及应用</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151920609.png"></p><h3 id="目标函数不是凸函数"><a href="#目标函数不是凸函数" class="headerlink" title="目标函数不是凸函数"></a><strong>目标函数不是凸函数</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151921873.png" alt="image-20230815192155805"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np  <br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize    <br><span class="hljs-comment"># 定义矩阵c2  </span><br>c2 = np.array([[-<span class="hljs-number">1</span>, -<span class="hljs-number">0.15</span>],[-<span class="hljs-number">0.15</span>, -<span class="hljs-number">2</span>]])    <br><span class="hljs-comment"># 定义向量c1  </span><br>c1 = np.array([<span class="hljs-number">98</span>, <span class="hljs-number">277</span>])    <br><span class="hljs-comment"># 定义矩阵a  </span><br>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>]])    <br><span class="hljs-comment"># 定义向量b  </span><br>b = np.array([<span class="hljs-number">100</span>, <span class="hljs-number">0</span>])    <br><span class="hljs-comment"># 定义目标函数，即要最小化的函数  </span><br>obj = <span class="hljs-keyword">lambda</span> x: x @ c2 @ x + c1 @ x    <br><span class="hljs-comment"># 定义约束条件，即不等式约束  </span><br>con =&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> x: b-a@x&#125;    <br><span class="hljs-comment"># 定义变量的上下界，这里使用的是无界约束，即取值范围为正无穷大  </span><br>bd = [(<span class="hljs-number">0</span>, np.inf) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a.shape[<span class="hljs-number">1</span>])]  <br><span class="hljs-comment"># 使用scipy的minimize函数进行最小化求解，得到的结果存储在res中  </span><br>res = minimize(obj, np.random.randn(<span class="hljs-number">2</span>), constraints=con, bounds=bd)    <br><span class="hljs-comment"># 打印结果信息  </span><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><p>以上代码中，<code>obj</code>是目标函数，<code>con</code>是不等式约束条件，<code>bd</code>是变量的上下界。<code>minimize</code>函数根据这些信息求解最小值。最后的结果存储在<code>res</code>中，并打印出来。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151930662.png" alt="image-20230815193005625"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br> <br>obj=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">sum</span>(x**<span class="hljs-number">2</span>)+<span class="hljs-number">8</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">constr1</span>(<span class="hljs-params">x</span>):<br>    x1, x2, x3 = x<br>    <span class="hljs-keyword">return</span> [x1**<span class="hljs-number">2</span>-x2+x3**<span class="hljs-number">2</span>,<br>            <span class="hljs-number">20</span>-x1-x2**<span class="hljs-number">2</span>-x3**<span class="hljs-number">2</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">constr2</span>(<span class="hljs-params">x</span>):<br>    x1, x2, x3 = x<br>    <span class="hljs-keyword">return</span> [-x1-x2**<span class="hljs-number">2</span>+<span class="hljs-number">2</span>, x2+<span class="hljs-number">2</span>*x3**<span class="hljs-number">2</span>-<span class="hljs-number">3</span>]<br>con1=&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: constr1&#125;<br>con2=&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;eq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: constr2&#125;            <br>con=[con1, con2]  <span class="hljs-comment">#构造全部约束条件</span><br>bd = [(<span class="hljs-number">0</span>, np.inf) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>res = minimize(obj, np.random.randn(<span class="hljs-number">3</span>), constraints=con, bounds=bd)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment">#输出解的信息</span><br></code></pre></td></tr></table></figure><h3 id="目标函数是凸函数"><a href="#目标函数是凸函数" class="headerlink" title="目标函数是凸函数"></a><strong>目标函数是凸函数</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151931411.png" alt="image-20230815193123363"></p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cvxpy <span class="hljs-keyword">as</span> cp  <br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np  <br><span class="hljs-comment"># 创建一个长度为4的数组c，其中包含了1到5的整数（1,2,3,4）  </span><br>c = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)  <br><span class="hljs-comment"># 创建一个3x4的二维数组a，表示线性方程的系数  </span><br>a = np.array([[<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">3</span>], [<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]])   <br><span class="hljs-comment"># 创建一个长度为3的一维数组b，表示线性方程的常数项  </span><br>b = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>/<span class="hljs-number">2</span>])   <br><span class="hljs-comment"># 创建一个长度为4的变量x，用于表示优化问题的决策变量  </span><br>x = cp.Variable(<span class="hljs-number">4</span>)    <br><span class="hljs-comment"># 定义优化问题的目标函数，即求c中每个元素对应的|x|的最小值，使用cvxpy的绝对值函数abs()  </span><br>obj = cp.Minimize(c @ cp.<span class="hljs-built_in">abs</span>(x))    <br><span class="hljs-comment"># 定义优化问题的约束条件，即线性方程ax=b成立  </span><br>con = [a @ x == b]    <br><span class="hljs-comment"># 创建一个cvxpy问题对象，输入目标函数和约束条件  </span><br>prob = cp.Problem(obj, con)    <br><span class="hljs-comment"># 使用GLPK_MI求解器解决优化问题，GLPK是线性规划问题的求解器，MI表示加入了不确定性的混合整数规划求解器  </span><br>prob.solve(solver=<span class="hljs-string">&#x27;GLPK_MI&#x27;</span>)    <br><span class="hljs-comment"># 打印出优化问题的最优值  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优值为:&quot;</span>, prob.value)  <br><span class="hljs-comment"># 打印出优化问题的最优解  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优解为：\n&quot;</span>, x.value)<br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><strong>方法二</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151935000.png" alt="image-20230815193540950"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import cvxpy as cp<br>import numpy as np<br> <br>c = np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)<br><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[1,-1,-1,1]</span>,<span class="hljs-selector-attr">[1,-1,1,-3]</span>,<span class="hljs-selector-attr">[1,-1,-2,3]</span>])<br><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[0,1,-1/2]</span>)<br>u = cp<span class="hljs-selector-class">.Variable</span>(<span class="hljs-number">4</span>, pos=True)<br>v = cp<span class="hljs-selector-class">.Variable</span>(<span class="hljs-number">4</span>, pos=True)<br>obj = cp<span class="hljs-selector-class">.Minimize</span>(c@(u+v))<br>con = <span class="hljs-selector-attr">[a@(u-v)==b]</span><br>prob = cp<span class="hljs-selector-class">.Problem</span>(obj, con)<br>prob<span class="hljs-selector-class">.solve</span>(solver=<span class="hljs-string">&#x27;GLPK_MI&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;最优值为:&quot;</span>, prob.value)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;最优解为：\n&quot;</span>, u.value, <span class="hljs-string">&#x27;\n&#x27;</span>, v.value)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;原问题的最优解为：&quot;</span>, u.value-v.value)</span></span><br></code></pre></td></tr></table></figure><h3 id="供应与选址"><a href="#供应与选址" class="headerlink" title="供应与选址"></a>供应与选址</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151937090.png" alt="image-20230815193757038"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308151938473.png" alt="image-20230815193818425"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br> <br>d = np.loadtxt(<span class="hljs-string">&#x27;data5_8.txt&#x27;</span>)<br>a = d[<span class="hljs-number">0</span>]; b = d[<span class="hljs-number">1</span>]; c = d[<span class="hljs-number">2</span>]<br>e = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">20</span>])<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">obj</span>(<span class="hljs-params">xyz</span>):<br>    x = xyz[: <span class="hljs-number">2</span>]; y = xyz[<span class="hljs-number">2</span>: <span class="hljs-number">4</span>]<br>    z = xyz [<span class="hljs-number">4</span>:].reshape(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>)<br>    obj =<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            obj = obj + z[i,j] * np.sqrt((x[j]-a[i])**<span class="hljs-number">2</span>+(y[j]-b[i])**<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> obj<br>con = []<br>con.append(&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;eq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> z: z[<span class="hljs-number">4</span>:].reshape(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)-c&#125;)<br>con.append(&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;ineq&#x27;</span>, <span class="hljs-string">&#x27;fun&#x27;</span>: <span class="hljs-keyword">lambda</span> z: e-z[<span class="hljs-number">4</span>:].reshape(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>)&#125;)<br>bd = [(<span class="hljs-number">0</span>, np.inf) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]  <span class="hljs-comment">#决策向量的界限</span><br>res = minimize(obj, np.random.rand(<span class="hljs-number">16</span>), constraints=con, bounds=bd)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment">#输出解的信息</span><br>s=np.<span class="hljs-built_in">round</span>(res.x, <span class="hljs-number">4</span>)     <span class="hljs-comment">#提出最优解的取值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;目标函数的最优值：&#x27;</span>, <span class="hljs-built_in">round</span>(res.fun,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x的坐标为：&#x27;</span>, s[:<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y的坐标为：&#x27;</span>, s[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;料场到工地的运输量为：\n&#x27;</span>, s[<span class="hljs-number">4</span>:].reshape(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>).T)<br></code></pre></td></tr></table></figure><h1 id="多目标规划"><a href="#多目标规划" class="headerlink" title="多目标规划"></a>多目标规划</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308152012867.png" alt="image-20230815201239816"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308152013903.png" alt="image-20230815201303858"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308152013619.png" alt="image-20230815201315573"></p><h2 id="线性加权法"><a href="#线性加权法" class="headerlink" title="线性加权法"></a>线性加权法</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308152013995.png" alt="image-20230815201358935"></p><h2 id="理想点法"><a href="#理想点法" class="headerlink" title="理想点法"></a>理想点法</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308152014223.png" alt="image-20230815201426183"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308152014872.png" alt="image-20230815201432829"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308152014629.png" alt="image-20230815201444580"></p><h2 id="序贯解法"><a href="#序贯解法" class="headerlink" title="序贯解法"></a>序贯解法</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308152015514.png" alt="image-20230815201522464"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import numpy as np<br>import cvxpy as cp<br> <br>c1 = np.array([-2, -3])<br>c2 = np.array([1, 2])<br>a = np.array([[0.5, 0.25], [0.2, 0.2], [1, 5], [-1, -1]])<br>b = np.array([8, 4, 72, -10])<br>x = cp.Variable(2, <span class="hljs-attribute">pos</span>=<span class="hljs-literal">True</span>)<br>obj = cp.Minimize(0.5 * (c1 + c2) @ x)<br>con = [a @ x &lt;= b]<br>prob = cp.Problem(obj, con)<br>prob.solve(<span class="hljs-attribute">solver</span>=<span class="hljs-string">&#x27;GLPK_MI&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最优解为：&#x27;</span>, x.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最优值为：&#x27;</span>, prob.value)<br>obj1 = cp.Minimize(c1 @ x)<br>prob1 = cp.Problem(obj1, con)<br>prob1.solve(<span class="hljs-attribute">solver</span>=<span class="hljs-string">&#x27;GLPK_MI&#x27;</span>)<br>v1 = prob1.value  #第一个目标函数的最优值<br>obj2 = cp.Minimize(c2 @ x)<br>prob2 = cp.Problem(obj2, con)<br>prob2.solve(<span class="hljs-attribute">solver</span>=<span class="hljs-string">&#x27;GLPK_MI&#x27;</span>)<br>v2 = prob2.value  #第二个目标函数的最优值<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;两个目标函数的最优值分别为：&#x27;</span>, v1, v2)<br>obj3 = cp.Minimize((c1@x-v1)*<span class="hljs-number">*2</span>+(c2@x-v2)*<span class="hljs-number">*2</span>)<br>prob3 = cp.Problem(obj3, con)<br>prob3.solve(<span class="hljs-attribute">solver</span>=<span class="hljs-string">&#x27;CVXOPT&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解法二的最优解：&#x27;</span>, x.value)<br>con.append( c1 @ x == v1)<br>prob4 = cp.Problem(obj2, con)<br>prob4.solve(<span class="hljs-attribute">solver</span>=<span class="hljs-string">&#x27;GLPK_MI&#x27;</span>)<br>x3 = x.value   #提出最优解的值<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解法三的最优解：&#x27;</span>, x3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;利润：&#x27;</span>, -c1@x3); <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;排放污染物：&#x27;</span>, c2@x3)<br><br><span class="hljs-comment"># 最优解为： [12.  8.]</span><br><span class="hljs-comment"># 最优值为： -10.0</span><br><span class="hljs-comment"># 两个目标函数的最优值分别为： -53.0 10.0</span><br><span class="hljs-comment"># 解法二的最优解： [13.3598425   5.28031523]</span><br><span class="hljs-comment"># 解法三的最优解： [ 7. 13.]</span><br><span class="hljs-comment"># 利润： 53.0</span><br><span class="hljs-comment"># 排放污染物： 33.0</span><br></code></pre></td></tr></table></figure><h1 id="飞行管理问题"><a href="#飞行管理问题" class="headerlink" title="飞行管理问题"></a>飞行管理问题</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-线性代数模型</title>
    <link href="/2023/08/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/08/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="特征值与特征向量"><a href="#特征值与特征向量" class="headerlink" title="特征值与特征向量"></a>特征值与特征向量</h1><h2 id="差分方程"><a href="#差分方程" class="headerlink" title="差分方程"></a>差分方程</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308011600432.png"></p><p>Python代码如下：</p><figure class="highlight stata"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs stata">import sympy <span class="hljs-keyword">as</span> sp<br>sp.<span class="hljs-keyword">var</span>(&#x27;k&#x27;); y = sp.Function(&#x27;y&#x27;)<br>f = <span class="hljs-built_in">y</span>(k+2)-<span class="hljs-built_in">y</span>(k+1)-<span class="hljs-built_in">y</span>(k)<br>s = sp.rsolve(f, <span class="hljs-built_in">y</span>(k),&#123;<span class="hljs-built_in">y</span>(0):1,<span class="hljs-built_in">y</span>(1):1&#125;)<br><span class="hljs-keyword">print</span>(s)<br></code></pre></td></tr></table></figure><p>SymPy库中的<code>rsolve</code>函数来求解一个符号表达式<code>f</code>关于未知函数<code>y(k)</code>的解析解。其中，<code>f</code>是一个符号表达式，<code>y(k)</code>是一个未知函数，<code>k</code>是变量。<code>&#123;y(0):1,y(1):1&#125;</code>是一个字典，用于给<code>y</code>的初始值进行赋值。在这里，<code>y(0)</code>被赋值为1，<code>y(1)</code>被赋值为1。</p><p>这个函数返回一个字典<code>s</code>，其中包含了了解析解的数值。可以通过<code>s[y(k)]</code>来获取<code>y(k)</code>的解析解。</p><h2 id="莱斯利（Leslie）种群模型-—"><a href="#莱斯利（Leslie）种群模型-—" class="headerlink" title="莱斯利（Leslie）种群模型  —- @"></a>莱斯利（Leslie）种群模型  —- @</h2><p>莱斯利模型是研究动物种群数量增长的重要模型，这一模型研究了种群中雌性动物的年龄分布和数量增长的规律。这一模型也可以应用于人口增长的年龄分布问题。</p><p>《Python数学建模算法与应用》P56</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308011640824.png"></p><p>Python代码如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> sympy <span class="hljs-keyword">as</span> sp<br> X0 = np.array([<span class="hljs-number">500</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">500</span>])<br>L = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0</span>]])<br>X1 = L @ X0; X2 = L @ X1  <span class="hljs-comment">#@表示矩阵乘法</span><br>X3 = L @ X2<br> Ls = sp.Matrix([[<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], [sp.Rational(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                [<span class="hljs-number">0</span>, sp.Rational(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>), <span class="hljs-number">0</span>]])  <span class="hljs-comment">#符号矩阵</span><br>sp.<span class="hljs-keyword">var</span>(<span class="hljs-string">&#x27;lamda&#x27;</span>)  <span class="hljs-comment">#定义符号变量</span><br>p = Ls.charpoly(lamda)  <span class="hljs-comment">#计算特征多项式</span><br>w1 = sp.roots(p)     <span class="hljs-comment">#计算特征值</span><br>w2 = Ls.eigenvals()  <span class="hljs-comment">#直接计算特征值</span><br>v = Ls.eigenvects()  <span class="hljs-comment">#直接计算特征向量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;特征值为：&quot;</span>,w2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;特征向量为：\n&quot;</span>,v)<br>P, D = Ls.diagonalize()  <span class="hljs-comment">#相似对角化</span><br>Pinv = P.inv()  <span class="hljs-comment">#求逆阵</span><br>Pinv = sp.simplify(Pinv)<br>cc = Pinv @ X0<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;P=\n&#x27;</span>, P)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>, cc[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h2 id="PageRank算法-—"><a href="#PageRank算法-—" class="headerlink" title="PageRank算法  —- @"></a>PageRank算法  —- @</h2><p>PageRank算法在数学建模下有广泛的应用。以下是一些具体的应用示例：</p><ol><li>搜索引擎排名：PageRank算法最初被用于搜索引擎排名，通过评估网页的重要性来确定搜索结果的排序。通过数学模型，可以计算出每个网页的PageRank值，从而影响搜索结果的排名。</li><li>社交网络分析：PageRank算法可以用于分析社交网络中的用户影响力。通过分析用户之间的互动和链接关系，可以计算出每个用户的PageRank值，从而确定其在社交网络中的影响力。</li><li>学术文献排名：PageRank算法可以用于评估学术文献的质量和重要性。通过分析文献之间的引用关系和链接关系，可以计算出每个文献的PageRank值，从而确定其在学术领域中的地位。</li><li>电子商务推荐系统：PageRank算法可以用于电子商务网站的推荐系统。通过分析用户的历史购买记录和商品之间的链接关系，可以计算出每个商品的PageRank值，从而向用户推荐高质量的商品。</li><li>网络广告投放：PageRank算法可以用于评估网站的质量和广告投放效果。通过分析网站的PageRank值和广告的点击率等数据，可以确定哪些网站是高质量的，哪些广告效果更好，从而优化广告投放策略。</li></ol><p>《Python数学建模算法与应用》P60</p><h1 id="矩阵的奇异值分解及应用-—"><a href="#矩阵的奇异值分解及应用-—" class="headerlink" title="矩阵的奇异值分解及应用 —- @"></a>矩阵的奇异值分解及应用 —- @</h1><p>矩阵的奇异值分解（Singular Value Decomposition，SVD）是数学建模中的一种重要方法，它可以将一个矩阵分解为三个矩阵的乘积：U、Σ、V，其中U和V是正交矩阵，Σ是一个对角矩阵。SVD的应用非常广泛，以下是一些例子：</p><ol><li>数据压缩：SVD可以用于数据压缩和降维。通过将数据矩阵进行SVD分解，可以选择保留一部分较大的奇异值，忽略较小的奇异值，从而降低数据的维度和冗余度。</li><li>图像处理：SVD可以用于图像处理和图像压缩。通过将图像矩阵进行SVD分解，可以选择保留一部分较大的奇异值和对应的正交矩阵，忽略较小的奇异值和对应的正交矩阵，从而压缩图像并提高图像的质量。</li><li>金融风险管理：SVD可以用于金融风险管理。通过将金融数据矩阵进行SVD分解，可以选择保留一部分较大的奇异值和对应的正交矩阵，忽略较小的奇异值和对应的正交矩阵，从而降低风险的波动性和敏感性。</li><li>推荐系统：SVD可以用于推荐系统。通过将用户评分矩阵进行SVD分解，可以选择保留一部分较大的奇异值和对应的正交矩阵，忽略较小的奇异值和对应的正交矩阵，从而得到用户对物品的潜在兴趣和推荐结果。</li></ol><p>总之，SVD是数学建模中的一种重要方法，可以用于数据压缩、图像处理、金融风险管理、推荐系统等多个领域，可以帮助我们更好地理解和处理数据。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-数学规划类基本问题</title>
    <link href="/2023/07/30/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%95%B0%E5%AD%A6%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/07/30/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%95%B0%E5%AD%A6%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="线性规划模型"><a href="#线性规划模型" class="headerlink" title="线性规划模型"></a>线性规划模型</h1><h2 id="标准型规划问题"><a href="#标准型规划问题" class="headerlink" title="标准型规划问题"></a>标准型规划问题</h2><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307301721957.png" alt="屏幕截图 2023-07-30 171901" style="zoom: 80%;" /><h3 id="方法一：scipy库求解"><a href="#方法一：scipy库求解" class="headerlink" title="方法一：scipy库求解"></a>方法一：scipy库求解</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> optimize<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment">#求解函数</span><br>res = optimize.linprog(c,A,b,Aeq,beq,LB,UB,X0,OPTIONS)<br><span class="hljs-comment">#目标函数最小值</span><br><span class="hljs-built_in">print</span>(res.fun)<br><span class="hljs-comment">#最优解</span><br><span class="hljs-built_in">print</span>(rres.x)<br></code></pre></td></tr></table></figure><ul><li><code>c</code>：目标函数的系数向量。</li><li><code>A</code>：约束条件的系数矩阵。</li><li><code>b</code>：约束条件的右侧常数向量。</li><li><code>Aeq</code>：等式约束条件的系数矩阵。</li><li><code>beq</code>：等式约束条件的右侧常数向量。</li><li><code>LB</code>：变量下界向量。</li><li><code>UB</code>：变量上界向量。</li><li><code>X0</code>：初始解向量。</li><li><code>OPTIONS</code>：一个字典，包含各种控制求解器的选项。</li></ul><p>注意：</p><ul><li>不等式约束条件是 小于等于号（ &lt;= ）</li><li>如果<code>c</code>中的所有元素都是&gt;=0，则函数求解最小值；如果<code>c</code>中的所有元素都是&lt;=0，则函数求解最大值。</li></ul><p>例1：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307301724006.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from scipy import optimize<br>import numpy as np<br>#确定c,A,<span class="hljs-selector-tag">b</span>,Aeq,beq<br>c = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[2,3,-5]</span>)#目标函数系数<br>A = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[-2,5,-1]</span>,<span class="hljs-selector-attr">[1,3,1]</span>])  #不等式约束左边系数矩阵<br><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[-10,12]</span>)#不等式约束右边系数矩阵<br>Aeq = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[1,1,1]</span>])#等式的左边系数矩阵<br>beq = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[7]</span>)#等式的右边系数矩阵<br>#求-<span class="hljs-number">1</span><br>res = optimize<span class="hljs-selector-class">.linprog</span>(-c,A,<span class="hljs-selector-tag">b</span>,Aeq,beq)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(res)</span></span><br></code></pre></td></tr></table></figure><p>上述代码运行结果：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span>: -14.571428571428571    #目标函数最小值</span><br>x: [ <span class="hljs-number">6.429e+00</span>  <span class="hljs-number">5.714e-01</span>  <span class="hljs-number">0.000e+00</span>]#最优解<br></code></pre></td></tr></table></figure><p>使用方法二求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pulp<br>z = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">5</span>]         <span class="hljs-comment">#目标函数系数矩阵</span><br><span class="hljs-comment">#约束</span><br>a = [[-<span class="hljs-number">2</span>,<span class="hljs-number">5</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]]<br>b = [-<span class="hljs-number">10</span>,<span class="hljs-number">12</span>]<br>eqa = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>eqb = [<span class="hljs-number">7</span>]<br><span class="hljs-comment">#确定最大化最小化问题，最大化只要把Min改成Max即可</span><br>m = pulp.LpProblem(sense=pulp.LpMaximize)<br><span class="hljs-comment">#定义三个变量放到列表中</span><br>x = [pulp.LpVariable(<span class="hljs-string">f&#x27;x<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>, lowBound=<span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><span class="hljs-comment">#定义目标函数，lpDot可以将两个列表的对应为相乘再加和</span><br><span class="hljs-comment">#相当于z[0] * x[0] + z[1] * x[1] + z[2] * x[2]</span><br>m +=pulp.lpDot(z,x)<br><span class="hljs-comment">#设置约束条件</span><br><span class="hljs-comment">#不等式约束条件</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    m += (pulp.lpDot(a[i],x) &lt;= b[i])<br><span class="hljs-comment">#等式约束条件</span><br>m += pulp.lpDot(eqa, x) == eqb<br><span class="hljs-comment">#求解</span><br>m.solve()<br><span class="hljs-comment">#输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;优化结果：<span class="hljs-subst">&#123;pulp.value(m.objective)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;参数取值：<span class="hljs-subst">&#123;[pulp.value(var) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> x]&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上述代码运行结果为：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">优化结果：<span class="hljs-number">14.57142851</span><br>参数取值：[<span class="hljs-number">6.4285714</span>, <span class="hljs-number">0.57142857</span>, <span class="hljs-number">0</span>.<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h3 id="方法二：pulp库求解"><a href="#方法二：pulp库求解" class="headerlink" title="方法二：pulp库求解"></a>方法二：pulp库求解</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307301745181.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pulp<br>z = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]         <span class="hljs-comment">#目标函数系数矩阵</span><br><span class="hljs-comment">#约束</span><br>a = [[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>]]<br>b = [<span class="hljs-number">8</span>,<span class="hljs-number">6</span>]<br>eqa = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br>eqb = [<span class="hljs-number">101</span>]<br><span class="hljs-comment">#确定最大化最小化问题，最大化只要把Min改成Max即可</span><br>m = pulp.LpProblem(sense=pulp.LpMaximize)<br><span class="hljs-comment">#定义三个变量放到列表中</span><br>x = [pulp.LpVariable(<span class="hljs-string">f&#x27;x<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>, lowBound=<span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><span class="hljs-comment">#定义目标函数，lpDot可以将两个列表的对应为相乘再加和</span><br><span class="hljs-comment">#相当于z[0] * x[0] + z[1] * x[1] + z[2] * x[2]</span><br>m +=pulp.lpDot(z,x)<br><span class="hljs-comment">#设置约束条件</span><br><span class="hljs-comment">#不等式约束条件</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    m += (pulp.lpDot(a[i],x) &gt;= b[i])<br><span class="hljs-comment">#等式约束条件</span><br>m += pulp.lpDot(eqa, x) == eqb<br><span class="hljs-comment">#求解</span><br>m.solve()<br><span class="hljs-comment">#输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;优化结果：<span class="hljs-subst">&#123;pulp.value(m.objective)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;参数取值：<span class="hljs-subst">&#123;[pulp.value(var) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> x]&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上述代码运行结果：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">优化结果：<span class="hljs-number">202</span>.<span class="hljs-number">0</span><br>参数取值：<span class="hljs-string">[101.0, 0.0, 0.0]</span><br></code></pre></td></tr></table></figure><p>使用方法一求解本题：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from scipy import optimize<br>import numpy as np<br>#确定c,A,<span class="hljs-selector-tag">b</span>,Aeq,beq<br>c = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[2,3,1]</span>)#目标函数系数<br>A = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[-1,-4,-2]</span>,<span class="hljs-selector-attr">[-3,-2,0]</span>])  #不等式约束左边系数矩阵<br><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[-8,-6]</span>)#不等式约束右边系数矩阵<br>Aeq = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[1,2,4]</span>])#等式的左边系数矩阵<br>beq = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[101]</span>)#等式的右边系数矩阵<br>#求解<br>res = optimize<span class="hljs-selector-class">.linprog</span>(-c,A,<span class="hljs-selector-tag">b</span>,Aeq,beq,method=<span class="hljs-string">&#x27;highs&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(res)</span></span><br></code></pre></td></tr></table></figure><p>上述代码运行结果：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span>: -202.0</span><br>x: [ <span class="hljs-number">1.010e+02</span>  <span class="hljs-number">0.000e+00</span>  <span class="hljs-number">0.000e+00</span>]<br></code></pre></td></tr></table></figure><h3 id="方法三：cvxpy库求解"><a href="#方法三：cvxpy库求解" class="headerlink" title="方法三：cvxpy库求解"></a>方法三：cvxpy库求解</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311336775.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> cvxpy as cp<br><span class="hljs-attribute">x</span>=cp.Variable((<span class="hljs-number">5</span>,<span class="hljs-number">4</span>), pos=True)    #pos=True表示其元素均为正数<br><span class="hljs-attribute">obj</span>=cp.Maximize(<span class="hljs-number">1</span>.<span class="hljs-number">15</span>*x[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>.<span class="hljs-number">40</span>*x[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]+<span class="hljs-number">1</span>.<span class="hljs-number">25</span>*x[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>.<span class="hljs-number">06</span>*x[<span class="hljs-number">4</span>,<span class="hljs-number">3</span>])<br><span class="hljs-attribute">cons</span>=[x[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]+x[<span class="hljs-number">0</span>,<span class="hljs-number">3</span>]==<span class="hljs-number">100000</span>,<br>      <span class="hljs-attribute">x</span>[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]+x[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]+x[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]==<span class="hljs-number">1</span>.<span class="hljs-number">06</span>*x[<span class="hljs-number">0</span>,<span class="hljs-number">3</span>],<br>      <span class="hljs-attribute">x</span>[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]+x[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]+x[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]==<span class="hljs-number">1</span>.<span class="hljs-number">15</span>*x[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>.<span class="hljs-number">06</span>*x[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],<br>      <span class="hljs-attribute">x</span>[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>]+x[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]==<span class="hljs-number">1</span>.<span class="hljs-number">15</span>*x[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>.<span class="hljs-number">06</span>*x[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>      <span class="hljs-attribute">x</span>[<span class="hljs-number">4</span>,<span class="hljs-number">3</span>]==<span class="hljs-number">1</span>.<span class="hljs-number">15</span>*x[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>.<span class="hljs-number">06</span>*x[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],<br>      <span class="hljs-attribute">x</span>[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">40000</span>, x[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]&lt;=<span class="hljs-number">30000</span>]<br><span class="hljs-attribute">prob</span>=cp.Problem(obj, cons)<br><span class="hljs-attribute">prob</span>.solve(solver=&#x27;OSQP&#x27;)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;最优值为：&quot;</span>, prob.value)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;最优解为：&quot;</span>, x.value)<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">最优值为： 143749.99999655166<br>最优解为： [[5.75675630e<span class="hljs-string">+04</span> 4.77996601e<span class="hljs-string">+03</span> 4.77996601e<span class="hljs-string">+03</span> 4.24324370e<span class="hljs-string">+04</span>]<br> [1.49783832e<span class="hljs-string">+04</span> 4.77996601e<span class="hljs-string">+03</span> 3.00000000e<span class="hljs-string">+04</span> 3.72022324e<span class="hljs-string">-05</span>]<br> [1.64696307e<span class="hljs-string">+04</span> 4.00000000e<span class="hljs-string">+04</span> 4.77996601e<span class="hljs-string">+03</span> 9.73306683e<span class="hljs-string">+03</span>]<br> [2.75421915e<span class="hljs-string">+04</span> 4.77996601e<span class="hljs-string">+03</span> 4.77996601e<span class="hljs-string">+03</span> 3.45246627e<span class="hljs-string">-05</span>]<br> [4.77996601e<span class="hljs-string">+03</span> 4.77996601e<span class="hljs-string">+03</span> 4.77996601e<span class="hljs-string">+03</span> 1.89400753e<span class="hljs-string">+04</span>]]<br></code></pre></td></tr></table></figure><h2 id="运输问题"><a href="#运输问题" class="headerlink" title="运输问题"></a>运输问题</h2><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311441376.png" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311428663.png" style="zoom:67%;" /><p>data4_5_3的文件如图：</p><table><thead><tr><th>6</th><th>2</th><th>6</th><th>7</th><th>4</th><th>2</th><th>5</th><th>9</th><th>60</th></tr></thead><tbody><tr><td>4</td><td>9</td><td>5</td><td>3</td><td>8</td><td>5</td><td>8</td><td>2</td><td>55</td></tr><tr><td>5</td><td>2</td><td>1</td><td>9</td><td>7</td><td>4</td><td>3</td><td>3</td><td>51</td></tr><tr><td>7</td><td>6</td><td>7</td><td>3</td><td>9</td><td>2</td><td>7</td><td>1</td><td>43</td></tr><tr><td>2</td><td>3</td><td>9</td><td>5</td><td>7</td><td>2</td><td>6</td><td>5</td><td>41</td></tr><tr><td>5</td><td>5</td><td>2</td><td>2</td><td>8</td><td>1</td><td>4</td><td>3</td><td>52</td></tr><tr><td>35</td><td>37</td><td>22</td><td>32</td><td>41</td><td>32</td><td>43</td><td>38</td><td></td></tr></tbody></table><p>代码如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import cvxpy as cp<br>import pandas as pd<br><span class="hljs-attribute">data</span>=pd.read_excel(&quot;data4_5_3.xlsx&quot;, <span class="hljs-attribute">header</span>=None)<br><span class="hljs-attribute">data</span>=data.values<br><span class="hljs-attribute">c</span>=data[:-1, :-1]<br><span class="hljs-attribute">d</span>=data[-1, :-1]<br><span class="hljs-attribute">e</span>=data[:-1, -1]<br><span class="hljs-attribute">x</span>=cp.Variable((6,8), <span class="hljs-attribute">pos</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-attribute">obj</span>=cp.Minimize(cp.sum(cp.multiply(c,x)))<br>con= [cp.sum(x, <span class="hljs-attribute">axis</span>=0)==d,<br>      cp.sum(x, <span class="hljs-attribute">axis</span>=1)&lt;=e]<br>prob = cp.Problem(obj, con)<br>prob.solve(<span class="hljs-attribute">solver</span>=<span class="hljs-string">&#x27;OSQP&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优值为:&quot;</span>, prob.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优解为：\n&quot;</span>, x.value)<br><span class="hljs-attribute">xd</span>=pd.DataFrame(x.value)<br>xd.to_excel(<span class="hljs-string">&quot;data4_5_4.xlsx&quot;</span>)          #数据写入Excel文件，便于做表使用<br></code></pre></td></tr></table></figure><h1 id="整数规划模型"><a href="#整数规划模型" class="headerlink" title="整数规划模型"></a>整数规划模型</h1><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311533306.png"></p><p>总结出的数学模型为：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311534896.png"></p><h2 id="指派问题"><a href="#指派问题" class="headerlink" title="指派问题"></a>指派问题</h2><p>在指派问题中，我们通常有n个工人或任务，每个工人或任务都有一个特定的能力或收益。我们要将这些工人或任务分配到不同的项目中，以确定每个项目由哪个工人或任务负责。这个问题的目标是找到一个最优的分配方案，使得总成本最小，其中成本可以包括工人的工资、任务的耗时、资源消耗等。</p><p>指派问题通常使用线性规划或图论方法进行求解。其中，线性规划方法通常用于解决具有特定限制条件的指派问题，例如要求特定工人完成特定任务等。而图论方法则用于解决没有特定限制条件的指派问题，例如最小生成树问题和最短路径问题等。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311517522.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from scipy<span class="hljs-selector-class">.optimize</span> import linear_sum_assignment<br>import numpy as np<br>cost = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[25,29,31,42]</span>,<span class="hljs-selector-attr">[39,38,26,20]</span>,<span class="hljs-selector-attr">[34,27,28,40]</span>,<span class="hljs-selector-attr">[24,42,36,23]</span>])<br>row_ind,col_ind = <span class="hljs-built_in">linear_sum_assignment</span>(cost)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(row_ind)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(col_ind)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(cost[row_ind,col_ind])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(cost[row_ind,col_ind].sum()</span></span>)<br></code></pre></td></tr></table></figure><h2 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a>旅行商问题</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311544349.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311545151.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311546557.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311546836.png"></p><h2 id="整数规划例题"><a href="#整数规划例题" class="headerlink" title="整数规划例题"></a>整数规划例题</h2><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1."></a>eg1.</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311556782.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311558739.png"></p><p>该问题数据模型为：</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311558538.png"></p><p>Python代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import cvxpy as cp<br>x=cp<span class="hljs-selector-class">.Variable</span>(<span class="hljs-number">6</span>, integer=True)<br>obj=cp<span class="hljs-selector-class">.Minimize</span>(<span class="hljs-built_in">sum</span>(x))<br>cons=<span class="hljs-selector-attr">[x[0]</span>+x<span class="hljs-selector-attr">[5]</span>&gt;=<span class="hljs-number">35</span>, x<span class="hljs-selector-attr">[0]</span>+x<span class="hljs-selector-attr">[1]</span>&gt;=<span class="hljs-number">40</span>,<br>      x<span class="hljs-selector-attr">[1]</span>+x<span class="hljs-selector-attr">[2]</span>&gt;=<span class="hljs-number">50</span>, x<span class="hljs-selector-attr">[2]</span>+x<span class="hljs-selector-attr">[3]</span>&gt;=<span class="hljs-number">45</span>,<br>      x<span class="hljs-selector-attr">[3]</span>+x<span class="hljs-selector-attr">[4]</span>&gt;=<span class="hljs-number">55</span>, x<span class="hljs-selector-attr">[4]</span>+x<span class="hljs-selector-attr">[5]</span>&gt;=<span class="hljs-number">30</span>,<br>      x&gt;=<span class="hljs-number">0</span>]<br>prob=cp<span class="hljs-selector-class">.Problem</span>(obj, cons)<br>prob<span class="hljs-selector-class">.solve</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;最优值为：&quot;</span>, prob.value)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;最优解为：&quot;</span>, x.value)</span></span><br></code></pre></td></tr></table></figure><h3 id="eg2"><a href="#eg2" class="headerlink" title="eg2."></a>eg2.</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311623598.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311623088.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311624814.png" alt="屏幕截图 2023-07-31 162036"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311624343.png" alt="屏幕截图 2023-07-31 162202"></p><p>data4_10.txt内容如下：</p><table><thead><tr><th>15</th><th>13.8</th><th>12.5</th><th>11</th><th>14.3</th></tr></thead><tbody><tr><td>14.5</td><td>14</td><td>13.2</td><td>10.5</td><td>15</td></tr><tr><td>13.8</td><td>13</td><td>12.8</td><td>11.3</td><td>14.6</td></tr><tr><td>14.7</td><td>13.6</td><td>13</td><td>11.6</td><td>14</td></tr></tbody></table><p>Python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cvxpy <span class="hljs-keyword">as</span> cp<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>c = np.loadtxt(<span class="hljs-string">&#x27;data4_10.txt&#x27;</span>)<br>x = cp.Variable((<span class="hljs-number">4</span>,<span class="hljs-number">5</span>), integer=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#定义决策变量</span><br>obj = cp.Minimize(cp.<span class="hljs-built_in">sum</span>(cp.multiply(c,x)))    <span class="hljs-comment">#构造目标函数</span><br>cons = [<span class="hljs-number">0</span>&lt;=x, x&lt;=<span class="hljs-number">1</span>, cp.<span class="hljs-built_in">sum</span>(x, axis=<span class="hljs-number">0</span>)==<span class="hljs-number">1</span>,<br>        cp.<span class="hljs-built_in">sum</span>(x, axis=<span class="hljs-number">1</span>)&lt;=<span class="hljs-number">2</span>]     <span class="hljs-comment">#构造约束条件</span><br>prob = cp.Problem(obj, cons)<br>prob.solve()   <span class="hljs-comment">#求解问题</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最优解为：\n&#x27;</span>, x.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最优值为：&#x27;</span>, prob.value)<br></code></pre></td></tr></table></figure><h3 id="eg3"><a href="#eg3" class="headerlink" title="eg3."></a>eg3.</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311646934.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311646497.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307311646517.png"></p><p>Python代码如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import cvxpy as cp<br>import numpy as np<br><span class="hljs-attribute">a</span>=np.loadtxt(&quot;data4_11.txt&quot;)<br><span class="hljs-attribute">d</span>=np.zeros((10,10))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(10):<br>        d[i,j]=np.linalg.norm(a[:,i]-a[:,j])<br><span class="hljs-attribute">x</span>=cp.Variable(10, <span class="hljs-attribute">integer</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-attribute">y</span>=cp.Variable((10, 10),<span class="hljs-attribute">integer</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-attribute">obj</span>=cp.Minimize(sum(x))<br>con=[sum(y)&gt;=1, cp.sum(y,<span class="hljs-attribute">axis</span>=1)&lt;=5,<br>     x&gt;=0, x&lt;=1, y&gt;=0, y&lt;=1] <br>     <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10):<br>    con.append(x[i]==y[i,i])<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(10):<br>        con.append(d[i,j]*y[i,j]&lt;=10*x[i])<br>        con.append(x[i]&gt;=y[i,j])<br>prob = cp.Problem(obj, con)<br>prob.solve(<span class="hljs-attribute">solver</span>=<span class="hljs-string">&#x27;GLPK_MI&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优值为:&quot;</span>, prob.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优解为：\n&quot;</span>, x.value)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------\n&#x27;</span>, y.value)<br></code></pre></td></tr></table></figure><h1 id="投资的收益与风险—–（暂时搁置）"><a href="#投资的收益与风险—–（暂时搁置）" class="headerlink" title="投资的收益与风险—–（暂时搁置）"></a>投资的收益与风险—–（暂时搁置）</h1><h1 id="比赛项目排序问题—-（暂时搁置）"><a href="#比赛项目排序问题—-（暂时搁置）" class="headerlink" title="比赛项目排序问题—-（暂时搁置）"></a>比赛项目排序问题—-（暂时搁置）</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-进程管理和计划任务</title>
    <link href="/2023/07/30/Linux-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/07/30/Linux-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="进程和内存管理"><a href="#进程和内存管理" class="headerlink" title="进程和内存管理"></a>进程和内存管理</h1><h2 id="进程相关概念"><a href="#进程相关概念" class="headerlink" title="进程相关概念"></a>进程相关概念</h2><h3 id="内核功用"><a href="#内核功用" class="headerlink" title="内核功用"></a>内核功用</h3><p>进程管理、内存管理、文件系统、网络功能、驱动程序、安全功能等</p><h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><p>Process：运行中的程序的一个副本，是被载入内存的一个指令集合，是资源分配的单位</p><ul><li>进程ID（PID）：号码被用来标记各个进程</li><li>UID、GID 和 SELinux 语境决定对文件系统的存取和访问权限</li><li>通常从执行进程的用户来继承</li><li>存在生命周期</li></ul><p>进程创建：</p><ul><li>init：第一进程，从Centos7以后为systemd</li><li>进程：都由其父进程创建，fork()/<em>C语言</em>/，父子关系，Cow(机制)：Copy On Write</li></ul><h3 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h3><p>进程一般由程序、数据集合和进程控制块三部分组成。</p><ul><li>程序用于描述进程要完成的功能，是控制进程执行的指令集</li><li>数据集合是程序在执行时所需要的数据和工作区</li><li>程序控制块（Program Control Block，简称PCB），包含进程的描述信息和控制信息，是进程存在的唯一标识</li></ul><h3 id="进程具有的特点"><a href="#进程具有的特点" class="headerlink" title="进程具有的特点"></a>进程具有的特点</h3><p>动态性    并发(时间片)性    独立性    结构性</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307301554388.png"></p><p>注意：</p><ol><li>多个进程可以同时进行，而多个线程（“{}”）存在竞争，可能发生冲突；” 加锁 “ 在进程和线程中很重要</li><li>进程是任务调度（操作系统分配资源）的最小单位，线程是程序执行的最小单位</li><li>多线程的运行顺序由操作系统决定，并非由程序员设置</li><li>进程控制块PCB(了解)，ucore(清华大学课程)  ………………………………………………………………..有时间再说</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li></ol><h3 id="进程使用内存问题"><a href="#进程使用内存问题" class="headerlink" title="进程使用内存问题"></a>进程使用内存问题</h3><p>1.内存泄漏 Memory Leak：申请的空间未释放    2.内存溢出 Memory Overflow：数据量超过申请的空间    </p><p>3.内存不足 OOM：vm.overcommit.memory 接受三种取值（0、1、2）</p><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307301553332.png"></p><h3 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h3><ul><li>创建状态</li><li>就绪状态</li><li>执行状态</li><li>阻塞状态</li><li>终止状态</li></ul><h3 id="进程的更多状态"><a href="#进程的更多状态" class="headerlink" title="进程的更多状态"></a>进程的更多状态</h3><ul><li>运行态：running</li><li>就绪态：ready</li><li>睡眠态：分为两种，可中断 ( interruptable )  and  不可中断 ( uninterruptable )</li><li>停止态：stopped，暂停于内存，但不会被调度，除非手动启动</li><li>僵死态：zombie，结束进程，父进程结束前，子进程不关闭，杀死父进程可以关闭僵死态的子程序</li><li>孤儿进程</li></ul><h2 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h2><p>Least Recently Used 近期最少使用算法（喜新厌旧），释放内存   —-   缓存的核心算法</p><h2 id="IPC进程间通信"><a href="#IPC进程间通信" class="headerlink" title="IPC进程间通信"></a>IPC进程间通信</h2><ul><li>同一主机</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs stata">pipe管道，单向传输<br>socket套接字文件，双工通信<br><span class="hljs-keyword">Memory</span>-maped <span class="hljs-keyword">file</span>文件映射，将文件中的一段数据映射到物理内存，多个进程共享这片内存<br>shm shared <span class="hljs-keyword">memory</span>共享文件<br>signal信号<br>Lock上锁<br>semaphore信号量，一种计数器<br></code></pre></td></tr></table></figure><ul><li>不同主机：socket = IP和端口号</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">RPC remote <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">call</span></span><br><span class="hljs-function"><span class="hljs-title">MQ</span>消息队列，生产者和消费者<span class="hljs-params">(缓冲区)</span>            -----<span class="hljs-title">ELK</span>大量的系统生成日志用到此技术</span><br></code></pre></td></tr></table></figure><h2 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307301632829.png"></p><p><strong>进程优先级：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">系统优先级：0 - 139，数字越小，优先级越高，各有140个运行队列和过期队列<br>实时优先级：99 - 0 值越大，优先级越高<br><span class="hljs-built_in">nice</span>值：-20 至 19，对应系统优先级100 - 139<br></code></pre></td></tr></table></figure><p><strong>时间（空间）复杂度</strong></p><h2 id="进程分类"><a href="#进程分类" class="headerlink" title="进程分类"></a>进程分类</h2><h3 id="操作系统分类"><a href="#操作系统分类" class="headerlink" title="操作系统分类"></a>操作系统分类</h3><ul><li>协作多任务：早期Windows系统使用，即一个任务得到了CPU时间，除非他自己放弃使用CPU，否则将完全霸占CPU，所以任务之间需要协作一一使用一段时间的CPU，主动放弃使用</li><li>抢占式多任务：Linux内核，CPU的总控制权在操作系统手中，操作系统会轮流询问每一个任务 是否需要CPU，需要使用的话就让它用，不过在一定时间后，操作系统会剥夺当前任务的CPU使用权，把它排在询问队列的最后，再去询问下一个任务</li></ul><h3 id="进程类型"><a href="#进程类型" class="headerlink" title="进程类型"></a>进程类型</h3><ul><li>守护进程：daemon,在系统引导过程中启动的进程，和终端无关进程</li><li>前台进程：跟终端相关，通过终端启动的进程</li></ul><p>注意：两者可以相互转换</p><h3 id="按进程资源使用的分类"><a href="#按进程资源使用的分类" class="headerlink" title="按进程资源使用的分类"></a>按进程资源使用的分类</h3><p>CPU-Bound：CPU密集型，非交互</p><p>IO-Bound：IO密集型，交互</p><h1 id="进程管理和性能相关工具"><a href="#进程管理和性能相关工具" class="headerlink" title="进程管理和性能相关工具"></a>进程管理和性能相关工具</h1><p>参考链接：<a href="https://www.brendangregg.com/linuxperf.html">https://www.brendangregg.com/linuxperf.html</a></p><p><img src="https://www.brendangregg.com/Perf/linux_observability_tools.png" alt="img"></p><p>Linux系统状态的查看及管理工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pstreepspidofpgreptophtopglancepmap<br>vmstatdstat<span class="hljs-built_in">kill</span>pkilljob<span class="hljs-built_in">bg</span><span class="hljs-built_in">fg</span><span class="hljs-built_in">nohup</span><br></code></pre></td></tr></table></figure><h2 id="进程树-pstree"><a href="#进程树-pstree" class="headerlink" title="进程树 pstree"></a>进程树 pstree</h2><p>pstree 可以用来显示进程的父子关系，以树形结构显示</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">pstree [OPTION] [ PID | USER ]<br><br><span class="hljs-deletion">-p显示PID</span><br><span class="hljs-deletion">-T不显示线程thread,默认显示线程</span><br><span class="hljs-deletion">-u 显示用户切换</span><br><span class="hljs-deletion">-H pid高亮显示指定进程及其前辈进程</span><br></code></pre></td></tr></table></figure><h2 id="进程信息-ps"><a href="#进程信息-ps" class="headerlink" title="进程信息 ps"></a>进程信息 ps</h2><p>ps即Process state，可以进程当前状态的快照，默认显示当前终端中的进程，Linux系统各进程的相关信息均保存在 <strong>/proc/PID</strong> 目录下的各文件中</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff">ps [OPTION]...<br><br>a选项包括所有终端中的进程<br>x选项包括不链接终端的进程<br>u选项显示进程所有者信戏<br>k|--sort 属性 对属性排序，属性前加 - 表示倒序<br><span class="hljs-deletion">-e显示所有进程,相当于-A</span><br><span class="hljs-deletion">-f显示完整格式程序信息</span><br><span class="hljs-deletion">-F显示更完整格式的进程信息</span><br><span class="hljs-deletion">-o 属性 选项显示定制的信息</span><br><span class="hljs-deletion">-H以进程层级格式显示进程相关信息</span><br></code></pre></td></tr></table></figure><p><strong>常用组合</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@centos7</span><span class="hljs-number">-22</span> ~][<span class="hljs-meta"># ps aux</span><br>[root<span class="hljs-symbol">@centos7</span><span class="hljs-number">-22</span> ~][<span class="hljs-meta"># ps auxf</span><br>[root<span class="hljs-symbol">@centos7</span><span class="hljs-number">-22</span> ~][<span class="hljs-meta"># ps axo ...</span><br>[root<span class="hljs-symbol">@centos7</span><span class="hljs-number">-22</span> ~][<span class="hljs-meta"># ps -ef</span><br>[root<span class="hljs-symbol">@centos7</span><span class="hljs-number">-22</span> ~][<span class="hljs-meta"># ps -eFH</span><br>[root<span class="hljs-symbol">@centos7</span><span class="hljs-number">-22</span> ~][<span class="hljs-meta"># ps -eo ...</span><br></code></pre></td></tr></table></figure><h2 id="查看进程信息-prtstat"><a href="#查看进程信息-prtstat" class="headerlink" title="查看进程信息 prtstat"></a>查看进程信息 prtstat</h2><p>可以显示进程信息，来自于psmisc包。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">prtstat [options] <span class="hljs-symbol">PID</span> ...<br></code></pre></td></tr></table></figure><p>常用命令:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@centos7</span><span class="hljs-number">-22</span> ~][<span class="hljs-meta"># prtstat -r PID</span><br></code></pre></td></tr></table></figure><h2 id="设置和调整进程优先级"><a href="#设置和调整进程优先级" class="headerlink" title="设置和调整进程优先级"></a>设置和调整进程优先级</h2><h3 id="进程优先级调整"><a href="#进程优先级调整" class="headerlink" title="进程优先级调整"></a>进程优先级调整</h3><ul><li>静态优先级：100-139</li><li>进程默认启动时的nice值为0，优先提为120</li><li>只有跟用户才能降低nice值（提高优先性）</li></ul><h3 id="nice命令"><a href="#nice命令" class="headerlink" title="nice命令"></a>nice命令</h3><p>以指定的优先级来启动进程。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">nice -<span class="hljs-built_in">n</span> <span class="hljs-built_in">N</span>（adjustment=<span class="hljs-built_in">N</span>） COMMAND<br></code></pre></td></tr></table></figure><h3 id="renice命令"><a href="#renice命令" class="headerlink" title="renice命令"></a>renice命令</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">renice -<span class="hljs-built_in">n</span> <span class="hljs-built_in">N</span> PID<br></code></pre></td></tr></table></figure><h2 id="搜索进程"><a href="#搜索进程" class="headerlink" title="搜索进程"></a>搜索进程</h2><p><strong>按条件搜索进程</strong></p><ul><li>ps 选项 | grep ‘pattern’     灵活</li><li>pgrep   按预定义的模式</li><li>/sbin/pidof    按确切的程序名称查看pid</li></ul><h3 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff">pgrep [option]  pattern<br><br><span class="hljs-deletion">-u uid生效者</span><br><span class="hljs-deletion">-U uid真正发起运行命令者</span><br><span class="hljs-deletion">-t terminal与指定终端相关的进程</span><br><span class="hljs-deletion">-l 显示进程名</span><br><span class="hljs-deletion">-a显示完整格式的进程名</span><br><span class="hljs-deletion">-P pid是指定进程的子进程</span><br></code></pre></td></tr></table></figure><h3 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h3><p>获取进程编号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">pidof <span class="hljs-selector-attr">[option]</span> <span class="hljs-selector-attr">[Program]</span><br><br>-x 脚本名称按脚本名称查找pid<br></code></pre></td></tr></table></figure><h2 id="负载查询-uptime"><a href="#负载查询-uptime" class="headerlink" title="负载查询 uptime"></a>负载查询 uptime</h2><p>/proc/uptime 包括两个值,单位为s</p><ul><li>系统启动时长</li><li>空闲进程的总时长</li></ul><p>uptime和w显示以下内容</p><ul><li>当前时间</li><li>系统已启动时间</li><li>当前上线人数</li><li>系统平均负载（1,5,15分钟的平均负载，一般不会超过1，超过5时建议警报）</li></ul><p>系统平均负载：只在特定时间间隔内运行队列中的平均进程数，通常每个CPU内核的当前活动进程书不大于3，那么系统性能良好，如果每个CPU内核的任务数大于5，那么主机的性能有严重问题。</p><h2 id="显示CPU相关统计-mpstat"><a href="#显示CPU相关统计-mpstat" class="headerlink" title="显示CPU相关统计 mpstat"></a>显示CPU相关统计 mpstat</h2><p>来自sysstat包</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haml">#各部分所占CPU百分比<br><span class="hljs-tag">%<span class="hljs-selector-tag">usr</span></span>用户空间<br><span class="hljs-tag">%<span class="hljs-selector-tag">sys</span></span>内核空间<br><span class="hljs-tag">%<span class="hljs-selector-tag">nice</span></span>优先级调整<br><span class="hljs-tag">%<span class="hljs-selector-tag">iowait</span></span>等待IO时间<br><span class="hljs-tag">%<span class="hljs-selector-tag">irq</span></span>硬中断<br><span class="hljs-tag">%<span class="hljs-selector-tag">soft</span></span>软中断（模式切换）<br><span class="hljs-tag">%<span class="hljs-selector-tag">steal</span></span>虚拟机偷走的时间<br><span class="hljs-tag">%<span class="hljs-selector-tag">idle</span></span>  空闲<br><br><br>mpstat 1   #表示每一秒显示一次CPU相关统计<br></code></pre></td></tr></table></figure><h2 id="查看进程实时状态-top-和-htop"><a href="#查看进程实时状态-top-和-htop" class="headerlink" title="查看进程实时状态 top 和 htop"></a>查看进程实时状态 top 和 htop</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>top提供动态的实时进程状态。</p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308121611193.png" alt="image-20230812161145879"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">帮助：h 或 ？ ，按<span class="hljs-selector-tag">q</span> 或 Esc退出帮助<br><br>排序：<br><span class="hljs-selector-tag">P</span> 以占据的CPU百分比，%CPU<br>M占据内存百分比，%MEM<br>T累计占据CPU时长，<span class="hljs-selector-tag">TIME</span>+<br><br>首部信息显示：<br>uptime信息： l命令<br>tasks及CPU信息： t命令<br>cpu分别显示： <span class="hljs-number">1</span>（数字）<br>memory信息：m命令<br><br><span class="hljs-selector-tag">q</span>退出命令<br>s修改刷新时间间隔<br>k终止指定进程<br>w保存文件<br></code></pre></td></tr></table></figure><p><strong>top命令栏位信息简介</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">us用户空间<br><span class="hljs-keyword">sy</span>内核空间<br>ni调整nice时间。<br>id空闲<br><span class="hljs-keyword">wa</span>等待IO时间<br><span class="hljs-keyword">hi</span>硬中断<br>si软中断（模式切换）<br><span class="hljs-keyword">st</span>虚拟机偷走的时间 <br></code></pre></td></tr></table></figure><p><strong>top选项</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>d <span class="hljs-comment">#指定刷新时间，默认为三秒。</span><br><span class="hljs-literal">-</span>b全部显示所有进程<br><span class="hljs-literal">-</span>n <span class="hljs-comment">#刷新多少次后退出</span><br><span class="hljs-literal">-</span>H县城模式<br><span class="hljs-literal">-</span>p <span class="hljs-comment">#指定进程</span><br></code></pre></td></tr></table></figure><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><p>htop 命令是增强版的top命令，来自于EPEL源，比top功能更强。</p><p><strong>选项</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>d <span class="hljs-comment">#指定延迟时间</span><br><span class="hljs-literal">-</span>u username仅显示指定用户的进程<br><span class="hljs-literal">-</span>s COLUME以指定字段进行排序<br></code></pre></td></tr></table></figure><p><strong>子命令</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">s跟踪选定进程的系统调用<br>l显示选定进程打开的文件列表<br><span class="hljs-selector-tag">a</span>将选定的进程绑定至某指定CPU核心<br>t显示进程数<br></code></pre></td></tr></table></figure><h2 id="内存空间-free"><a href="#内存空间-free" class="headerlink" title="内存空间    free"></a>内存空间    free</h2><p><strong>格式</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">free</span> [<span class="hljs-keyword">OPTION</span>]<br></code></pre></td></tr></table></figure><p><strong>常用选项</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-h易读格式</span><br><span class="hljs-deletion">-b以字节为单位</span><br><span class="hljs-deletion">-m以mb为单位</span><br><span class="hljs-deletion">-o不显示-/+buffers/cache行</span><br><span class="hljs-deletion">-s n刷新间隔为n秒</span><br><span class="hljs-deletion">-c n刷新n次后退出。</span><br></code></pre></td></tr></table></figure><h2 id="进程对应的内存映射-pmap"><a href="#进程对应的内存映射-pmap" class="headerlink" title="进程对应的内存映射 pmap"></a>进程对应的内存映射 pmap</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">pmap <span class="hljs-selector-attr">[option]</span> pid <span class="hljs-selector-attr">[...]</span><br><br>-x显示详细格式的信息<br></code></pre></td></tr></table></figure><h2 id="虚拟内存信息-vmstat"><a href="#虚拟内存信息-vmstat" class="headerlink" title="虚拟内存信息 vmstat"></a>虚拟内存信息 vmstat</h2><p><strong>格式</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">vmstat <span class="hljs-comment">[option]</span> <span class="hljs-comment">[delay <span class="hljs-comment">[count]</span>]</span><br><br>-s显示内存统计数据<br></code></pre></td></tr></table></figure><p><strong>显示项说明</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vim">procs:<br>r可运行(运行或等待运行)进程的过程,和核心数有关。<br><span class="hljs-keyword">b</span>处于不可中断睡眠状态的进程个数(被阻塞的队列的长度)<br>memory：<br>awpd交换内存的使用总量<br>free空闲物理内存总量<br><span class="hljs-keyword">buffer</span>缓冲区，用于缓冲区的内存总量<br>cache缓存，用于缓存的内存总量<br>swap：<br>si从磁盘交换进内存的数据速率。（kb/s）<br><span class="hljs-keyword">so</span>从内存交换进磁盘的数据速率。（kb/s）<br>io：<br>bi从块设备读入数据到系统的速率。（kb/s）<br><span class="hljs-keyword">bo</span>保存数据这块设备的速率。<br><span class="hljs-built_in">system</span>：<br>ininterrups中断速率，包括时钟<br><span class="hljs-keyword">cs</span>contex switch进程切换速率<br>cpu：<br>us用户空间<br><span class="hljs-keyword">sy</span>内核空间<br>id空闲<br><span class="hljs-keyword">wa</span>等待IO时间<br><span class="hljs-keyword">st</span>虚拟机偷走的时间 两个<br></code></pre></td></tr></table></figure><h2 id="统计CPU和设备io信息-iostat"><a href="#统计CPU和设备io信息-iostat" class="headerlink" title="统计CPU和设备io信息 iostat"></a>统计CPU和设备io信息 iostat</h2><p>iostat 可以提供更丰富的io性能状态数据。此工具由sysstat包提供。</p><p><strong>常用选项</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c只显示CPU行</span><br><span class="hljs-deletion">-d显示设备磁盘使用状态</span><br><span class="hljs-deletion">-k以千字节为单位显示输出</span><br><span class="hljs-deletion">-t在输出中包括时间戳</span><br><span class="hljs-deletion">-x在输出中包括扩展的磁盘指标</span><br></code></pre></td></tr></table></figure><p><strong>显示项说明</strong></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">tps</span>该设备每秒的传输次数。“一次传输”意思是“一次<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>请求”。多个逻辑请求可能会被合并为“一次<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>请求”。“一次传输”请求大小是未知的。<br><span class="hljs-type">kB_read</span><span class="hljs-operator">/</span><span class="hljs-variable">s</span>每秒从设备读取的数据量<br><span class="hljs-type">kB_wrtn</span><span class="hljs-operator">/</span><span class="hljs-variable">s</span>每秒向设备写入的数据量<br><span class="hljs-type">kB_read</span>读取的总数据量<br><span class="hljs-type">kB_wrtn</span>写入的总数据量<br></code></pre></td></tr></table></figure><h2 id="监视磁盘I-O-iotop"><a href="#监视磁盘I-O-iotop" class="headerlink" title="监视磁盘I/O iotop"></a>监视磁盘I/O iotop</h2><p>iotop命令是一个用来监视磁盘I/O使用状况的top类工具。iotop具有与top相似的UI，其中包括PID，用户，I/O、进程等相关信息，可查看每个进程是如何使用IO。</p><p><strong>iotop输出</strong></p><ul><li>第一行    读和写速率总计</li><li>第二行    实际的读和写速率</li><li>第三行     线程ID（按p切换为进程ID）、优先级、用户、磁盘读写速率、swap交换百分比、IO等待所占的百分比。</li></ul><h2 id="显示网络带宽使用情况-iftop"><a href="#显示网络带宽使用情况-iftop" class="headerlink" title="显示网络带宽使用情况 iftop"></a>显示网络带宽使用情况 iftop</h2><p>通过EPEL源的iftop包。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">iftop -n</span><br></code></pre></td></tr></table></figure><h2 id="查看网络实时吞吐量-nload"><a href="#查看网络实时吞吐量-nload" class="headerlink" title="查看网络实时吞吐量 nload"></a>查看网络实时吞吐量 nload</h2><p>nload 是一个实时监控网络流量和带宽使用情况，以数值和动态图展示。进出的流浪情况，通过EPEL源安装</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-t 设置刷新时间，默认刷新时间为100毫秒。</span><br></code></pre></td></tr></table></figure><h2 id="查看进程网络带宽的使用情况-nethogs"><a href="#查看进程网络带宽的使用情况-nethogs" class="headerlink" title="查看进程网络带宽的使用情况 nethogs"></a>查看进程网络带宽的使用情况 nethogs</h2><p>Nethogs 是一个开源的命令行工具，用来按进程或程序实施统计网络带宽使用率。</p><p><a href="https://github.com/raboof/nethogs">https://github.com/raboof/nethogs</a></p><h2 id="网络监视工具-iptraf-ng"><a href="#网络监视工具-iptraf-ng" class="headerlink" title="网络监视工具 iptraf-ng"></a>网络监视工具 iptraf-ng</h2><p>来自于iptraf-ng包，可以进网络进行监控，对终端窗口大小有要求。</p><h2 id="系统资源统计-dstat"><a href="#系统资源统计-dstat" class="headerlink" title="系统资源统计 dstat"></a>系统资源统计 dstat</h2><p>dstat 由 pcp-system-tools包提供，但安装dstat包即可，可用于代替vmstat，iostat功能。</p><h2 id="综合监控工具-glances"><a href="#综合监控工具-glances" class="headerlink" title="综合监控工具 glances"></a>综合监控工具 glances</h2><p>基于Python写的程序。</p><p>可以远程监控。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-s服务器端</span><br><span class="hljs-deletion">-c 服务器端口号客户端</span><br></code></pre></td></tr></table></figure><h2 id="查看进程打开文件-lsof"><a href="#查看进程打开文件-lsof" class="headerlink" title="查看进程打开文件 lsof"></a>查看进程打开文件 lsof</h2><p>查看当前系统文件工具。在Linux环境下，一切接文件。用户通过文件不仅可以访问常规数据，还可以访问网络连接和硬件，如：传输控制协议（TCP）和用户数据报协议（UDP）套接字等，系统在后台都为该应用程序分配了一个文件描述符。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">-i<span class="hljs-variable">&lt;条件&gt;</span>列出符合条件的进程（4、6、协议、:端口、<span class="hljs-meta">@ip）</span><br></code></pre></td></tr></table></figure><h2 id="系统图形化管理-cockpit"><a href="#系统图形化管理-cockpit" class="headerlink" title="系统图形化管理 cockpit"></a>系统图形化管理 cockpit</h2><p>cockpit是一个基于Web界面的应用，它提供了对系统的图形化管理。</p><ul><li>监控系统活动（CPU、内存、磁盘IO和网络流量）</li><li>查看系统日志条目</li><li>查看磁盘分区的容量</li><li>查看网络活动（发送和接收）</li><li>查看用户账户</li><li>检查系统服务的状态</li><li>提取已安装应用信息</li><li>查看和安装可更新（如果以root身份登录）并在需要时重新启动系统</li><li>打开并使用终端窗口</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@centos8 ~</span>][<span class="hljs-meta"># yum -y install cockpit</span><br>[<span class="hljs-meta">root@centos8 ~</span>][<span class="hljs-meta"># systemctl enable --now cockpit.socket</span><br>[<span class="hljs-meta">root@centos8 ~</span>][<span class="hljs-meta"># ss -ntl</span><br><br>打开浏览器，访问以下地址:<br>https:<span class="hljs-comment">//&lt;cockpit主机&gt;:9090</span><br></code></pre></td></tr></table></figure><h2 id="信号发送-kill"><a href="#信号发送-kill" class="headerlink" title="信号发送 kill"></a>信号发送 kill</h2><p>内部命令，可用来向进程发送控制信号，以实现对进程管理，每个信号对应一个数字，信号名称以SIG开头（可忽略）不区分大小写。</p><p><strong>显示当前系统可用信号：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -l<br><span class="hljs-built_in">trap</span> -l<br></code></pre></td></tr></table></figure><p><strong>查看帮助</strong></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml">man <span class="hljs-number">7</span> <span class="hljs-keyword">signal</span><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><strong>常用信号</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">1</span>) SIGHUP 无须关闭进程而让其重读配置文件<br><span class="hljs-number">2</span>) SIGINT 中止正在运行的进程；相当于 Ctrl + c <br><span class="hljs-number">3</span>) SIGQUIT 相当于ctr1+<span class="hljs-string">\</span><br><span class="hljs-number">9</span>) SIGKILL 强制杀死正在运行的进程，可能会导致数据丢失，慎用！<br><span class="hljs-number">15</span>) SIGTERM 终止正在运行的进程，默认信号<br><span class="hljs-number">18</span>) SIGCONT 继续运行<br><span class="hljs-number">19</span>) SIGSTOP 后台休眠<br></code></pre></td></tr></table></figure><p><strong>指定信号的方法</strong></p><ul><li>信号的数字标识：1,2,9</li><li>信号完整名称： SIGHUP , sighup </li><li>信号的简写名称： HUP , hup</li></ul><h2 id="作业管理"><a href="#作业管理" class="headerlink" title="作业管理"></a>作业管理</h2><p><strong>Linux的作业控制</strong></p><ul><li>前端作业：通过终端启动，且启动后一直占据终端。</li><li>后台作业：可通过终端启动，但启动后即转入后台运行（释放终端）。</li></ul><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202308121802175.png" alt="image-20230812180255121" style="zoom:200%;" /><p><strong>让作业运行于后台</strong></p><ul><li>运行中的作业：Ctrl+z</li><li>尚未启动的作业：COMMAND &amp;</li></ul><p>帮我拍作业，虽然被送往后台运行，但其依然与终端相关；退出终端，将关闭后台作业。如果希望送往后台后，剥离与终端的关系。</p><ul><li>nohub COMMAND &amp;&gt;/dev/null &amp;</li><li>screen; COMMAND</li><li>tmux; COMMAND</li></ul><p><strong>查看当前终端所有作业</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">jobs</span><br></code></pre></td></tr></table></figure><p><strong>作业控制</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">fg <span class="hljs-comment">[<span class="hljs-comment">[%]</span> JOB _ NUM ]</span>：把指定的后台作业调回前台<br>bg <span class="hljs-comment">[<span class="hljs-comment">[%]</span> JOB _ NUM ]</span>：让送往后台的作业在后台继续运行<br>ki11 <span class="hljs-comment">[% JOB _ NUM ]</span>：终止指定的作业<br></code></pre></td></tr></table></figure><h2 id="并行运行"><a href="#并行运行" class="headerlink" title="并行运行"></a>并行运行</h2><p>利用后台执行，实现并行功能，即同时运行多个进程，提高效率。</p><p><strong>方法一</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">all</span>.<span class="hljs-keyword">sh</span><br>f1.<span class="hljs-keyword">sh</span>&amp;<br>f2.<span class="hljs-keyword">sh</span>&amp;<br>f3.<span class="hljs-keyword">sh</span>&amp;<br></code></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(f1.sh&amp;)</span>;<span class="hljs-comment">(f2.sh&amp;)</span>;<span class="hljs-comment">(f3.sh嗯走不走乱转啥呀？这种要存在。好了对&amp;)</span><br></code></pre></td></tr></table></figure><p><strong>方法三</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">f1.<span class="hljs-keyword">sh</span>&amp;f2.<span class="hljs-keyword">sh</span>&amp;f3.<span class="hljs-keyword">sh</span>我&amp;<br></code></pre></td></tr></table></figure><h1 id="任务计划"><a href="#任务计划" class="headerlink" title="任务计划"></a>任务计划</h1><p>通过任务计划可以让系统自动的按时间或周期性任务执行任务。</p><p><strong>环境准备</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">yum -y install <span class="hljs-built_in">postfix</span><br>systemctl enable --now <span class="hljs-built_in">postfix</span><br></code></pre></td></tr></table></figure><p><strong>未来的某时间点执行一次任务</strong></p><ul><li>at            指定时间点，执行一次任务。</li><li>batch      系统自行选择空闲时间去执行此处指定任务。</li></ul><p><strong>周期性运行某任务</strong></p><ul><li>cron</li></ul><h2 id="一次性任务-at"><a href="#一次性任务-at" class="headerlink" title="一次性任务 at"></a>一次性任务 at</h2><p><strong>at工具</strong></p><ul><li>有包at提供。</li><li>依赖于atd需要启动才能实现at任务。</li><li>at队列存放在 <strong>/var/spool/at</strong> 目录下，Ubuntu存放在 <strong>/var/spool/cron/atjobs</strong> 目录下。</li><li>执行任务时PATH变量的值和当前定义任务的用户身份一致。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">at <span class="hljs-selector-attr">[option]</span> <span class="hljs-selector-tag">TIME</span><br></code></pre></td></tr></table></figure><p><strong>常用选项</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-v显示版本信息</span><br><span class="hljs-deletion">-t time时间格式[[CC]YY]MMDDhhmm[.ss]</span><br><span class="hljs-deletion">-l列出指定队列中等待运行的作业；相当于atq命令</span><br><span class="hljs-deletion">-d N删除指定的N号作业；相当于atrm</span><br><span class="hljs-deletion">-c N查看具体作业N号任务</span><br><span class="hljs-deletion">-f file指定的文件中读取任务</span><br><span class="hljs-deletion">-m当任务被完成之后，将给用户发送邮件，即使没有标准输出</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>作业执行命令的结果中的标准输出和错误以执行任务的用户身份发邮件给root</li><li>默认 CentOs8 最小化安装没有安装邮件服务，需要自行安装</li></ul><p>TIME定义出什么时候进行at这项任务的时间</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">HH：MM <span class="hljs-selector-attr">[YYYY-mm-dd]</span><br>noon,midnight,<span class="hljs-built_in">teatime</span>(<span class="hljs-number">4</span>pm),tomorrow<br>now+#&#123;minutes,hours,days,OR weeks&#125;<br></code></pre></td></tr></table></figure><p><strong>常用at时间格式示例</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HH</span>:MM在今日的 HH:MM 进行，若该时刻已过，则明天此时执行任务<br><span class="hljs-attribute">02</span>:<span class="hljs-number">00</span><br><br><span class="hljs-attribute">HH</span>:MM YYYY-MM-DD规定在某年某月的某一天的特殊时刻进行该项任务<br><span class="hljs-attribute">02</span>:<span class="hljs-number">00</span> <span class="hljs-number">2016</span>-<span class="hljs-number">09</span>-<span class="hljs-number">20</span><br><br><span class="hljs-attribute">HH</span>:MM[am|pm]<span class="hljs-meta"> [Month] [Date]</span><br><span class="hljs-attribute">06pm</span> March <span class="hljs-number">17</span><br><span class="hljs-attribute">17</span>:<span class="hljs-number">20</span> tomorrow<br><br><span class="hljs-attribute">HH</span>:MM[am|pm] + number<span class="hljs-meta"> [minutes|hours|days|weeks]   在某个时间点再加几个时间后才进行该项任务</span><br><span class="hljs-meta">now + 5 min</span><br><span class="hljs-meta">02pm + 3 days</span><br></code></pre></td></tr></table></figure><p><strong>at 任务执行方式</strong></p><ul><li>交互式 </li><li>输入重定向</li><li>at -f file </li></ul><p>/etc/at.{allow,deny} 控制用户是否执行at任务</p><ul><li>白名单：/etc/at.allow 默认不存在，只有该文件中的用户才能执行at命令</li><li>黑名单：/etc/at.deny 默认存在，拒绝该文件中用户执行at命令，而没在at.deny文件中的使用者可以执行</li><li>如果两个文件都不存在，只有root可以执行at命令 </li></ul><h2 id="周期性任务计划-cron"><a href="#周期性任务计划-cron" class="headerlink" title="周期性任务计划 cron"></a>周期性任务计划 cron</h2><p><strong>周期性任务计划 cron 相关的程序包：</strong></p><ul><li>cronie ：主程序包，提供 crond 守护进程及相关辅助工具</li><li>crontabs ：包含 CentOS 提供系统维护任务</li><li>cronie - anacron : cronie 的补充程序，用于监控 cronie 任务执行状况，如： cronie 中的任务在过去该运行的时间点未能正常运行，则 anacron 会随后启动一次此任务</li></ul><p>cron 依赖于 crond 服务，<strong>确保 crond 守护处于运行状态</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Centos</span> <span class="hljs-number">7</span>以后版本：<br><span class="hljs-attribute">systemctl</span> status crond <br><br><span class="hljs-attribute">CentOs</span> <span class="hljs-number">6</span>:<br><span class="hljs-attribute">service</span> crond status <br></code></pre></td></tr></table></figure><p> <strong>cron 任务分为</strong></p><ul><li><p>系统 cron 任务：系统维护作业◇/ etc / crontab 主配置文件，/ etc / cron . d ／子配 文件</p></li><li><p>用户 cron 任务：红帽系统保存在／ var / spool / cron / USERNAME , Ubuntu 系统存放，在／ var / spoolcron / crontabs / USERNAME ，利用 crontab 命令管理</p></li></ul><p><strong>计划任务日志</strong>：/ var / log / cron </p><h3 id="系统-cron-计划任务"><a href="#系统-cron-计划任务" class="headerlink" title="系统 cron 计划任务"></a>系统 cron 计划任务</h3><p>/ etc / crontab 格式说明，详情参见 man 5 crontab</p><p><strong>计划任务时间表示法</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs autoit">(<span class="hljs-number">1</span>）特定值<br>给定时间点有效取值范围内的值<br>(<span class="hljs-number">2</span>)*<br>给定时间点上有效取值范围内的所有值，表示<span class="hljs-string">&quot;每．..&quot;</span>，放在星期的位置表示不确<br>(<span class="hljs-number">3</span>）离散取值<br><span class="hljs-meta">#,#,#</span><br>(<span class="hljs-number">4</span>）连续取值<br><span class="hljs-meta">#-#</span><br>(<span class="hljs-number">5</span>）在指定时间范围上，定义步长<br>/<span class="hljs-meta">#: ＃即为步长</span><br><br>(<span class="hljs-number">6</span>）特定关健字<br><span class="hljs-symbol">@yearly</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> *<br><span class="hljs-symbol">@annually</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> *<br><span class="hljs-symbol">@monthly</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> * *<br><span class="hljs-symbol">@weekly</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> * * <span class="hljs-number">0</span><br><span class="hljs-symbol">@daily</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> * * *<br><span class="hljs-symbol">@hourly</span> <span class="hljs-number">0</span> * * * *<br><span class="hljs-symbol">@reboot</span><span class="hljs-built_in">Run</span> once after reboot<br></code></pre></td></tr></table></figure><p><strong>crond任务相关文件</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>crontab配置文件<br><span class="hljs-regexp">/etc/</span>con.d/配置文件<br><span class="hljs-regexp">/etc/</span>cron.hourly/脚本<br><span class="hljs-regexp">/etc/</span>cron.daily/脚本<br><span class="hljs-regexp">/etc/</span>cron.weekly/脚本<br><span class="hljs-regexp">/etc/</span>cron.monthly/脚本<br></code></pre></td></tr></table></figure><h3 id="用户计划任务"><a href="#用户计划任务" class="headerlink" title="用户计划任务"></a>用户计划任务</h3><p><strong>crontab 命令：</strong></p><ul><li>每个用户都有专用的 cron 任务文件◇/ var / spool / cron / USERNAME </li><li>默认标准输出和错误会被发邮件给对应的用户◇如◇ wang 创建的任务就发送.</li><li> root 能够修改其它用户的作业</li><li>用户的 cron 中默认 PATH =/ usr / bin :/ bin ，如果使用其它路径，在任务文件的第者加入到计划任务执行的脚本中</li><li>第六个字段指定要运行的命令。该行的整个命令部分◇直至换行符或”%”字除非使用反斜杠（\）进行转义，否则该命令中的”%”字符将变为换行符，并数据将作为标准输入发送到该命令。</li></ul><p> <strong>crontab 命令格式</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">crontab <span class="hljs-selector-attr">[-u user]</span> <span class="hljs-selector-attr">[-l | -r | -e]</span> <span class="hljs-selector-attr">[-i]</span><br></code></pre></td></tr></table></figure><p><strong>常用选项</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l 列出所有任务</span><br><span class="hljs-deletion">-e 编辑任务</span><br><span class="hljs-deletion">-r 移除所有任务</span><br><span class="hljs-deletion">-i  同﹣r 一同使用，以交互模式移除指定任务</span><br><span class="hljs-deletion">- U user 指定用户管理 cron 任务，仅 root 可运行</span><br></code></pre></td></tr></table></figure><p><strong>控制用户执行计划任务：</strong>/ etc / cron .( allow , deny )</p><p>注意：运行结果的标准输出和错误以邮件通知给相关用户</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">（<span class="hljs-number">1</span>） COMMAND &gt; <span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span><br>（<span class="hljs-number">2</span>） COMMAND &amp;&gt; <span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>cron任务中不建议使用%，它有特殊用途，它表示换行的特殊意义，且第一个%后的所有字符串会被当作命令的标准输入，如果在命令中要使用%，则需要用 \ 转义</p><p>注意：将%放置于单引号中是不支持的</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Linux运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算SRE工程师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费博客</title>
    <link href="/2023/07/29/%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/07/29/%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>完全免费</p><ol><li><p>通过<strong>淘宝账号</strong>登陆, <code>codeup.aliyun.com</code>, 免费。</p></li><li><p>登陆 <code>github.com</code> ，注册一个账号，免费。我这里账号是<code>slcnx</code></p></li><li><p>安装windows git, <a href="https://gitforwindows.org/">https://gitforwindows.org/</a> 下载之后，直接安装。</p><p>需要先验证git, windows 打开 <code>CMD</code> , 输入 <code>git --version</code> <strong>看到</strong>版本号，说明git安装OK</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093045210.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093045210.png" alt="image-20220513093045210"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093045210.png">image-20220513093045210</a></p></li><li><p>安装windows node, <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 下载之后，直接安装</p><p>需要先验证node, windows 打开 <code>CMD</code> , 输入 <code>node --version</code> <strong>看到</strong>版本号，说明node安装OK</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093341959.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093341959.png" alt="image-20220513093341959"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093341959.png">image-20220513093341959</a></p></li><li><p>安装vscode, <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> 下载之后，直接安装</p></li><li><p>安装typora, <a href="https://typora.io/releases/all">https://typora.io/releases/all</a> 下载, 直接安装</p></li></ol><h1 id="准备hexo基础模板"><a href="#准备hexo基础模板" class="headerlink" title="准备hexo基础模板"></a>准备hexo基础模板</h1><p>克隆git, 在CMD执行, 以下目录</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">git clone --recurse-submodules https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/slcnx/</span>hexo-template.git blog<br>Copy<br></code></pre></td></tr></table></figure><blockquote><p>不成功多执行几次， 当看到100% 就表示成功了</p></blockquote><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094643815.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094643815.png" alt="image-20220513094643815"></a></p><p>现在进入克隆目录</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">cd</span> blog<br><span class="hljs-built_in">Copy</span><br></code></pre></td></tr></table></figure><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093934096.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093934096.png" alt="image-20220513093934096"></a></p><p>克隆子项目<code>git submodule update --init --recursive</code></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094748529.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094748529.png" alt="image-20220513094748529"></a></p><p>现在安装依赖<code> npm install</code></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095055192.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095055192.png" alt="image-20220513095055192"></a></p><p>现在在命令行输入 <code>start .</code></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093954383.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513093954383.png" alt="image-20220513093954383"></a></p><p>看到以下界面</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094013505.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094013505.png" alt="image-20220513094013505"></a></p><h1 id="vscode打开目录-运行服务"><a href="#vscode打开目录-运行服务" class="headerlink" title="vscode打开目录, 运行服务"></a>vscode打开目录, 运行服务</h1><p>回到上一级目录，<code>blog</code>目录, 右键 <strong>通过 Code</strong> 打开</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094214889.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094214889.png" alt="image-20220513094214889"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094214889.png">image-20220513094214889</a></p><p>进入到以下界面</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094228729.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094228729.png" alt="image-20220513094228729"></a></p><p>现在安装插件, 并退出vscode程序，之后重新 <code>blog</code>目录, 右键 <strong>通过 Code</strong> 打开</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094320097.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513094320097.png" alt="image-20220513094320097"></a></p><p>现在快捷键 <strong>ctrl + shift + `</strong> 运行 <strong>npx hexo s</strong></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095212339.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095212339.png" alt="image-20220513095212339"></a></p><p>访问本地的4000 <a href="http://localhost:4000/">http://localhost:4000/</a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095237808.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095237808.png" alt="image-20220513095237808"></a></p><h1 id="github准备"><a href="#github准备" class="headerlink" title="github准备"></a>github准备</h1><h2 id="准备github仓库"><a href="#准备github仓库" class="headerlink" title="准备github仓库"></a>准备github仓库</h2><p>查看自己的账号名 , 我的为 <code>slcnx</code></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095332738.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095332738.png" alt="image-20220513095332738"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095332738.png">image-20220513095332738</a></p><p>新建仓库 <code>slcnx.github.io</code> 格式是<code>用户名.github.io</code></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095640820.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095640820.png" alt="image-20220513095640820"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095652519.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095652519.png" alt="image-20220513095652519"></a></p><h2 id="添加一个测试文件"><a href="#添加一个测试文件" class="headerlink" title="添加一个测试文件"></a>添加一个测试文件</h2><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095752726.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095752726.png" alt="image-20220513095752726"></a></p><p>一定要添加<code>index.html</code></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095822054.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095822054.png" alt="image-20220513095822054"></a></p><p>添加之后，刷新网页，过3分钟的样子，右下角出现 active</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095942064.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513095942064.png" alt="image-20220513095942064"></a></p><p>访问网页 <a href="https://slcnx.github.io/">https://slcnx.github.io</a> <code>用户名.github.io</code></p><p>[<img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100016239.png" alt="image-20220513100016239"></p><p>现在表示github.com已经正常</p><h2 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h2><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100103791.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100103791.png" alt="image-20220513100103791"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100129679.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100129679.png" alt="image-20220513100129679"></a></p><p>现在需要生成一个公钥和密钥<code>ssh-keygen -t rsa -b 4096 -f id_rsa_2048 -P &#39;&#39;</code> 命令一定要对</p><blockquote><p>此处一定要在<code>Linux</code>主机上生成。之后下载 id_rsa_2048 id_rsa_2048.pub 到本地 博客blog目录</p></blockquote><p>vscode中查看公钥，复制公钥</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100509093.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100509093.png" alt="image-20220513100509093"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100606627.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100606627.png" alt="image-20220513100606627"></a></p><p>看到以下内容表示OK</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100630996.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100630996.png" alt="image-20220513100630996"></a></p><h2 id="获取github的ssh地址"><a href="#获取github的ssh地址" class="headerlink" title="获取github的ssh地址"></a>获取github的ssh地址</h2><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100825116.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513100825116.png" alt="image-20220513100825116"></a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git@github<span class="hljs-selector-class">.com</span>:slcnx/slcnx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span>.git<br></code></pre></td></tr></table></figure><p>有docker的同学可以, 可以运行以下命令验证是否正常。<strong>没有docker的同学，就不需要执行以下命令</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker build <span class="hljs-attr">--build-arg</span> GITHUB=git@github<span class="hljs-selector-class">.com</span>:slcnx/slcnx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span> <span class="hljs-attr">--build-arg</span> EMAIL=<span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> <span class="hljs-attr">--build-arg</span> GUSER=<span class="hljs-string">&#x27;songliangcheng&#x27;</span> ./<br>Copy<br></code></pre></td></tr></table></figure><h1 id="codeup准备"><a href="#codeup准备" class="headerlink" title="codeup准备"></a>codeup准备</h1><h2 id="准备codeup仓库"><a href="#准备codeup仓库" class="headerlink" title="准备codeup仓库"></a>准备codeup仓库</h2><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101358650.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101358650.png" alt="image-20220513101358650"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101431944.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101431944.png" alt="image-20220513101431944"></a></p><p>获取https地址 <code>https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-13.git</code></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101457691.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101457691.png" alt="image-20220513101457691"></a></p><h2 id="本地推送代码"><a href="#本地推送代码" class="headerlink" title="本地推送代码"></a>本地推送代码</h2><p>先在blog目录中， 即进入CMD中，在blog目录中</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">codeup</span>.<span class="hljs-string">aliyun</span>.<span class="hljs-string">com</span>/<span class="hljs-string">5f73e5a3728df4b180fab5ca</span>/<span class="hljs-string">myblog-2022-05-14</span>.<span class="hljs-string">git</span><br><span class="hljs-string">Copy</span><br></code></pre></td></tr></table></figure><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101730325.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101730325.png" alt="image-20220513101730325"></a></p><p>推送代码, 双击push.sh</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101816443.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101816443.png" alt="image-20220513101816443"></a></p><p>代码仓库, 已经有数据了</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101839833.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101839833.png" alt="image-20220513101839833"></a></p><h2 id="添加流水线"><a href="#添加流水线" class="headerlink" title="添加流水线"></a>添加流水线</h2><h3 id="进入流水线页面"><a href="#进入流水线页面" class="headerlink" title="进入流水线页面"></a>进入流水线页面</h3><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101902870.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101902870.png" alt="image-20220513101902870"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101910710.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101910710.png" alt="image-20220513101910710"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101941108.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513101941108.png" alt="image-20220513101941108"></a></p><h3 id="配置流水线"><a href="#配置流水线" class="headerlink" title="配置流水线"></a>配置流水线</h3><p>因为代码中有submodule, 就启用</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102015626.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102015626.png" alt="image-20220513102015626"></a></p><p>定义构建镜像</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102242848.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102242848.png" alt="image-20220513102242848"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102317624.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102317624.png" alt="image-20220513102317624"></a></p><p>配置构建参考，<strong>非常关键</strong>, 这里有3个参数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">EMAIL       你的QQ邮箱 <br>GUSER       你的用户名，任意<br>GITHUB      这里一定是你上面github创建的仓库的ssh地址，参考<span class="hljs-number">4.4</span>获取githubssh地址。我的为 git@github<span class="hljs-selector-class">.com</span>:slcnx/slcnx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span><br>Copy<br></code></pre></td></tr></table></figure><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103303012.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103303012.png" alt="image-20220513103303012"></a></p><p>不需要发布所以删除kubernetes</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102349111.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102349111.png" alt="image-20220513102349111"></a></p><p>保存并运行</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102407557.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102407557.png" alt="image-20220513102407557"></a></p><h3 id="运行流水线"><a href="#运行流水线" class="headerlink" title="运行流水线"></a>运行流水线</h3><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102417620.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102417620.png" alt="image-20220513102417620"></a></p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102440868.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102440868.png" alt="image-20220513102440868"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103852668.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103852668.png" alt="image-20220513103852668"></a></p><h3 id="查看github-com"><a href="#查看github-com" class="headerlink" title="查看github.com"></a>查看github.com</h3><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103918387.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103918387.png" alt="image-20220513103918387"></a></p><h1 id="查看网页"><a href="#查看网页" class="headerlink" title="查看网页"></a>查看网页</h1><p><a href="https://slcnx.github.io/">https://slcnx.github.io/</a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102518346.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102518346.png" alt="image-20220513102518346"></a></p><h1 id="写新的文章"><a href="#写新的文章" class="headerlink" title="写新的文章"></a>写新的文章</h1><h2 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h2><p>运行<code>addarticle.sh</code>脚本, 写标题 <strong>第3个文章</strong></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102558031.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102558031.png" alt="image-20220513102558031"></a></p><p>会自动弹出博客编写页面 编写<strong>第3个文章</strong></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103034036.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103034036.png" alt="image-20220513103034036"></a></p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103100965.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513103100965.png" alt="image-20220513103100965"></a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第3个文章</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">linux</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-13 10:26:14</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">hello</span><br><br><span class="hljs-type">![image</span><span class="hljs-number">-20220513102937310</span><span class="hljs-string">](第3个文章/image-20220513102937310.png)</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br><span class="hljs-string">Copy</span><br></code></pre></td></tr></table></figure><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>运行push.sh脚本</p><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102729742.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513102729742.png" alt="image-20220513102729742"></a></p><h2 id="查看网页-1"><a href="#查看网页-1" class="headerlink" title="查看网页"></a>查看网页</h2><p><a href="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513104016387.png"><img src="https://slcnx.github.io/2022/05/13/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220513104016387.png" alt="image-20220513104016387"></a></p><h1 id="自定义网页样式"><a href="#自定义网页样式" class="headerlink" title="自定义网页样式"></a>自定义网页样式</h1><p><a href="https://slcnx.github.io/2022/05/12/%E5%85%8D%E8%B4%B9%E6%90%9E%E7%BD%91%E7%AB%99-gitpages/#%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F">本地开发</a></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>免费博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免费博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Python数学建模函数库</title>
    <link href="/2023/07/29/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Python%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%87%BD%E6%95%B0%E5%BA%93/"/>
    <url>/2023/07/29/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Python%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%87%BD%E6%95%B0%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="NumPy-库"><a href="#NumPy-库" class="headerlink" title="NumPy 库"></a>NumPy 库</h1><h2 id="NumPy-的基本使用"><a href="#NumPy-的基本使用" class="headerlink" title="NumPy 的基本使用"></a>NumPy 的基本使用</h2><h3 id="函数的导入"><a href="#函数的导入" class="headerlink" title="函数的导入"></a>函数的导入</h3><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><p>将列表或元组转化为数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>使用 arange 在给定区间内创建等差数组</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">arange</span>(start, stop, step, dtpye)<br>#生成区间[start,stop)上步长间隔为step的等差数列<br></code></pre></td></tr></table></figure><p>使用 linspace 在给定区间内创建间隔相等的数组</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">linspace(<span class="hljs-literal">start</span>,<span class="hljs-literal">stop</span>,<span class="hljs-attr">num=</span><span class="hljs-number">50</span>,<span class="hljs-attr">endpoint=</span><span class="hljs-literal">True</span>)<br><span class="hljs-comment">#生成区间[start,stop]上间隔相等的num个数据的等差数列，num的默认值为50</span><br></code></pre></td></tr></table></figure><p>使用 logspace 在给定区间上生成等比数组</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">logspace</span>(start,stop,num=<span class="hljs-number">50</span>,endpoint=True,base=<span class="hljs-number">10</span>.<span class="hljs-number">0</span>)<br><span class="hljs-comment">#默认生成区间[10^start,10^stop]上的num个数据的等比数组</span><br></code></pre></td></tr></table></figure><p>使用ones、zeros、empty、ones_like等系列函数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = np.<span class="hljs-literal">on</span>es(<span class="hljs-number">4</span>, dtype=int)     <span class="hljs-comment">#输出[1, 1, 1, 1]</span><br><span class="hljs-attr">b</span> = np.<span class="hljs-literal">on</span>es((<span class="hljs-number">4</span>,), dtype=int)  <span class="hljs-comment">#同a</span><br><span class="hljs-attr">c</span>= np.<span class="hljs-literal">on</span>es((<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),dtype=int)   <span class="hljs-comment">#输出4行1列的数组</span><br><span class="hljs-attr">d</span> = np.zeros(<span class="hljs-number">4</span>,dtype=int)     <span class="hljs-comment">#输出[0, 0, 0, 0]</span><br><span class="hljs-attr">e</span> = np.empty(<span class="hljs-number">3</span>,dtype=int)     <span class="hljs-comment">#生成3个元素的空数组行向量</span><br><span class="hljs-attr">f</span> = np.eye(<span class="hljs-number">3</span>,dtype=int)       <span class="hljs-comment">#生成3阶单位阵</span><br><span class="hljs-attr">g</span> = np.eye(<span class="hljs-number">3</span>, k=<span class="hljs-number">0</span>)  <span class="hljs-comment">#生成第k对角线的元素为1，其他元素为0的3阶方阵</span><br><span class="hljs-attr">h</span> = np.zeros_like(a)          <span class="hljs-comment">#生成与a同维数的全0数组</span><br></code></pre></td></tr></table></figure><h3 id="数组元素的索引"><a href="#数组元素的索引" class="headerlink" title="数组元素的索引"></a>数组元素的索引</h3><p>​    对于一维数组，无非就记住一个原则：列表名(数组名)[start: end: step],但不包括索引end对应的值。</p><p>​    二维数据列表元素的引用方式为a[i] [j]; array数组元素的引用方式可以为a[i,j]。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> = np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)  #生成<span class="hljs-number">4</span>行<span class="hljs-number">4</span>列的数组<br><span class="hljs-attribute">b</span> = a[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]   #输出<span class="hljs-number">6</span><br><span class="hljs-attribute">c</span> = a[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]   #同b<br><span class="hljs-attribute">d</span> = a[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>, <span class="hljs-number">2</span>:<span class="hljs-number">3</span>]  #输出[[<span class="hljs-number">6</span>]]<br><span class="hljs-attribute">x</span> = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br><span class="hljs-attribute">print</span>(a[x==<span class="hljs-number">1</span>])  #输出a的第<span class="hljs-number">2</span>、<span class="hljs-number">4</span>行元素<br></code></pre></td></tr></table></figure><h3 id="矩阵的合并"><a href="#矩阵的合并" class="headerlink" title="矩阵的合并"></a>矩阵的合并</h3><p>vstack([A,B])     矩阵上下合并</p><p>hstack([A,B])    矩阵左右合并</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)  <span class="hljs-comment">#生成4行4列的数组</span><br><span class="hljs-attr">b</span> = np.floor(<span class="hljs-number">5</span>*np.random.random((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)))<span class="hljs-comment">#元素小于5</span><br><span class="hljs-attr">c</span> = np.ceil(<span class="hljs-number">6</span>*np.random.random((<span class="hljs-number">4</span>, <span class="hljs-number">2</span>)))<span class="hljs-comment">#元素不超过6</span><br><span class="hljs-attr">d</span> = np.vstack([a, b])  <span class="hljs-comment">#上下合并矩阵</span><br><span class="hljs-attr">e</span> = np.hstack([a, c])  <span class="hljs-comment">#左右合并矩阵</span><br></code></pre></td></tr></table></figure><h3 id="矩阵的分割"><a href="#矩阵的分割" class="headerlink" title="矩阵的分割"></a>矩阵的分割</h3><p>vsplit(a, m)    把a平均分成m个行数组</p><p>hsplit(a, n)    把a平均分成n个列数组。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">16</span>)<span class="hljs-selector-class">.reshape</span>(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)  #生成<span class="hljs-number">4</span>行<span class="hljs-number">4</span>列的数组<br><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.vsplit</span>(<span class="hljs-selector-tag">a</span>, <span class="hljs-number">2</span>)             #行分割，平均分成<span class="hljs-number">2</span>分<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;行分割：\n&#x27;</span>,b[<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;\n&#x27;</span>,b[<span class="hljs-number">1</span>])</span></span><br>c = np<span class="hljs-selector-class">.hsplit</span>(<span class="hljs-selector-tag">a</span>, <span class="hljs-number">4</span>)             #列分割，平均分成<span class="hljs-number">4</span>分<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;列分割：\n&#x27;</span>,c[<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;\n&#x27;</span>,c[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;\n&#x27;</span>,c[<span class="hljs-number">2</span>], <span class="hljs-string">&#x27;\n&#x27;</span>,c[<span class="hljs-number">3</span>])</span></span><br></code></pre></td></tr></table></figure><h3 id="矩阵的简单运算"><a href="#矩阵的简单运算" class="headerlink" title="矩阵的简单运算"></a>矩阵的简单运算</h3><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span> = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]])<br>b = <span class="hljs-keyword">a</span>.<span class="hljs-built_in">sum</span>()   <span class="hljs-comment">#使用方法，求矩阵所有元素的和</span><br>c1 = <span class="hljs-built_in">sum</span>(<span class="hljs-keyword">a</span>)   <span class="hljs-comment">#使用内置函数，求矩阵逐列元素的和</span><br>c2 = np.<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">a</span>, axis=<span class="hljs-number">0</span>) <span class="hljs-comment">#使用函数，求矩阵逐列元素的和</span><br>c3 = np.<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">a</span>, axis=<span class="hljs-number">0</span>, keepdims=True)   <span class="hljs-comment">#逐列求和</span><br>print(c2.shape, c3.shape)  <span class="hljs-comment">#c2是(3,)数组，c3是(1,3)数组</span><br><span class="hljs-comment">#当axis=1时，表示逐行</span><br></code></pre></td></tr></table></figure><h4 id="逐个元素运算"><a href="#逐个元素运算" class="headerlink" title="逐个元素运算"></a>逐个元素运算</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]])<br><span class="hljs-attr">b</span> = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>]])<br><span class="hljs-attr">c</span> = a / b   <span class="hljs-comment">#两个矩阵对应元素相除</span><br><span class="hljs-attr">d</span> = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<br><span class="hljs-attr">e</span> = a * d   <span class="hljs-comment">#d先广播成与a同维数的矩阵，再逐个元素相乘</span><br><span class="hljs-attr">f</span> = np.array([[<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>]])<br><span class="hljs-attr">g</span> = a * f   <span class="hljs-comment">#f先广播成与a同维数的矩阵，再逐个元素相乘</span><br><span class="hljs-attr">h</span> = a ** (<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)  <span class="hljs-comment">#a矩阵逐个元素的1/2次幂。</span><br></code></pre></td></tr></table></figure><h4 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> = np.ones(<span class="hljs-number">4</span>,dtype=int)        #[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br><span class="hljs-attribute">b</span> = np.arange(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)    #[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>]<br><span class="hljs-attribute">c</span> = a @ b  #a作为行向量, b作为列向量 <span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">d</span> = np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>) <br>  <span class="hljs-comment">#[[0,1,2,3],[4,5,6,7],[8,9,10,11],[12,13,14,15]</span><br><span class="hljs-attribute">f</span> = a @ d  #a作为行向量 <span class="hljs-meta"> [24 28 32 36]</span><br><span class="hljs-attribute">g</span> = d @ a  #a作为列向量<span class="hljs-meta">[ 6 22 38 54]</span><br></code></pre></td></tr></table></figure><h4 id="矩阵代数与线性运算-–-linalg"><a href="#矩阵代数与线性运算-–-linalg" class="headerlink" title="矩阵代数与线性运算 – linalg"></a>矩阵代数与线性运算 – linalg</h4><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307271624584.png"></p><ul><li><h5 id="norm-–-求向量或矩阵的范数"><a href="#norm-–-求向量或矩阵的范数" class="headerlink" title="norm – 求向量或矩阵的范数"></a>norm – 求向量或矩阵的范数</h5></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">norm</span><span class="hljs-params">(x, ord=None, axis=None, keepdims=False)</span></span><br><br>x: 表示要度量的向量或矩阵；<br>ord: 表示范数的种类，例如<span class="hljs-number">1</span>范数，<span class="hljs-number">2</span>范数，范数。<br>axis: axis=<span class="hljs-number">1</span>表示按行向量处理，求多个行向量的范数；axis=<span class="hljs-number">0</span>表示按列向量处理，求多个列向量的范数；axis=None表示矩阵范数。<br>keepdims: 是否保持矩阵的二维特性。True表示保持矩阵的二维特性，False则相反。<br><br><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[0, 3, 4]</span>, <span class="hljs-selector-attr">[1, 6, 4]</span>])<br><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.linalg</span><span class="hljs-selector-class">.norm</span>(<span class="hljs-selector-tag">a</span>, axis=<span class="hljs-number">1</span>)  #求行向量<span class="hljs-number">2</span>范数<br>c = np<span class="hljs-selector-class">.linalg</span><span class="hljs-selector-class">.norm</span>(<span class="hljs-selector-tag">a</span>, axis=<span class="hljs-number">0</span>)  #求列向量<span class="hljs-number">2</span>范数<br>d = np<span class="hljs-selector-class">.linalg</span><span class="hljs-selector-class">.norm</span>(a)   #求矩阵<span class="hljs-number">2</span>范数<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;行向量2范数为：&#x27;</span>, np.round(b, <span class="hljs-number">4</span>)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;列向量2范数为：&#x27;</span>, np.round(c, <span class="hljs-number">4</span>)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;矩阵2范数为：&#x27;</span>, round(d, <span class="hljs-number">4</span>)</span></span>)<br></code></pre></td></tr></table></figure><ul><li><h5 id="inv-–-求逆矩阵"><a href="#inv-–-求逆矩阵" class="headerlink" title="inv – 求逆矩阵"></a>inv – 求逆矩阵</h5></li><li><h5 id="pinv-–-求广义矩阵"><a href="#pinv-–-求广义矩阵" class="headerlink" title="pinv – 求广义矩阵"></a>pinv – 求广义矩阵</h5></li><li><h5 id="solve-–-求解线性方程组"><a href="#solve-–-求解线性方程组" class="headerlink" title="solve – 求解线性方程组"></a>solve – 求解线性方程组</h5></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416969.png"></p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stan">a = np.<span class="hljs-type">array</span>([[<span class="hljs-number">3</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<br>b = np.<span class="hljs-type">array</span>([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>])<br>x1 = np.linalg.<span class="hljs-built_in">inv</span>(a) @ b  <span class="hljs-comment">#第一种解法</span><br><span class="hljs-comment">#上面语句中@表示矩阵乘法</span><br>x2 = np.linalg.solve(a, b) <span class="hljs-comment">#第二种解法</span><br><span class="hljs-built_in">print</span>(x1); <span class="hljs-built_in">print</span>(x2)<br>求得x=<span class="hljs-number">2</span>，y=<span class="hljs-number">3</span>。<br></code></pre></td></tr></table></figure><ul><li><h5 id="det-–-求解矩阵的行列式"><a href="#det-–-求解矩阵的行列式" class="headerlink" title="det – 求解矩阵的行列式"></a>det – 求解矩阵的行列式</h5></li><li><h5 id="lstsq-–-最小二乘法求解超定线性方程组"><a href="#lstsq-–-最小二乘法求解超定线性方程组" class="headerlink" title="lstsq – 最小二乘法求解超定线性方程组"></a>lstsq – 最小二乘法求解超定线性方程组</h5></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416940.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[3, 1]</span>, <span class="hljs-selector-attr">[1, 2]</span>, <span class="hljs-selector-attr">[1, 1]</span>])<br><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[9, 8, 6]</span>)<br>x = np<span class="hljs-selector-class">.linalg</span><span class="hljs-selector-class">.pinv</span>(a) @ <span class="hljs-selector-tag">b</span>  <br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(np.round(x, <span class="hljs-number">4</span>)</span></span>)<br>    求得的最小二乘解为x=<span class="hljs-number">2</span>，y=<span class="hljs-number">3.1667</span><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">import numpy as np     # 构造一个线性方程组   <br>A = np.array(<span class="hljs-string">[[1, 2], [3, 4], [5, 6]]</span>)   <br>B = np.array(<span class="hljs-string">[[-1], [2], [3]]</span>)     <br># 使用lstsq函数求解线性方程组   <br>x, residuals, rank, s = np.linalg.lstsq(A, B, rcond=None)     <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最小二乘解：&quot;</span>, x)<br>#函数返回的结果包括最小二乘解 x、残差平方和 residuals、矩阵的秩 rank 和奇异值 s。<br></code></pre></td></tr></table></figure><ul><li><h5 id="eig-–-求矩阵的特征值和特征向量"><a href="#eig-–-求矩阵的特征值和特征向量" class="headerlink" title="eig – 求矩阵的特征值和特征向量"></a>eig – 求矩阵的特征值和特征向量</h5></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416133.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.eye</span>(<span class="hljs-number">4</span>)<br><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.rot90</span>(a)<br>c, d = np<span class="hljs-selector-class">.linalg</span><span class="hljs-selector-class">.eig</span>(b)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;特征值为：&#x27;</span>, c)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;特征向量为：\n&#x27;</span>, d)</span></span><br></code></pre></td></tr></table></figure><ul><li><h5 id="eigvals-–-求矩阵的特征值"><a href="#eigvals-–-求矩阵的特征值" class="headerlink" title="eigvals – 求矩阵的特征值"></a>eigvals – 求矩阵的特征值</h5></li><li><h5 id="svd-–-矩阵的奇异值分解"><a href="#svd-–-矩阵的奇异值分解" class="headerlink" title="svd – 矩阵的奇异值分解"></a>svd – 矩阵的奇异值分解</h5></li><li><h5 id="qr-–-求矩阵的QR分解"><a href="#qr-–-求矩阵的QR分解" class="headerlink" title="qr – 求矩阵的QR分解"></a>qr – 求矩阵的QR分解</h5></li></ul><h1 id="Pandas库"><a href="#Pandas库" class="headerlink" title="Pandas库"></a>Pandas库</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416708.png"></p><h2 id="引用Pandas库"><a href="#引用Pandas库" class="headerlink" title="引用Pandas库"></a>引用Pandas库</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h2 id="生成二维数组"><a href="#生成二维数组" class="headerlink" title="生成二维数组"></a>生成二维数组</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416475.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">dates=pd.date<span class="hljs-constructor">_range(<span class="hljs-params">start</span>=&#x27;20191101&#x27;,<span class="hljs-params">end</span>=&#x27;20191124&#x27;,<span class="hljs-params">freq</span>=&#x27;D&#x27;)</span><br>a1=pd.<span class="hljs-constructor">DataFrame(<span class="hljs-params">np</span>.<span class="hljs-params">random</span>.<span class="hljs-params">randn</span>(24,4)</span>, index=dates, columns=<span class="hljs-built_in">list</span>(&#x27;ABCD&#x27;))<br>a2=pd.<span class="hljs-constructor">DataFrame(<span class="hljs-params">np</span>.<span class="hljs-params">random</span>.<span class="hljs-params">rand</span>(24,4)</span>)<br></code></pre></td></tr></table></figure><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416454.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">数据写入文件示例。<br>#程序文件ex2_38_1.py<br>import pandas <span class="hljs-keyword">as</span> pd<br>import numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date<span class="hljs-constructor">_range(<span class="hljs-params">start</span>=&#x27;20191101&#x27;, <span class="hljs-params">end</span>=&#x27;20191124&#x27;, <span class="hljs-params">freq</span>=&#x27;D&#x27;)</span><br>a1=pd.<span class="hljs-constructor">DataFrame(<span class="hljs-params">np</span>.<span class="hljs-params">random</span>.<span class="hljs-params">randn</span>(24,4)</span>, index=dates, columns=<span class="hljs-built_in">list</span>(&#x27;ABCD&#x27;))<br>a2=pd.<span class="hljs-constructor">DataFrame(<span class="hljs-params">np</span>.<span class="hljs-params">random</span>.<span class="hljs-params">randn</span>(24,4)</span>)<br>a1.<span class="hljs-keyword">to</span><span class="hljs-constructor">_excel(&#x27;<span class="hljs-params">data2_38_1</span>.<span class="hljs-params">xlsx</span>&#x27;)</span><br>a2.<span class="hljs-keyword">to</span><span class="hljs-constructor">_csv(&#x27;<span class="hljs-params">data2_38_2</span>.<span class="hljs-params">csv</span>&#x27;)</span><br>f=pd.<span class="hljs-constructor">ExcelWriter(&#x27;<span class="hljs-params">data2_38_3</span>.<span class="hljs-params">xlsx</span>&#x27;)</span>  #创建文件对象<br>a1.<span class="hljs-keyword">to</span><span class="hljs-constructor">_excel(<span class="hljs-params">f</span>,<span class="hljs-string">&quot;Sheet1&quot;</span>)</span>  #把a1写入Excel文件<br>a2.<span class="hljs-keyword">to</span><span class="hljs-constructor">_excel(<span class="hljs-params">f</span>,<span class="hljs-string">&quot;Sheet2&quot;</span>)</span>  #把a2写入另一个表单中<br>f.save<span class="hljs-literal">()</span><br><br>如果写入数据时，不包含行索引，Python程序如下：<br>#程序文件ex2_38_2.py<br>import pandas <span class="hljs-keyword">as</span> pd<br>import numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date<span class="hljs-constructor">_range(<span class="hljs-params">start</span>=&#x27;20191101&#x27;,  <span class="hljs-params">end</span>=&#x27;20191124&#x27;,  <span class="hljs-params">freq</span>=&#x27;D&#x27;)</span><br>a1=pd.<span class="hljs-constructor">DataFrame(<span class="hljs-params">np</span>.<span class="hljs-params">random</span>.<span class="hljs-params">randn</span>(24,4)</span>, index=dates, columns=<span class="hljs-built_in">list</span>(&#x27;ABCD&#x27;))<br>a2=pd.<span class="hljs-constructor">DataFrame(<span class="hljs-params">np</span>.<span class="hljs-params">random</span>.<span class="hljs-params">randn</span>(24,4)</span>)<br>a1.<span class="hljs-keyword">to</span><span class="hljs-constructor">_excel(&#x27;<span class="hljs-params">data2_38_4</span>.<span class="hljs-params">xlsx</span>&#x27;, <span class="hljs-params">index</span>=False)</span>  #不包括行索引<br>a2.<span class="hljs-keyword">to</span><span class="hljs-constructor">_csv(&#x27;<span class="hljs-params">data2_38_5</span>.<span class="hljs-params">csv</span>&#x27;, <span class="hljs-params">index</span>=False)</span>   #不包括行索引<br>f=pd.<span class="hljs-constructor">ExcelWriter(&#x27;<span class="hljs-params">data2_38_6</span>.<span class="hljs-params">xlsx</span>&#x27;)</span>  #创建文件对象<br>a1.<span class="hljs-keyword">to</span><span class="hljs-constructor">_excel(<span class="hljs-params">f</span>,<span class="hljs-string">&quot;Sheet1&quot;</span>, <span class="hljs-params">index</span>=False)</span>  #把a1写入Excel文件<br>a2.<span class="hljs-keyword">to</span><span class="hljs-constructor">_excel(<span class="hljs-params">f</span>,<span class="hljs-string">&quot;Sheet2&quot;</span>, <span class="hljs-params">index</span>=False)</span>  #把a2写入另一个表单中<br>f.save<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>从文件中读入数据示例</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import pandas <span class="hljs-keyword">as</span> pd<br>a=pd.read<span class="hljs-constructor">_csv(<span class="hljs-string">&quot;data2_38_2.csv&quot;</span>, <span class="hljs-params">usecols</span>=<span class="hljs-params">range</span>(1,5)</span>)<br>b=pd.read<span class="hljs-constructor">_excel(<span class="hljs-string">&quot;data2_38_3.xlsx&quot;</span>, <span class="hljs-string">&quot;Sheet2&quot;</span>, <span class="hljs-params">usecols</span>=<span class="hljs-params">range</span>(1,5)</span>)<br></code></pre></td></tr></table></figure><h2 id="数据的一些预处理"><a href="#数据的一些预处理" class="headerlink" title="数据的一些预处理"></a>数据的一些预处理</h2><h3 id="DataFrame数据的拆分、合并和分组计算"><a href="#DataFrame数据的拆分、合并和分组计算" class="headerlink" title="DataFrame数据的拆分、合并和分组计算"></a>DataFrame数据的拆分、合并和分组计算</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">d</span>=pd.DataFrame(np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>)), columns=list(<span class="hljs-string">&quot;ABCD&quot;</span>))<br><span class="hljs-attr">d1</span>=d[:<span class="hljs-number">4</span>]  <span class="hljs-comment">#获取前4行数据</span><br><span class="hljs-attr">d2</span>=d[<span class="hljs-number">4</span>:]  <span class="hljs-comment">#获取第5行以后的数据</span><br><span class="hljs-attr">dd</span>=pd.concat([d1,d2])   <span class="hljs-comment">#数据行合并</span><br><span class="hljs-attr">s1</span>=d.groupby(<span class="hljs-string">&#x27;A&#x27;</span>).mean()      <span class="hljs-comment">#数据分组求均值</span><br><span class="hljs-attr">s2</span>=d.groupby(<span class="hljs-string">&#x27;A&#x27;</span>).apply(sum)  <span class="hljs-comment">#数据分组求和</span><br></code></pre></td></tr></table></figure><h3 id="数据的选取与清洗"><a href="#数据的选取与清洗" class="headerlink" title="数据的选取与清洗"></a>数据的选取与清洗</h3><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416842.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import pandas as pd<br>import numpy as np<br><span class="hljs-selector-tag">a</span> = pd<span class="hljs-selector-class">.DataFrame</span>(np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.randint</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)),<br>                 index=<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]</span>,<br>                 <span class="hljs-attribute">columns</span>=[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>])<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.loc</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>]</span> = np<span class="hljs-selector-class">.nan</span>  #修改第<span class="hljs-number">1</span>行第<span class="hljs-number">1</span>列的数据<br><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.iloc</span><span class="hljs-selector-attr">[1:3, 0:2]</span><span class="hljs-selector-class">.values</span>  #提取第<span class="hljs-number">2</span>、<span class="hljs-number">3</span>行，第<span class="hljs-number">1</span>、<span class="hljs-number">2</span>列数据<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;four&#x27;</span>]</span> = <span class="hljs-string">&#x27;bar&#x27;</span>  #增加第<span class="hljs-number">4</span>列数据<br>a2 = <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.reindex</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]</span>)<br>a3 = a2<span class="hljs-selector-class">.dropna</span>()   #删除有不确定值的行<br></code></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="内置函数-–-open"><a href="#内置函数-–-open" class="headerlink" title="内置函数 – open( )"></a>内置函数 – open( )</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416340.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416868.png"></p><h2 id="文件对象常用方法"><a href="#文件对象常用方法" class="headerlink" title="文件对象常用方法"></a>文件对象常用方法</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291416091.png"></p><h2 id="上下文管理语句"><a href="#上下文管理语句" class="headerlink" title="上下文管理语句"></a>上下文管理语句</h2><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291417987.png"></p><h1 id="SciPy库"><a href="#SciPy库" class="headerlink" title="SciPy库"></a>SciPy库</h1><p><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307291417780.png"></p><h2 id="求解非线性方程（组）"><a href="#求解非线性方程（组）" class="headerlink" title="求解非线性方程（组）"></a>求解非线性方程（组）</h2><h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><h2 id="最小二乘法解非线性方程组"><a href="#最小二乘法解非线性方程组" class="headerlink" title="最小二乘法解非线性方程组"></a>最小二乘法解非线性方程组</h2><h2 id="求列矩阵的最大模特征值级吸引的特征向量"><a href="#求列矩阵的最大模特征值级吸引的特征向量" class="headerlink" title="求列矩阵的最大模特征值级吸引的特征向量"></a>求列矩阵的最大模特征值级吸引的特征向量</h2><h1 id="SymPy-库"><a href="#SymPy-库" class="headerlink" title="SymPy 库"></a>SymPy 库</h1><h2 id="引用SymPy库"><a href="#引用SymPy库" class="headerlink" title="引用SymPy库"></a>引用SymPy库</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">inport sympy <span class="hljs-keyword">as</span> <span class="hljs-keyword">sp</span><br></code></pre></td></tr></table></figure><h1 id="Matplotlib-库"><a href="#Matplotlib-库" class="headerlink" title="Matplotlib 库"></a>Matplotlib 库</h1><h2 id="二维绘图"><a href="#二维绘图" class="headerlink" title="二维绘图"></a>二维绘图</h2><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><h2 id="Pandas结合Matplotlib进行数据可视化"><a href="#Pandas结合Matplotlib进行数据可视化" class="headerlink" title="Pandas结合Matplotlib进行数据可视化"></a>Pandas结合Matplotlib进行数据可视化</h2><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><h2 id="三维绘图"><a href="#三维绘图" class="headerlink" title="三维绘图"></a>三维绘图</h2><h3 id="三维曲线"><a href="#三维曲线" class="headerlink" title="三维曲线"></a>三维曲线</h3><h3 id="三维曲面图"><a href="#三维曲面图" class="headerlink" title="三维曲面图"></a>三维曲面图</h3><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clouder-部署ECS环境并使用FileZilla上传</title>
    <link href="/2023/07/27/Clouder-%E9%83%A8%E7%BD%B2ECS%E7%8E%AF%E5%A2%83%E5%B9%B6%E4%BD%BF%E7%94%A8FileZilla%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/07/27/Clouder-%E9%83%A8%E7%BD%B2ECS%E7%8E%AF%E5%A2%83%E5%B9%B6%E4%BD%BF%E7%94%A8FileZilla%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>实验概述</strong></p><p>  本实验用户将完整体验一次如何将本地开发好的网站<strong>安全</strong>地发布到阿里云的云服务器ECS之上，最终用户可以使用服务器的IP地址访问到自己的网站。</p><p><strong>实验目标</strong></p><p> 完成此实验后，可以掌握的能力有：</p><p>\1. 在Linux操作系统中，使用Apache搭建基础网站环境；</p><p>\2. 使用FileZilla通过SFTP安全传输文件到云服务器ECS；</p><p>\3. 本地网站安全发布到云服务器ECS中；</p><p>\4. 添加Linux用户；</p><p>\5. 修改Linux用户密码；</p><p><strong>学前建议</strong></p><p>\1. 了解Linux操作系统的基本命令。 </p><h1 id="部署ECS环境"><a href="#部署ECS环境" class="headerlink" title="部署ECS环境"></a>部署ECS环境</h1><p>\1. 在实验室页面右侧，单击单击<img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307281058342.png" alt="img"  /> 图标，打开Web Terminal。</p><p>备注：若Web Terminal界面没有打开，请尝试刷新页面重新连接。</p><p>\2. 使用yum方式，下载并安装Apache。</p><p>在Linux系统中使用yum工具可以帮助用户方便的安装软件包。修改yum更新源为CentOS官网。</p><p>执行命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-* /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>epel.repo <span class="hljs-regexp">/etc/yum</span>.repos.d/backup<br></code></pre></td></tr></table></figure><p>然后输入 y，如图所示</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1610093635397-772CTz" alt="img" style="zoom:80%;" /><p>执行命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/yum</span>.repos.d/base.repo<br></code></pre></td></tr></table></figure><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1610093670947-3DCF6w" alt="img" style="zoom:80%;" /><p>写入下面内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[base]</span><br><span class="hljs-attr">name</span>=base<br><span class="hljs-attr">baseurl</span>=https://mirrors.aliyun.com/centos-vault/<span class="hljs-number">6.5</span>/os/x<span class="hljs-number">86_64</span>/<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1648871501717-wvjSP7" alt="img" style="zoom: 67%;" /><p>点击ECS，输入:wq ，保存并退出。</p><p>执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum clean <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1610093735569-QDi1dG" alt="img" style="zoom:80%;" /><p>执行命令安装Apache环境：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> httpd<br></code></pre></td></tr></table></figure><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1492759770031-nzd21n" alt="img" style="zoom:80%;" /><p>等待一段时间后，页面显示 <strong>Complete！</strong>证明Apache环境安装完成。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1492759842255-UbBz2m" alt="img" style="zoom:80%;" /><p>\3. 执行如下命令，添加一个Linux用户 <strong>siteadmin</strong> 并指定新增用户的远程登录默认访问路径为 <strong>/var/www/html，</strong>忽略警告信息即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">adduser -d <span class="hljs-regexp">/var/</span>www/html siteadmin<br></code></pre></td></tr></table></figure><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1492760211907-MAUpC2" alt="img" style="zoom:80%;" /><p>\4. 执行如下命令，设置新建用户 <strong>siteadmin</strong> 的登录密码：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">passwd siteadmin</span><br></code></pre></td></tr></table></figure><p>自定义登录密码，例如：<strong>siteadmin</strong></p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1492764212954-tkaMKo" alt="img" style="zoom:80%;" /><p>备注：输入密码时Web Terminal里不会明文显示，输入完成回车确认即可。</p><p>\5. 执行如下命令，授予 <strong>siteadmin</strong> 用户权限：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chown  -Rf  siteadmin.siteadmin  <span class="hljs-regexp">/var/</span>www/html<br></code></pre></td></tr></table></figure><p>其中代码：siteadmin.&lt;自定义用户密码&gt;</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1492760429820-G8ItrA" alt="img" style="zoom:80%;" /><p>\6. 执行如下命令，启动Apache服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service httpd <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1492760520387-4BqM6E" alt="img" style="zoom:80%;" /><p>\7. 本地打开浏览器，并输入实验资源中提供的 <strong>Linux服务器</strong> 的 <strong>弹性公网IP</strong> 。若页面显示 <strong>Apache 2 Test Page，</strong>则证明Apache已部署成功。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/ba70fc3a856948459ee8792994f23447/content/images/course-129136057c2a4d50af22490b5ce8f878-section-ba70fc3a856948459ee8792994f23447-content-image-1492760637682-xLHx0K" alt="img" style="zoom:80%;" /><h1 id="（Mac系统）使用FileZilla上传本地"><a href="#（Mac系统）使用FileZilla上传本地" class="headerlink" title="（Mac系统）使用FileZilla上传本地"></a>（Mac系统）使用FileZilla上传本地</h1><p>\1. 请通过如下步骤，<strong>下载并安装</strong> <strong>FileZilla软件。</strong></p><p>1）<a href="https://university-labfileapp.oss-cn-hangzhou.aliyuncs.com/FileZilla_3.61.0_macosx-x86.app.tar.bz2">点击下载FileZilla</a></p><p>2）解压已下载的文件到当前或其他路径中。</p><p>3）此时，在FileZilla的解压路径中，双击并打开 <strong>FileZilla</strong> 软件。</p><p>\2. 通过如下操作，<strong>连接到ECS服务器。</strong></p><p>1）点击“文件-站点管理器”，新建站点</p><ul><li>主机：输入本实验资源中分配的ECS Linux服务器 的 弹性公网IP；</li><li>用户名：输入ECS服务器中新建用户 siteadmin；</li><li>密码：输入上一步骤中 siteadmin 用户的自定义登录密码，例如：siteadmin；</li><li>端口：输入 22；</li><li>协议：SSH</li></ul><img src="https://cdn.jsdelivr.net/gh/jrdhome/images@main/images/202307281058273.png" alt="img" style="zoom:50%;" /><p>2）弹出记住密码对话框，选择 <strong>不要保存密码</strong> ，完成后，点击 <strong>确定 。</strong></p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/eabc66a10c91439faaf2e608bdadda59/content/images/course-129136057c2a4d50af22490b5ce8f878-section-eabc66a10c91439faaf2e608bdadda59-content-image-1492764542241-kuLrdP" alt="img" style="zoom:80%;" /><p>3）弹出 <strong>是否信任主机</strong> 的提示，点击 <strong>确定 。</strong></p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/eabc66a10c91439faaf2e608bdadda59/content/images/course-129136057c2a4d50af22490b5ce8f878-section-eabc66a10c91439faaf2e608bdadda59-content-image-1492764599960-wFeBS6" alt="img" style="zoom:80%;" /><p>4）此时，右侧页面显示ECS的访问路径 <strong>/var/www/html，</strong>且当前路径下无文件。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/eabc66a10c91439faaf2e608bdadda59/content/images/course-129136057c2a4d50af22490b5ce8f878-section-eabc66a10c91439faaf2e608bdadda59-content-image-1492764832096-JTQaDN" alt="img" style="zoom: 50%;" /><p>\3. 通过如下步骤，<strong>将本地的站点文件上传到ECS服务器中。</strong></p><p>1）点击 <a href="https://university-labfileapp.oss-cn-hangzhou.aliyuncs.com/web-demo.zip"><strong>附件下载</strong></a> ，下载并保存 <strong>web-demo.zip</strong> 示例站点到本地。</p><p>2）解压 <strong>web-demo.zip</strong> 到当前目录。</p><p>3）选中解压后的 <strong>web-demo</strong> 文件夹中的 <strong>所有文件</strong>，并拖拽文件到ECS的 <strong>/var/www/html</strong> 路径的 <strong>空目录列表</strong> 处。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/eabc66a10c91439faaf2e608bdadda59/content/images/course-129136057c2a4d50af22490b5ce8f878-section-eabc66a10c91439faaf2e608bdadda59-content-image-1493089846596-G3cfR4" alt="img" style="zoom:50%;" /><p>4）完成后，在浏览器中，再次访问ECS服务器的 <strong>弹性公网IP</strong> ，或者刷新已访问ECS服务器的公网IP页面。此时，将从Apache的测试页面变为 <strong>LAB ROOM</strong> 的示例网站。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/eabc66a10c91439faaf2e608bdadda59/content/images/course-129136057c2a4d50af22490b5ce8f878-section-eabc66a10c91439faaf2e608bdadda59-content-image-1493086386934-I0FMQZ" alt="img" style="zoom: 33%;" /><h1 id="（Windows系统）使用FileZilla上传"><a href="#（Windows系统）使用FileZilla上传" class="headerlink" title="（Windows系统）使用FileZilla上传"></a>（Windows系统）使用FileZilla上传</h1><p>\1. 请通过如下步骤，下载并安装 <strong>FileZilla软件。</strong></p><p>1）点击下载FileZilla：<a href="http://tansy01.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E4%B8%AD%E6%B2%99%E7%AE%B1%E9%99%84%E4%BB%B6%E7%AE%A1%E7%90%86/Filezilla_for_win64.zip">FileZilla_for_Win64</a></p><p>2）解压已下载的文件到当前或其他路径中。</p><p>3）在FileZilla的解压路径中，双击并打开FileZilla软件。</p><p>\2. 通过如下操作，连接到ECS服务器。</p><p>1）点击“文件-站点管理器”，新建站点，或在快速连接中输入如下信息，并点击<strong>连接</strong>，连接到ECS服务器。</p><ul><li>主机：输入本实验资源中分配的ECS Linux服务器 的 公网IP；</li><li>用户名：输入ECS服务器中新建用户 siteadmin；</li><li>密码：输入 siteadmin 用户的自定义登录密码，例如：siteadmin；</li><li>端口：22 ；</li><li>协议：SSH；</li></ul><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/2d318b95ee774a99ace71bbdcc6db16e/content/images/course-129136057c2a4d50af22490b5ce8f878-section-2d318b95ee774a99ace71bbdcc6db16e-content-image-1493089718404-nwrCIB" alt="img" style="zoom:50%;" /><p>2）页面弹出 <strong>是否信任主机</strong> 提示。点击 <strong>确定</strong> 。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/2d318b95ee774a99ace71bbdcc6db16e/content/images/course-129136057c2a4d50af22490b5ce8f878-section-2d318b95ee774a99ace71bbdcc6db16e-content-image-1493089736124-ZPMhSQ" alt="img" style="zoom:50%;" /><p>3）此时，页面右侧部分显示ECS的访问路径 <strong>/var/www/html，</strong>且当前路径下无文件。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/2d318b95ee774a99ace71bbdcc6db16e/content/images/course-129136057c2a4d50af22490b5ce8f878-section-2d318b95ee774a99ace71bbdcc6db16e-content-image-1493089013768-T7b6So" alt="img" style="zoom: 50%;" /><p>\3. 通过如下步骤，将本地的站点文件上传到ECS服务器中。</p><p>1）点击 <a href="https://university-labfileapp.oss-cn-hangzhou.aliyuncs.com/web-demo.zip"><strong>附件下载</strong></a> ，下载并保存 <strong>web-demo.zip</strong> 示例站点到本地。</p><p>2）解压 <strong>web-demo.zip</strong> 到当前或其他目录中。</p><p>3）选中解压后的 <strong>web-demo</strong> 文件夹中的所有文件，并拖拽文件到ECS的 <strong>/var/www/html</strong> 路径的 <strong>空目录列表</strong> 中。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/2d318b95ee774a99ace71bbdcc6db16e/content/images/course-129136057c2a4d50af22490b5ce8f878-section-2d318b95ee774a99ace71bbdcc6db16e-content-image-1493089615797-OZmz6n" alt="img" style="zoom:50%;" /><p>4）完成后，在浏览器中，再次访问ECS服务器的 <strong>公网IP</strong>，或者刷新已访问ECS服务器的 <strong>公网IP</strong> 页面。此时，将从Apache的测试页面变为 <strong>LAB ROOM</strong> 的示例网站。</p><img src="https://edu.aliyun.com/lab/files/courses/129136057c2a4d50af22490b5ce8f878/sections/2d318b95ee774a99ace71bbdcc6db16e/content/images/course-129136057c2a4d50af22490b5ce8f878-section-2d318b95ee774a99ace71bbdcc6db16e-content-image-1493089698754-5SdBPb" alt="img" style="zoom:50%;" /><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clouder</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
